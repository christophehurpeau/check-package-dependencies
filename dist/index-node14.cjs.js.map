{"version":3,"file":"index-node14.cjs.js","sources":["../src/utils/createReportError.ts","../src/checks/checkDirectDuplicateDependencies.ts","../src/checks/checkPeerDependencies.ts","../src/checks/checkDirectPeerDependencies.ts","../src/checks/checkExactVersions.ts","../src/utils/object.ts","../src/checks/checkIdenticalVersions.ts","../src/checks/checkIdenticalVersionsThanDependency.ts","../src/checks/checkNoDependencies.ts","../src/checks/checkResolutionsHasExplanation.ts","../src/checks/checkSatisfiesVersionsFromDependency.ts","../src/utils/createGetDependencyPackageJson.ts","../src/check-package.ts","../src/check-package-with-workspaces.ts"],"sourcesContent":["/* eslint-disable no-console */\n\nimport chalk from 'chalk';\n\nexport type ReportError = (\n  msgTitle: string,\n  msgInfo?: string,\n  onlyWarns?: boolean,\n) => void;\n\nlet titleDisplayed: string | null = null;\nlet pkgPathDisplayed: string | null = null;\n\nexport function logMessage(\n  msgTitle: string,\n  msgInfo?: string,\n  onlyWarns?: boolean,\n): void {\n  console.error(\n    `${\n      onlyWarns ? chalk.yellow(`⚠ ${msgTitle}`) : chalk.red(`❌ ${msgTitle}`)\n    }${msgInfo ? `: ${msgInfo}` : ''}`,\n  );\n}\n\nexport function createReportError(\n  title: string,\n  pkgPathName: string,\n): ReportError {\n  return function reportError(msgTitle, msgInfo, onlyWarns): void {\n    if (titleDisplayed !== title || pkgPathName !== pkgPathDisplayed) {\n      if (titleDisplayed) console.error();\n      console.error(chalk.cyan(`== ${title} in ${pkgPathName} ==`));\n      titleDisplayed = title;\n      pkgPathDisplayed = pkgPathName;\n    }\n    logMessage(msgTitle, msgInfo, onlyWarns);\n\n    if (!onlyWarns) {\n      // console.trace();\n      process.exitCode = 1;\n    }\n  };\n}\n","import semver from 'semver';\nimport type { ReportError } from '../utils/createReportError';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport function checkWarnedFor(\n  reportError: ReportError,\n  warnedFor: Set<string>,\n  onlyWarnsFor: string[] = [],\n): void {\n  onlyWarnsFor.forEach((depName) => {\n    if (!warnedFor.has(depName)) {\n      reportError(\n        `Invalid \"${depName}\" in \"onlyWarnsFor\" but no warning was raised`,\n      );\n    }\n  });\n}\n\nexport function checkDirectDuplicateDependencies(\n  pkg: PackageJson,\n  pkgPathName: string,\n  depType: DependencyTypes,\n  searchIn: DependencyTypes[],\n  depPkg: PackageJson,\n  onlyWarnsFor: string[] = [],\n  warnedForInternal?: Set<string>,\n  reportErrorNamePrefix = '',\n): void {\n  const dependencies = depPkg[depType];\n  if (!dependencies) return;\n\n  const warnedFor = warnedForInternal || new Set<string>();\n\n  const reportError = createReportError(\n    `${reportErrorNamePrefix}Direct Duplicate Dependencies`,\n    pkgPathName,\n  );\n  const searchInExisting = searchIn.filter((type) => pkg[type]);\n\n  for (const [depKey, range] of Object.entries(dependencies)) {\n    const versionsIn = searchInExisting.filter((type) => pkg[type]![depKey]);\n\n    if (versionsIn.length > 1) {\n      reportError(\n        `${depKey} is present in both devDependencies and dependencies, please place it only in dependencies`,\n      );\n    } else {\n      const versions = versionsIn.map((type) => pkg[type]![depKey]);\n\n      versions.forEach((version, index) => {\n        if (version.startsWith('file:') || range.startsWith('file:')) return;\n        // https://yarnpkg.com/features/workspaces#workspace-ranges-workspace\n        if (\n          version.startsWith('workspace:') ||\n          range.startsWith('workspace:')\n        ) {\n          return;\n        }\n\n        if (\n          semver.satisfies(version, range, {\n            includePrerelease: true,\n          }) ||\n          semver.intersects(version, range, {\n            includePrerelease: true,\n          })\n        ) {\n          return;\n        }\n\n        // Ignore reporting duplicate when there's a resolution for it\n        if (pkg.resolutions?.[depKey]) {\n          return;\n        }\n\n        const versionInType = versionsIn[index];\n        const shouldWarns = onlyWarnsFor.includes(depKey);\n        if (shouldWarns) warnedFor.add(depKey);\n\n        reportError(\n          `Invalid duplicate dependency \"${depKey}\"`,\n          `\"${versions[0]}\" (in ${versionInType}) should satisfies \"${range}\" from \"${depPkg.name}\" ${depType}.`,\n          shouldWarns,\n        );\n      });\n    }\n  }\n\n  if (!warnedForInternal) {\n    checkWarnedFor(reportError, warnedFor, onlyWarnsFor);\n  }\n}\n","import semver from 'semver';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport function checkPeerDependencies(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  allowedPeerIn: DependencyTypes[],\n  depPkg: PackageJson,\n  onlyWarnsFor: string[] = [],\n): void {\n  const { peerDependencies, peerDependenciesMeta } = depPkg;\n  if (!peerDependencies) return;\n  const reportError = createReportError('Peer Dependencies', pkgPathName);\n\n  const allowedPeerInExisting = allowedPeerIn.filter(\n    (allowedPeerInType) => pkg[allowedPeerInType],\n  );\n\n  for (const [peerDepKey, range] of Object.entries(peerDependencies)) {\n    const versionsIn = allowedPeerInExisting.filter(\n      (allowedPeerInExistingType) =>\n        pkg[allowedPeerInExistingType]![peerDepKey],\n    );\n    if (versionsIn.length === 0) {\n      const peerDependenciesMetaPeerDep = peerDependenciesMeta?.[peerDepKey];\n      if (peerDependenciesMetaPeerDep?.optional) {\n        return;\n      }\n      reportError(\n        `Missing \"${peerDepKey}\" peer dependency from \"${depPkg.name}\" in ${type}`,\n        `it should satisfies \"${range}\" and be in ${allowedPeerIn.join(\n          ' or ',\n        )}`,\n        onlyWarnsFor.includes(peerDepKey),\n      );\n    } else {\n      const versions = versionsIn.map(\n        (versionsInType) => pkg[versionsInType]![peerDepKey],\n      );\n\n      versions.forEach((version, index) => {\n        const minVersionOfVersion = semver.minVersion(version);\n        if (\n          !minVersionOfVersion ||\n          !semver.satisfies(minVersionOfVersion, range, {\n            includePrerelease: true,\n          })\n        ) {\n          reportError(\n            `Invalid \"${peerDepKey}\" peer dependency`,\n            `\"${version}\" (in ${allowedPeerInExisting[index]}) should satisfies \"${range}\" from \"${depPkg.name}\" ${type}`,\n            onlyWarnsFor.includes(peerDepKey),\n          );\n        }\n      });\n    }\n  }\n}\n","import type {\n  DependencyTypes,\n  PackageJson,\n  RegularDependencyTypes,\n} from '../utils/packageTypes';\nimport { checkPeerDependencies } from './checkPeerDependencies';\n\nconst getAllowedPeerInFromType = (\n  depPkgType: RegularDependencyTypes,\n  isLibrary: boolean,\n): DependencyTypes[] => {\n  switch (depPkgType) {\n    case 'devDependencies':\n      return ['devDependencies', 'dependencies'];\n    case 'dependencies':\n    case 'optionalDependencies':\n      return isLibrary\n        ? ['dependencies', 'peerDependencies']\n        : ['dependencies'];\n  }\n};\n\nexport function checkDirectPeerDependencies(\n  isLibrary: boolean,\n  pkg: PackageJson,\n  pkgPathName: string,\n  depPkgType: RegularDependencyTypes,\n  depPkg: PackageJson,\n  onlyWarnsFor: string[] = [],\n): void {\n  if (depPkg.peerDependencies) {\n    checkPeerDependencies(\n      pkg,\n      pkgPathName,\n      depPkgType,\n      getAllowedPeerInFromType(depPkgType, isLibrary),\n      depPkg,\n      onlyWarnsFor,\n    );\n  }\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport interface CheckExactVersionsOptions {\n  onlyWarnsFor?: string[];\n  tryToAutoFix?: boolean;\n}\n\nexport function checkExactVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  { onlyWarnsFor = [], tryToAutoFix = false }: CheckExactVersionsOptions = {},\n): void {\n  const pkgDependencies = pkg[type];\n  if (!pkgDependencies) return;\n\n  const reportError = createReportError('Exact versions', pkgPathName);\n\n  for (const [depKey, version] of Object.entries(pkgDependencies)) {\n    if (version.startsWith('^') || version.startsWith('~')) {\n      const shouldOnlyWarn = onlyWarnsFor.includes(depKey);\n      if (!shouldOnlyWarn && tryToAutoFix) {\n        pkgDependencies[depKey] = version.slice(1);\n      } else {\n        reportError(\n          `Unexpected range dependency in \"${type}\" for \"${depKey}\"`,\n          `expecting \"${version}\" to be exact \"${version.slice(1)}\".`,\n          shouldOnlyWarn,\n        );\n      }\n    }\n  }\n}\n","export const getKeys = <T>(o: T): (keyof T)[] => Object.keys(o) as (keyof T)[];\n","import { createReportError } from '../utils/createReportError';\nimport { getKeys } from '../utils/object';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\n\nexport function checkIdenticalVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  deps: Record<string, string[] | Partial<Record<DependencyTypes, string[]>>>,\n  onlyWarnsFor: string[] = [],\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError('Identical Versions', pkgPathName);\n\n  getKeys(deps).forEach((depKey) => {\n    const version = pkgDependencies[depKey];\n    if (!version) {\n      reportError(`Unexpected missing ${type} for \"${depKey}\".`);\n      return;\n    }\n\n    const depConfigArrayOrObject = deps[depKey];\n    const depConfig = Array.isArray(depConfigArrayOrObject)\n      ? { [type]: depConfigArrayOrObject }\n      : depConfigArrayOrObject;\n\n    getKeys(depConfig).forEach((depKeyType) => {\n      const pkgDependenciesType = pkg[depKeyType] || {};\n      depConfig[depKeyType]?.forEach((depKeyIdentical) => {\n        const value = pkgDependenciesType[depKeyIdentical];\n        if (!value) {\n          reportError(\n            `Missing \"${depKeyIdentical}\" in ${depKeyType}`,\n            `it should be \"${version}\".`,\n            onlyWarnsFor.includes(depKey),\n          );\n        }\n\n        if (value !== version) {\n          reportError(\n            `Invalid \"${depKeyIdentical}\" in ${depKeyType}`,\n            `expecting \"${value}\" be \"${version}\".`,\n            onlyWarnsFor.includes(depKey),\n          );\n        }\n      });\n    });\n  });\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport function checkIdenticalVersionsThanDependency(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  depKeys: string[],\n  depPkg: PackageJson,\n  dependencies: PackageJson[DependencyTypes] = {},\n  onlyWarnsFor: string[] = [],\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError(\n    `Same Versions than ${depPkg.name}`,\n    pkgPathName,\n  );\n\n  depKeys.forEach((depKey) => {\n    const version = dependencies[depKey];\n    if (!version) {\n      reportError(\n        `Unexpected missing dependency \"${depKey}\" in \"${depPkg.name}\".`,\n      );\n      return;\n    }\n\n    if (version.startsWith('^') || version.startsWith('~')) {\n      reportError(\n        `Unexpected range dependency in \"${depPkg.name}\" for \"${depKey}\"`,\n        'perhaps use checkSatisfiesVersionsFromDependency() instead.',\n      );\n      return;\n    }\n\n    const value = pkgDependencies[depKey];\n\n    if (!value) {\n      reportError(\n        `Missing \"${depKey}\" in ${type}`,\n        `expecting to be \"${version}\".`,\n        onlyWarnsFor.includes(depKey),\n      );\n    }\n\n    if (value !== version) {\n      reportError(\n        `Invalid \"${depKey}\" in ${type}`,\n        `expecting \"${value}\" to be \"${version}\".`,\n        onlyWarnsFor.includes(depKey),\n      );\n    }\n  });\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport function checkNoDependencies(\n  pkg: PackageJson,\n  pkgPath: string,\n  type: DependencyTypes = 'dependencies',\n  moveToSuggestion: DependencyTypes = 'devDependencies',\n): void {\n  const pkgDependencies = pkg[type];\n  if (!pkgDependencies) return;\n\n  const reportError = createReportError('No dependencies', pkgPath);\n  reportError(\n    `Unexpected ${type}`,\n    `you should move them in ${moveToSuggestion}`,\n  );\n}\n","import type { GetDependencyPackageJson } from '../utils/createGetDependencyPackageJson';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson } from '../utils/packageTypes';\n\nexport type CheckResolutionMessage = (\n  depKey: string,\n  resolutionExplainedMessage: string,\n  checkMessageHelpers: {\n    getDependencyPackageJson: GetDependencyPackageJson;\n  },\n) => string | undefined;\n\nexport function checkResolutionsHasExplanation(\n  pkg: PackageJson,\n  pkgPathName: string,\n  checkMessage: CheckResolutionMessage,\n  getDependencyPackageJson: GetDependencyPackageJson,\n): void {\n  const pkgResolutions = pkg.resolutions || {};\n  const pkgResolutionsExplained = pkg.resolutionsExplained || {};\n  const reportError = createReportError(\n    'Resolutions has explanation',\n    pkgPathName,\n  );\n\n  Object.keys(pkgResolutions).forEach((depKey) => {\n    if (!pkgResolutionsExplained[depKey]) {\n      reportError(`Missing \"${depKey}\" in resolutionsExplained.`);\n    }\n  });\n\n  Object.keys(pkgResolutionsExplained).forEach((depKey) => {\n    if (!pkgResolutions[depKey]) {\n      reportError(\n        `Found \"${depKey}\" in resolutionsExplained but not in resolutions.`,\n      );\n    } else {\n      const error = checkMessage(depKey, pkgResolutionsExplained[depKey], {\n        getDependencyPackageJson,\n      });\n      if (error) {\n        reportError(\n          `Invalid message for \"${depKey}\" in resolutionsExplained`,\n          `${error}.`,\n        );\n      }\n    }\n  });\n}\n","import semver from 'semver';\nimport { createReportError } from '../utils/createReportError';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\n\nexport function checkSatisfiesVersionsFromDependency(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  depKeys: string[],\n  depPkg: PackageJson,\n  dependencies: PackageJson[DependencyTypes] = {},\n  onlyWarnsFor: string[] = [],\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError(\n    `Satisfies Versions from ${depPkg.name}`,\n    pkgPathName,\n  );\n\n  depKeys.forEach((depKey) => {\n    const range = dependencies[depKey];\n    if (!range) {\n      reportError(\n        `Unexpected missing dependency \"${depKey}\" in \"${depPkg.name}\".`,\n      );\n      return;\n    }\n\n    const version = pkgDependencies[depKey];\n\n    if (!version) {\n      reportError(\n        `Missing \"${depKey}\" in ${type}`,\n        `should satisfies \"${range}\" from \"${depPkg.name}\" ${depKey}.`,\n        onlyWarnsFor.includes(depKey),\n      );\n    } else {\n      const minVersionOfVersion = semver.minVersion(version);\n      if (\n        !minVersionOfVersion ||\n        !semver.satisfies(minVersionOfVersion, range, {\n          includePrerelease: true,\n        })\n      ) {\n        reportError(\n          `Invalid \"${depKey}\" in ${type}`,\n          `\"${version}\" (in \"${depKey}\") should satisfies \"${range}\" from \"${depPkg.name}\" ${depKey}.`,\n          onlyWarnsFor.includes(depKey),\n        );\n      }\n    }\n  });\n}\n","import { readFileSync, writeFileSync } from 'fs';\nimport type { PackageJson } from './packageTypes';\n\nexport type GetDependencyPackageJson = (pkgDepName: string) => PackageJson;\n\nexport function readPkgJson(packagePath: string): PackageJson {\n  return JSON.parse(readFileSync(packagePath, 'utf-8')) as PackageJson;\n}\n\nexport function writePkgJson(packagePath: string, pkg: PackageJson): void {\n  writeFileSync(packagePath, JSON.stringify(pkg));\n}\n\ntype NodeModulesPackagePathCache = Map<string, PackageJson>;\n\ninterface CreateGetDependencyPackageJsonOptions {\n  pkgDirname: string;\n  nodeModulesPackagePathCache?: NodeModulesPackagePathCache;\n}\n\nexport function createGetDependencyPackageJson({\n  pkgDirname,\n  nodeModulesPackagePathCache = new Map<string, PackageJson>(),\n}: CreateGetDependencyPackageJsonOptions): GetDependencyPackageJson {\n  return (pkgDepName) => {\n    const existing = nodeModulesPackagePathCache.get(pkgDepName);\n    if (existing) return existing;\n    let pkg: PackageJson;\n    if (pkgDepName.startsWith('.')) {\n      const packagePath = `${pkgDirname}/${pkgDepName}/package.json`;\n      pkg = readPkgJson(packagePath);\n    } else {\n      try {\n        // eslint-disable-next-line import/no-dynamic-require, @typescript-eslint/no-unsafe-assignment\n        pkg = require(require.resolve(`${pkgDepName}/package.json`, {\n          paths: [pkgDirname],\n        }));\n      } catch (err: unknown) {\n        if (!(err instanceof Error)) throw err;\n\n        if (\n          (err as NodeJS.ErrnoException).code !==\n          'ERR_PACKAGE_PATH_NOT_EXPORTED'\n        ) {\n          throw err;\n        }\n\n        const match = / in (.*\\/package.json)($|\\simported from)/.exec(\n          err.message,\n        );\n\n        if (match) {\n          const [, matchPackageJson] = match;\n          pkg = readPkgJson(matchPackageJson);\n        } else {\n          throw err;\n        }\n      }\n    }\n    nodeModulesPackagePathCache.set(pkgDepName, pkg);\n    return pkg;\n  };\n}\n","/* eslint-disable max-lines */\nimport path from 'path';\nimport util from 'util';\nimport {\n  checkDirectDuplicateDependencies,\n  checkWarnedFor,\n} from './checks/checkDirectDuplicateDependencies';\nimport { checkDirectPeerDependencies } from './checks/checkDirectPeerDependencies';\nimport { checkExactVersions } from './checks/checkExactVersions';\nimport { checkIdenticalVersions } from './checks/checkIdenticalVersions';\nimport { checkIdenticalVersionsThanDependency } from './checks/checkIdenticalVersionsThanDependency';\nimport { checkNoDependencies } from './checks/checkNoDependencies';\nimport type { CheckResolutionMessage } from './checks/checkResolutionsHasExplanation';\nimport { checkResolutionsHasExplanation } from './checks/checkResolutionsHasExplanation';\nimport { checkSatisfiesVersionsFromDependency } from './checks/checkSatisfiesVersionsFromDependency';\nimport type { GetDependencyPackageJson } from './utils/createGetDependencyPackageJson';\nimport {\n  createGetDependencyPackageJson,\n  readPkgJson,\n  writePkgJson,\n} from './utils/createGetDependencyPackageJson';\nimport { createReportError } from './utils/createReportError';\nimport { getKeys } from './utils/object';\nimport type {\n  RegularDependencyTypes,\n  DependencyTypes,\n  PackageJson,\n} from './utils/packageTypes';\n\nconst regularDependencyTypes: RegularDependencyTypes[] = [\n  'devDependencies',\n  'dependencies',\n  'optionalDependencies',\n];\n\nexport interface CreateCheckPackageOptions {\n  tryToAutoFix?: boolean;\n}\n\nexport interface CheckDirectPeerDependenciesOptions {\n  isLibrary?: boolean;\n  onlyWarnsFor?: string[];\n}\n\nexport interface CheckDirectDuplicateDependenciesOptions {\n  onlyWarnsFor?: string[];\n  /** @internal */\n  internalWarnedForDuplicate?: Set<string>;\n}\n\nexport interface CheckRecommendedOptions {\n  isLibrary?: boolean;\n  peerDependenciesOnlyWarnsFor?: string[];\n  directDuplicateDependenciesOnlyWarnsFor?: string[];\n  exactVersionsOnlyWarnsFor?: string[];\n  checkResolutionMessage?: CheckResolutionMessage;\n  /** @internal */\n  internalWarnedForDuplicate?: Set<string>;\n}\n\nexport interface CheckExactVersionsOptions {\n  onlyWarnsFor?: string[];\n}\n\nexport interface CheckPackageApi {\n  /** @internal */\n  pkg: PackageJson;\n  /** @internal */\n  pkgDirname: string;\n  /** @internal */\n  pkgPathName: string;\n  /** @internal */\n  getDependencyPackageJson: GetDependencyPackageJson;\n\n  checkExactVersions: (options?: CheckExactVersionsOptions) => CheckPackageApi;\n  checkExactVersionsForLibrary: (\n    options?: CheckExactVersionsOptions,\n  ) => CheckPackageApi;\n  checkExactDevVersions: (\n    options?: CheckExactVersionsOptions,\n  ) => CheckPackageApi;\n  checkNoDependencies: (\n    type?: DependencyTypes,\n    moveToSuggestion?: DependencyTypes,\n  ) => CheckPackageApi;\n  checkDirectPeerDependencies: (\n    options?: CheckDirectPeerDependenciesOptions,\n  ) => CheckPackageApi;\n  checkDirectDuplicateDependencies: (\n    options?: CheckDirectDuplicateDependenciesOptions,\n  ) => CheckPackageApi;\n  checkResolutionsHasExplanation: (\n    checkMessage?: CheckResolutionMessage,\n  ) => CheckPackageApi;\n  checkRecommended: (options?: CheckRecommendedOptions) => CheckPackageApi;\n  checkIdenticalVersionsThanDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkIdenticalVersionsThanDevDependencyOfDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkSatisfiesVersionsFromDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkSatisfiesVersionsInDevDependenciesOfDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkIdenticalVersions: (dependencies: {\n    resolutions?: Record<string, string[]>;\n    dependencies?: Record<string, string[]>;\n    devDependencies?: Record<string, string[]>;\n  }) => CheckPackageApi;\n  checkSatisfiesVersionsBetweenDependencies: (\n    depName1: string,\n    depName2: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n}\n\nexport function createCheckPackage(\n  pkgDirectoryPath = '.',\n  { tryToAutoFix = false }: CreateCheckPackageOptions = {},\n): CheckPackageApi {\n  const pkgDirname = path.resolve(pkgDirectoryPath);\n  const pkgPath = `${pkgDirname}/package.json`;\n  const pkgPathName = `${pkgDirectoryPath}/package.json`;\n  const pkg = readPkgJson(pkgPath);\n  const copyPkg: PackageJson = JSON.parse(JSON.stringify(pkg)) as PackageJson;\n\n  if (\n    process.env.CI &&\n    process.env.CHECK_PACKAGE_DEPENDENCIES_ENABLE_CI_AUTOFIX !== 'true'\n  ) {\n    tryToAutoFix = false;\n  }\n\n  const writePackageIfChanged = (): void => {\n    if (!tryToAutoFix) return;\n    if (util.isDeepStrictEqual(pkg, copyPkg)) return;\n    writePkgJson(pkgPath, pkg);\n  };\n\n  const getDependencyPackageJson = createGetDependencyPackageJson({\n    pkgDirname,\n  });\n\n  return {\n    pkg,\n    pkgDirname,\n    pkgPathName,\n    getDependencyPackageJson,\n    checkExactVersions({ onlyWarnsFor } = {}) {\n      checkExactVersions(pkg, pkgPathName, 'dependencies', {\n        onlyWarnsFor,\n        tryToAutoFix,\n      });\n      checkExactVersions(pkg, pkgPathName, 'devDependencies', {\n        onlyWarnsFor,\n        tryToAutoFix,\n      });\n      checkExactVersions(pkg, pkgPathName, 'resolutions', {\n        onlyWarnsFor,\n        tryToAutoFix,\n      });\n      writePackageIfChanged();\n      return this;\n    },\n    checkExactVersionsForLibrary({ onlyWarnsFor } = {}) {\n      checkExactVersions(pkg, pkgPathName, 'devDependencies', {\n        onlyWarnsFor,\n        tryToAutoFix,\n      });\n      checkExactVersions(pkg, pkgPathName, 'resolutions', {\n        onlyWarnsFor,\n        tryToAutoFix,\n      });\n      writePackageIfChanged();\n      return this;\n    },\n\n    checkExactDevVersions({ onlyWarnsFor } = {}) {\n      checkExactVersions(pkg, pkgPathName, 'devDependencies', {\n        onlyWarnsFor,\n        tryToAutoFix,\n      });\n      writePackageIfChanged();\n      return this;\n    },\n\n    checkNoDependencies(\n      type = 'dependencies',\n      moveToSuggestion = 'devDependencies',\n    ) {\n      checkNoDependencies(pkg, pkgPathName, type, moveToSuggestion);\n      return this;\n    },\n\n    checkDirectPeerDependencies({ isLibrary = false, onlyWarnsFor } = {}) {\n      regularDependencyTypes.forEach((depType) => {\n        if (!pkg[depType]) return;\n        getKeys(pkg[depType]).forEach((depName) => {\n          const depPkg = getDependencyPackageJson(depName);\n          if (depPkg.peerDependencies) {\n            checkDirectPeerDependencies(\n              isLibrary,\n              pkg,\n              pkgPathName,\n              depType,\n              depPkg,\n              onlyWarnsFor,\n            );\n          }\n        });\n      });\n      return this;\n    },\n\n    checkDirectDuplicateDependencies({\n      onlyWarnsFor,\n      internalWarnedForDuplicate,\n    } = {}) {\n      const warnedForInternal = internalWarnedForDuplicate || new Set();\n      const checks: {\n        type: DependencyTypes;\n        searchIn: DependencyTypes[];\n      }[] = [\n        {\n          type: 'devDependencies',\n          searchIn: ['devDependencies', 'dependencies'],\n        },\n        { type: 'dependencies', searchIn: ['devDependencies', 'dependencies'] },\n      ];\n      checks.forEach(({ type, searchIn }) => {\n        if (!pkg[type]) return;\n        getKeys(pkg[type]).forEach((depName) => {\n          const depPkg = getDependencyPackageJson(depName);\n          checkDirectDuplicateDependencies(\n            pkg,\n            pkgPathName,\n            'dependencies',\n            searchIn,\n            depPkg,\n            onlyWarnsFor,\n            warnedForInternal,\n          );\n        });\n      });\n\n      if (!warnedForInternal) {\n        const reportError = createReportError(\n          'Direct Duplicate Dependencies',\n          pkgPathName,\n        );\n        checkWarnedFor(reportError, warnedForInternal, onlyWarnsFor);\n      }\n      return this;\n    },\n\n    checkResolutionsHasExplanation(\n      checkMessage: CheckResolutionMessage = (depKey, message) => undefined,\n    ) {\n      checkResolutionsHasExplanation(\n        pkg,\n        pkgPathName,\n        checkMessage,\n        getDependencyPackageJson,\n      );\n      return this;\n    },\n\n    checkRecommended({\n      isLibrary = false,\n      peerDependenciesOnlyWarnsFor,\n      directDuplicateDependenciesOnlyWarnsFor,\n      exactVersionsOnlyWarnsFor,\n      checkResolutionMessage,\n      internalWarnedForDuplicate,\n    } = {}) {\n      if (isLibrary) {\n        this.checkExactVersionsForLibrary({\n          onlyWarnsFor: exactVersionsOnlyWarnsFor,\n        });\n      } else {\n        this.checkExactVersions({ onlyWarnsFor: exactVersionsOnlyWarnsFor });\n      }\n\n      this.checkDirectPeerDependencies({\n        isLibrary,\n        onlyWarnsFor: peerDependenciesOnlyWarnsFor,\n      });\n\n      this.checkDirectDuplicateDependencies({\n        onlyWarnsFor: directDuplicateDependenciesOnlyWarnsFor,\n        internalWarnedForDuplicate,\n      });\n\n      this.checkResolutionsHasExplanation(checkResolutionMessage);\n      return this;\n    },\n\n    checkIdenticalVersionsThanDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (dependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      return this;\n    },\n\n    checkIdenticalVersionsThanDevDependencyOfDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (dependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (devDependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsFromDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsInDevDependenciesOfDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkIdenticalVersions({ resolutions, dependencies, devDependencies }) {\n      if (resolutions) {\n        checkIdenticalVersions(pkg, pkgPathName, 'resolutions', resolutions);\n      }\n      if (dependencies) {\n        checkIdenticalVersions(pkg, pkgPathName, 'dependencies', dependencies);\n      }\n      if (devDependencies) {\n        checkIdenticalVersions(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsBetweenDependencies(\n      depName1,\n      depName2,\n      { dependencies, devDependencies },\n    ) {\n      const depPkg1 = getDependencyPackageJson(depName1);\n      const depPkg2 = getDependencyPackageJson(depName2);\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          depPkg2,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg1,\n          depPkg1.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          depPkg2,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg1,\n          depPkg1.dependencies,\n        );\n      }\n      return this;\n    },\n  };\n}\n","import fs from 'fs';\nimport path from 'path';\nimport glob from 'glob';\nimport type { CheckPackageApi } from './check-package';\nimport { createCheckPackage } from './check-package';\nimport {\n  checkDirectDuplicateDependencies,\n  checkWarnedFor,\n} from './checks/checkDirectDuplicateDependencies';\nimport type { CheckResolutionMessage } from './checks/checkResolutionsHasExplanation';\nimport { createReportError } from './utils/createReportError';\n\nexport interface CheckPackageWithWorkspacesRecommendedOptions {\n  isLibrary?: (pkgName: string) => boolean;\n  peerDependenciesOnlyWarnsFor?: string[];\n  directDuplicateDependenciesOnlyWarnsFor?: string[];\n  monorepoDirectDuplicateDependenciesOnlyWarnsFor?: string[];\n  checkResolutionMessage?: CheckResolutionMessage;\n}\n\nexport interface CheckPackageWithWorkspacesApi {\n  checkRecommended: (\n    options?: CheckPackageWithWorkspacesRecommendedOptions,\n  ) => CheckPackageWithWorkspacesApi;\n\n  forRoot: (\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n  forEach: (\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n  for: (\n    id: string,\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n}\n\nexport function createCheckPackageWithWorkspaces(\n  pkgDirectoryPath = '.',\n): CheckPackageWithWorkspacesApi {\n  const checkPackage = createCheckPackage(pkgDirectoryPath);\n  const { pkg, pkgDirname, pkgPathName } = checkPackage;\n\n  const pkgWorkspaces: string[] | undefined =\n    pkg.workspaces && !Array.isArray(pkg.workspaces)\n      ? pkg.workspaces.packages\n      : pkg.workspaces;\n\n  if (!pkgWorkspaces) {\n    throw new Error('Package is missing \"workspaces\"');\n  }\n\n  const workspacePackagesPaths: string[] = [];\n\n  if (pkgWorkspaces) {\n    pkgWorkspaces.forEach((pattern) => {\n      const match = glob.sync(`${pkgDirname}/${pattern}`);\n      match.forEach((pathMatch) => {\n        const stat = fs.statSync(pathMatch);\n        if (!stat.isDirectory()) return;\n        const subPkgDirectoryPath = path.relative(process.cwd(), pathMatch);\n        workspacePackagesPaths.push(subPkgDirectoryPath);\n      });\n    });\n  }\n\n  const checksWorkspaces = new Map<string, CheckPackageApi>(\n    workspacePackagesPaths.map((subPkgDirectoryPath) => {\n      const checkPkg = createCheckPackage(subPkgDirectoryPath);\n      return [checkPkg.pkg.name, checkPkg];\n    }),\n  );\n\n  return {\n    checkRecommended({\n      isLibrary = () => false,\n      peerDependenciesOnlyWarnsFor,\n      directDuplicateDependenciesOnlyWarnsFor,\n      monorepoDirectDuplicateDependenciesOnlyWarnsFor,\n      checkResolutionMessage,\n    } = {}) {\n      const monorepoWarnedForDuplicate = new Set<string>();\n      const warnedForDuplicate = new Set<string>();\n      checkPackage.checkNoDependencies();\n      checkPackage.checkRecommended({\n        isLibrary: false,\n        peerDependenciesOnlyWarnsFor,\n        directDuplicateDependenciesOnlyWarnsFor,\n        checkResolutionMessage,\n        internalWarnedForDuplicate: warnedForDuplicate,\n      });\n\n      checksWorkspaces.forEach((checkSubPackage, id) => {\n        checkSubPackage.checkRecommended({\n          isLibrary: isLibrary(id),\n          peerDependenciesOnlyWarnsFor,\n          directDuplicateDependenciesOnlyWarnsFor,\n          exactVersionsOnlyWarnsFor: [...checksWorkspaces.keys()],\n          checkResolutionMessage,\n          internalWarnedForDuplicate: warnedForDuplicate,\n        });\n        checkDirectDuplicateDependencies(\n          checkSubPackage.pkg,\n          checkSubPackage.pkgPathName,\n          'devDependencies',\n          ['devDependencies', 'dependencies'],\n          pkg,\n          monorepoDirectDuplicateDependenciesOnlyWarnsFor,\n          monorepoWarnedForDuplicate,\n          'Monorepo ',\n        );\n      });\n\n      checkWarnedFor(\n        createReportError('Recommended Checks', pkgPathName),\n        warnedForDuplicate,\n        directDuplicateDependenciesOnlyWarnsFor,\n      );\n\n      return this;\n    },\n\n    forRoot(callback) {\n      callback(checkPackage);\n      return this;\n    },\n\n    forEach(callback) {\n      checksWorkspaces.forEach((checkSubPackage) => {\n        callback(checkSubPackage);\n      });\n      return this;\n    },\n\n    for(id, callback) {\n      const packageCheck = checksWorkspaces.get(id);\n      if (!packageCheck) {\n        throw new Error(\n          `Invalid package name: ${id}. Known package names: \"${[\n            ...checksWorkspaces.keys(),\n          ].join('\",\"')}\"`,\n        );\n      }\n      callback(packageCheck);\n      return this;\n    },\n  };\n}\n"],"names":["titleDisplayed","pkgPathDisplayed","logMessage","msgTitle","msgInfo","onlyWarns","console","error","chalk","yellow","red","createReportError","title","pkgPathName","reportError","cyan","process","exitCode","checkWarnedFor","warnedFor","onlyWarnsFor","forEach","depName","has","checkDirectDuplicateDependencies","pkg","depType","searchIn","depPkg","warnedForInternal","reportErrorNamePrefix","dependencies","Set","searchInExisting","filter","type","depKey","range","Object","entries","versionsIn","length","versions","map","version","index","startsWith","semver","satisfies","includePrerelease","intersects","resolutions","versionInType","shouldWarns","includes","add","name","checkPeerDependencies","allowedPeerIn","peerDependencies","peerDependenciesMeta","allowedPeerInExisting","allowedPeerInType","peerDepKey","allowedPeerInExistingType","peerDependenciesMetaPeerDep","optional","join","versionsInType","minVersionOfVersion","minVersion","getAllowedPeerInFromType","depPkgType","isLibrary","checkDirectPeerDependencies","checkExactVersions","tryToAutoFix","pkgDependencies","shouldOnlyWarn","slice","getKeys","o","keys","checkIdenticalVersions","deps","depConfigArrayOrObject","depConfig","Array","isArray","depKeyType","pkgDependenciesType","depKeyIdentical","value","checkIdenticalVersionsThanDependency","depKeys","checkNoDependencies","pkgPath","moveToSuggestion","checkResolutionsHasExplanation","checkMessage","getDependencyPackageJson","pkgResolutions","pkgResolutionsExplained","resolutionsExplained","checkSatisfiesVersionsFromDependency","readPkgJson","packagePath","JSON","parse","readFileSync","writePkgJson","writeFileSync","stringify","createGetDependencyPackageJson","pkgDirname","nodeModulesPackagePathCache","Map","pkgDepName","existing","get","require","resolve","paths","err","Error","code","match","exec","message","matchPackageJson","set","regularDependencyTypes","createCheckPackage","pkgDirectoryPath","path","copyPkg","env","CI","CHECK_PACKAGE_DEPENDENCIES_ENABLE_CI_AUTOFIX","writePackageIfChanged","util","isDeepStrictEqual","checkExactVersionsForLibrary","checkExactDevVersions","internalWarnedForDuplicate","undefined","checkRecommended","peerDependenciesOnlyWarnsFor","directDuplicateDependenciesOnlyWarnsFor","exactVersionsOnlyWarnsFor","checkResolutionMessage","devDependencies","checkIdenticalVersionsThanDevDependencyOfDependency","checkSatisfiesVersionsInDevDependenciesOfDependency","checkSatisfiesVersionsBetweenDependencies","depName1","depName2","depPkg1","depPkg2","createCheckPackageWithWorkspaces","checkPackage","pkgWorkspaces","workspaces","packages","workspacePackagesPaths","pattern","glob","sync","pathMatch","stat","fs","statSync","isDirectory","subPkgDirectoryPath","relative","cwd","push","checksWorkspaces","checkPkg","monorepoDirectDuplicateDependenciesOnlyWarnsFor","monorepoWarnedForDuplicate","warnedForDuplicate","checkSubPackage","id","forRoot","callback","for","packageCheck"],"mappings":"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"}