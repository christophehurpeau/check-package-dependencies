{"version":3,"file":"index-node14.cjs.js","sources":["../src/utils/createReportError.ts","../src/utils/shouldOnlyWarnFor.ts","../src/checks/checkDirectDuplicateDependencies.ts","../src/checks/checkPeerDependencies.ts","../src/checks/checkDirectPeerDependencies.ts","../src/checks/checkExactVersions.ts","../src/utils/object.ts","../src/checks/checkIdenticalVersions.ts","../src/checks/checkIdenticalVersionsThanDependency.ts","../src/checks/checkNoDependencies.ts","../src/checks/checkResolutionsHasExplanation.ts","../src/checks/checkSatisfiesVersionsFromDependency.ts","../src/utils/createGetDependencyPackageJson.ts","../src/check-package.ts","../src/check-package-with-workspaces.ts"],"sourcesContent":["/* eslint-disable no-console */\n\nimport chalk from 'chalk';\n\nexport type ReportError = (\n  msgTitle: string,\n  msgInfo?: string,\n  onlyWarns?: boolean,\n) => void;\n\nlet titleDisplayed: string | null = null;\nlet pkgPathDisplayed: string | null = null;\n\nexport function logMessage(\n  msgTitle: string,\n  msgInfo?: string,\n  onlyWarns?: boolean,\n): void {\n  console.error(\n    `${\n      onlyWarns ? chalk.yellow(`⚠ ${msgTitle}`) : chalk.red(`❌ ${msgTitle}`)\n    }${msgInfo ? `: ${msgInfo}` : ''}`,\n  );\n}\n\nexport function createReportError(\n  title: string,\n  pkgPathName: string,\n): ReportError {\n  return function reportError(msgTitle, msgInfo, onlyWarns): void {\n    if (titleDisplayed !== title || pkgPathName !== pkgPathDisplayed) {\n      if (titleDisplayed) console.error();\n      console.error(chalk.cyan(`== ${title} in ${pkgPathName} ==`));\n      titleDisplayed = title;\n      pkgPathDisplayed = pkgPathName;\n    }\n    logMessage(msgTitle, msgInfo, onlyWarns);\n\n    if (!onlyWarns) {\n      // console.trace();\n      process.exitCode = 1;\n    }\n  };\n}\n","export type OnlyWarnsFor = string[];\n\nexport const shouldOnlyWarnFor = (\n  dependencyName: string,\n  onlyWarnsFor: OnlyWarnsFor,\n): boolean => onlyWarnsFor.includes(dependencyName);\n","import semver from 'semver';\nimport type { ReportError } from '../utils/createReportError';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport { shouldOnlyWarnFor } from '../utils/shouldOnlyWarnFor';\n\nexport function checkWarnedFor(\n  reportError: ReportError,\n  warnedFor: Set<string>,\n  onlyWarnsFor: string[] = [],\n): void {\n  onlyWarnsFor.forEach((depName) => {\n    if (!warnedFor.has(depName)) {\n      reportError(\n        `Invalid \"${depName}\" in \"onlyWarnsFor\" but no warning was raised`,\n      );\n    }\n  });\n}\n\nexport function checkDirectDuplicateDependencies(\n  pkg: PackageJson,\n  pkgPathName: string,\n  depType: DependencyTypes,\n  searchIn: DependencyTypes[],\n  depPkg: PackageJson,\n  onlyWarnsFor: string[] = [],\n  warnedForInternal?: Set<string>,\n  reportErrorNamePrefix = '',\n): void {\n  const dependencies = depPkg[depType];\n  if (!dependencies) return;\n\n  const warnedFor = warnedForInternal || new Set<string>();\n\n  const reportError = createReportError(\n    `${reportErrorNamePrefix}Direct Duplicate Dependencies`,\n    pkgPathName,\n  );\n  const searchInExisting = searchIn.filter((type) => pkg[type]);\n\n  for (const [depKey, range] of Object.entries(dependencies)) {\n    const versionsIn = searchInExisting.filter((type) => pkg[type]![depKey]);\n\n    if (versionsIn.length > 1) {\n      reportError(\n        `${depKey} is present in both devDependencies and dependencies, please place it only in dependencies`,\n      );\n    } else {\n      const versions = versionsIn.map((type) => pkg[type]![depKey]);\n\n      versions.forEach((version, index) => {\n        if (version.startsWith('file:') || range.startsWith('file:')) return;\n        // https://yarnpkg.com/features/workspaces#workspace-ranges-workspace\n        if (\n          version.startsWith('workspace:') ||\n          range.startsWith('workspace:')\n        ) {\n          return;\n        }\n\n        if (\n          semver.satisfies(version, range, {\n            includePrerelease: true,\n          }) ||\n          semver.intersects(version, range, {\n            includePrerelease: true,\n          })\n        ) {\n          return;\n        }\n\n        // Ignore reporting duplicate when there's a resolution for it\n        if (pkg.resolutions?.[depKey]) {\n          return;\n        }\n\n        const versionInType = versionsIn[index];\n        const shouldOnlyWarn = shouldOnlyWarnFor(depKey, onlyWarnsFor);\n        if (shouldOnlyWarn) warnedFor.add(depKey);\n\n        reportError(\n          `Invalid duplicate dependency \"${depKey}\"`,\n          `\"${versions[0]}\" (in ${versionInType}) should satisfies \"${range}\" from \"${depPkg.name}\" ${depType}.`,\n          shouldOnlyWarn,\n        );\n      });\n    }\n  }\n\n  if (!warnedForInternal) {\n    checkWarnedFor(reportError, warnedFor, onlyWarnsFor);\n  }\n}\n","import semver from 'semver';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport { shouldOnlyWarnFor } from '../utils/shouldOnlyWarnFor';\n\nexport function checkPeerDependencies(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  allowedPeerIn: DependencyTypes[],\n  depPkg: PackageJson,\n  onlyWarnsFor: string[] = [],\n): void {\n  const { peerDependencies, peerDependenciesMeta } = depPkg;\n  if (!peerDependencies) return;\n  const reportError = createReportError('Peer Dependencies', pkgPathName);\n\n  const allowedPeerInExisting = allowedPeerIn.filter(\n    (allowedPeerInType) => pkg[allowedPeerInType],\n  );\n\n  for (const [peerDepKey, range] of Object.entries(peerDependencies)) {\n    const versionsIn = allowedPeerInExisting.filter(\n      (allowedPeerInExistingType) =>\n        pkg[allowedPeerInExistingType]![peerDepKey],\n    );\n    if (versionsIn.length === 0) {\n      const peerDependenciesMetaPeerDep = peerDependenciesMeta?.[peerDepKey];\n      if (peerDependenciesMetaPeerDep?.optional) {\n        return;\n      }\n      reportError(\n        `Missing \"${peerDepKey}\" peer dependency from \"${depPkg.name}\" in ${type}`,\n        `it should satisfies \"${range}\" and be in ${allowedPeerIn.join(\n          ' or ',\n        )}`,\n        shouldOnlyWarnFor(peerDepKey, onlyWarnsFor),\n      );\n    } else {\n      const versions = versionsIn.map(\n        (versionsInType) => pkg[versionsInType]![peerDepKey],\n      );\n\n      versions.forEach((version, index) => {\n        if (version.startsWith('npm:')) {\n          return;\n        }\n\n        const minVersionOfVersion = semver.minVersion(version);\n        if (\n          !minVersionOfVersion ||\n          !semver.satisfies(minVersionOfVersion, range, {\n            includePrerelease: true,\n          })\n        ) {\n          reportError(\n            `Invalid \"${peerDepKey}\" peer dependency`,\n            `\"${version}\" (in ${allowedPeerInExisting[index]}) should satisfies \"${range}\" from \"${depPkg.name}\" ${type}`,\n            shouldOnlyWarnFor(peerDepKey, onlyWarnsFor),\n          );\n        }\n      });\n    }\n  }\n}\n","import type {\n  DependencyTypes,\n  PackageJson,\n  RegularDependencyTypes,\n} from '../utils/packageTypes';\nimport { checkPeerDependencies } from './checkPeerDependencies';\n\nconst getAllowedPeerInFromType = (\n  depPkgType: RegularDependencyTypes,\n  isLibrary: boolean,\n): DependencyTypes[] => {\n  switch (depPkgType) {\n    case 'devDependencies':\n      return ['devDependencies', 'dependencies'];\n    case 'dependencies':\n    case 'optionalDependencies':\n      return isLibrary\n        ? ['dependencies', 'peerDependencies']\n        : ['dependencies'];\n  }\n};\n\nexport function checkDirectPeerDependencies(\n  isLibrary: boolean,\n  pkg: PackageJson,\n  pkgPathName: string,\n  depPkgType: RegularDependencyTypes,\n  depPkg: PackageJson,\n  onlyWarnsFor: string[] = [],\n): void {\n  if (depPkg.peerDependencies) {\n    checkPeerDependencies(\n      pkg,\n      pkgPathName,\n      depPkgType,\n      getAllowedPeerInFromType(depPkgType, isLibrary),\n      depPkg,\n      onlyWarnsFor,\n    );\n  }\n}\n","/* eslint-disable complexity */\nimport semver from 'semver';\nimport type { OnlyWarnsFor } from 'utils/shouldOnlyWarnFor';\nimport type { GetDependencyPackageJson } from '../utils/createGetDependencyPackageJson';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport { shouldOnlyWarnFor } from '../utils/shouldOnlyWarnFor';\n\nexport interface CheckExactVersionsOptions {\n  getDependencyPackageJson?: GetDependencyPackageJson;\n  onlyWarnsFor?: OnlyWarnsFor;\n  tryToAutoFix?: boolean;\n}\n\nconst isVersionRange = (version: string): boolean =>\n  version.startsWith('^') || version.startsWith('~');\n\nexport function checkExactVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  {\n    getDependencyPackageJson,\n    onlyWarnsFor = [],\n    tryToAutoFix = false,\n  }: CheckExactVersionsOptions = {},\n): void {\n  const pkgDependencies = pkg[type];\n  if (!pkgDependencies) return;\n\n  const reportError = createReportError('Exact versions', pkgPathName);\n\n  for (const [dependencyName, versionConst] of Object.entries(\n    pkgDependencies,\n  )) {\n    let version = versionConst;\n    if (version.startsWith('npm:')) {\n      const match = /^npm:.*@(.*)$/.exec(version);\n      if (!match) throw new Error(`Invalid version match: ${version}`);\n      const [, realVersion] = match;\n      version = realVersion;\n    }\n\n    if (isVersionRange(version)) {\n      const shouldOnlyWarn = shouldOnlyWarnFor(dependencyName, onlyWarnsFor);\n      if (!shouldOnlyWarn && tryToAutoFix && getDependencyPackageJson) {\n        let resolvedDep;\n        try {\n          resolvedDep = getDependencyPackageJson(dependencyName);\n        } catch {\n          resolvedDep = null;\n        }\n        if (!resolvedDep || !resolvedDep.version) {\n          reportError(\n            `Unexpected range dependency in \"${type}\" for \"${dependencyName}\"`,\n            `expecting \"${version}\" to be exact, autofix failed to resolve \"${dependencyName}\".`,\n            shouldOnlyWarn,\n          );\n        } else if (\n          !semver.satisfies(resolvedDep.version, version, {\n            includePrerelease: true,\n          })\n        ) {\n          reportError(\n            `Unexpected range dependency in \"${type}\" for \"${dependencyName}\"`,\n            `expecting \"${version}\" to be exact, autofix failed as \"${dependencyName}\"'s resolved version is \"${resolvedDep.version}\" and doesn't satisfies \"${version}\".`,\n            shouldOnlyWarn,\n          );\n        } else {\n          pkgDependencies[dependencyName] = resolvedDep.version;\n        }\n      } else {\n        reportError(\n          `Unexpected range dependency in \"${type}\" for \"${dependencyName}\"`,\n          `expecting \"${version}\" to be exact \"${version.slice(1)}\".`,\n          shouldOnlyWarn,\n        );\n      }\n    }\n  }\n}\n","export const getKeys = <T>(o: T): (keyof T)[] => Object.keys(o) as (keyof T)[];\n","import { createReportError } from '../utils/createReportError';\nimport { getKeys } from '../utils/object';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\nimport { shouldOnlyWarnFor } from '../utils/shouldOnlyWarnFor';\n\nexport function checkIdenticalVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  deps: Record<string, string[] | Partial<Record<DependencyTypes, string[]>>>,\n  onlyWarnsFor: string[] = [],\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError('Identical Versions', pkgPathName);\n\n  getKeys(deps).forEach((depKey) => {\n    const version = pkgDependencies[depKey];\n    if (!version) {\n      reportError(`Unexpected missing ${type} for \"${depKey}\".`);\n      return;\n    }\n\n    const depConfigArrayOrObject = deps[depKey];\n    const depConfig = Array.isArray(depConfigArrayOrObject)\n      ? { [type]: depConfigArrayOrObject }\n      : depConfigArrayOrObject;\n\n    getKeys(depConfig).forEach((depKeyType) => {\n      const pkgDependenciesType = pkg[depKeyType] || {};\n      depConfig[depKeyType]?.forEach((depKeyIdentical) => {\n        const value = pkgDependenciesType[depKeyIdentical];\n        if (!value) {\n          reportError(\n            `Missing \"${depKeyIdentical}\" in ${depKeyType}`,\n            `it should be \"${version}\".`,\n            shouldOnlyWarnFor(depKey, onlyWarnsFor),\n          );\n        }\n\n        if (value !== version) {\n          reportError(\n            `Invalid \"${depKeyIdentical}\" in ${depKeyType}`,\n            `expecting \"${value}\" be \"${version}\".`,\n            shouldOnlyWarnFor(depKey, onlyWarnsFor),\n          );\n        }\n      });\n    });\n  });\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport { shouldOnlyWarnFor } from '../utils/shouldOnlyWarnFor';\n\nexport function checkIdenticalVersionsThanDependency(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  depKeys: string[],\n  depPkg: PackageJson,\n  dependencies: PackageJson[DependencyTypes] = {},\n  onlyWarnsFor: string[] = [],\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError(\n    `Same Versions than ${depPkg.name}`,\n    pkgPathName,\n  );\n\n  depKeys.forEach((depKey) => {\n    const version = dependencies[depKey];\n    if (!version) {\n      reportError(\n        `Unexpected missing dependency \"${depKey}\" in \"${depPkg.name}\".`,\n      );\n      return;\n    }\n\n    if (version.startsWith('^') || version.startsWith('~')) {\n      reportError(\n        `Unexpected range dependency in \"${depPkg.name}\" for \"${depKey}\"`,\n        'perhaps use checkSatisfiesVersionsFromDependency() instead.',\n      );\n      return;\n    }\n\n    const value = pkgDependencies[depKey];\n\n    if (!value) {\n      reportError(\n        `Missing \"${depKey}\" in ${type}`,\n        `expecting to be \"${version}\".`,\n        shouldOnlyWarnFor(depKey, onlyWarnsFor),\n      );\n    }\n\n    if (value !== version) {\n      reportError(\n        `Invalid \"${depKey}\" in ${type}`,\n        `expecting \"${value}\" to be \"${version}\".`,\n        shouldOnlyWarnFor(depKey, onlyWarnsFor),\n      );\n    }\n  });\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport function checkNoDependencies(\n  pkg: PackageJson,\n  pkgPath: string,\n  type: DependencyTypes = 'dependencies',\n  moveToSuggestion: DependencyTypes = 'devDependencies',\n): void {\n  const pkgDependencies = pkg[type];\n  if (!pkgDependencies) return;\n\n  const reportError = createReportError('No dependencies', pkgPath);\n  reportError(\n    `Unexpected ${type}`,\n    `you should move them in ${moveToSuggestion}`,\n  );\n}\n","import type { GetDependencyPackageJson } from '../utils/createGetDependencyPackageJson';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson } from '../utils/packageTypes';\n\nexport type CheckResolutionMessage = (\n  depKey: string,\n  resolutionExplainedMessage: string,\n  checkMessageHelpers: {\n    getDependencyPackageJson: GetDependencyPackageJson;\n  },\n) => string | undefined;\n\nexport function checkResolutionsHasExplanation(\n  pkg: PackageJson,\n  pkgPathName: string,\n  checkMessage: CheckResolutionMessage,\n  getDependencyPackageJson: GetDependencyPackageJson,\n): void {\n  const pkgResolutions = pkg.resolutions || {};\n  const pkgResolutionsExplained = pkg.resolutionsExplained || {};\n  const reportError = createReportError(\n    'Resolutions has explanation',\n    pkgPathName,\n  );\n\n  Object.keys(pkgResolutions).forEach((depKey) => {\n    if (!pkgResolutionsExplained[depKey]) {\n      reportError(`Missing \"${depKey}\" in resolutionsExplained.`);\n    }\n  });\n\n  Object.keys(pkgResolutionsExplained).forEach((depKey) => {\n    if (!pkgResolutions[depKey]) {\n      reportError(\n        `Found \"${depKey}\" in resolutionsExplained but not in resolutions.`,\n      );\n    } else {\n      const error = checkMessage(depKey, pkgResolutionsExplained[depKey], {\n        getDependencyPackageJson,\n      });\n      if (error) {\n        reportError(\n          `Invalid message for \"${depKey}\" in resolutionsExplained`,\n          `${error}.`,\n        );\n      }\n    }\n  });\n}\n","import semver from 'semver';\nimport { createReportError } from '../utils/createReportError';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\nimport { shouldOnlyWarnFor } from '../utils/shouldOnlyWarnFor';\n\nexport function checkSatisfiesVersionsFromDependency(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  depKeys: string[],\n  depPkg: PackageJson,\n  dependencies: PackageJson[DependencyTypes] = {},\n  onlyWarnsFor: string[] = [],\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError(\n    `Satisfies Versions from ${depPkg.name}`,\n    pkgPathName,\n  );\n\n  depKeys.forEach((depKey) => {\n    const range = dependencies[depKey];\n    if (!range) {\n      reportError(\n        `Unexpected missing dependency \"${depKey}\" in \"${depPkg.name}\".`,\n      );\n      return;\n    }\n\n    const version = pkgDependencies[depKey];\n\n    if (!version) {\n      reportError(\n        `Missing \"${depKey}\" in ${type}`,\n        `should satisfies \"${range}\" from \"${depPkg.name}\" ${depKey}.`,\n        shouldOnlyWarnFor(depKey, onlyWarnsFor),\n      );\n    } else {\n      const minVersionOfVersion = semver.minVersion(version);\n      if (\n        !minVersionOfVersion ||\n        !semver.satisfies(minVersionOfVersion, range, {\n          includePrerelease: true,\n        })\n      ) {\n        reportError(\n          `Invalid \"${depKey}\" in ${type}`,\n          `\"${version}\" (in \"${depKey}\") should satisfies \"${range}\" from \"${depPkg.name}\" ${depKey}.`,\n          shouldOnlyWarnFor(depKey, onlyWarnsFor),\n        );\n      }\n    }\n  });\n}\n","import { readFileSync, writeFileSync } from 'fs';\nimport type { PackageJson } from './packageTypes';\n\nexport type GetDependencyPackageJson = (pkgDepName: string) => PackageJson;\n\nexport function readPkgJson(packagePath: string): PackageJson {\n  return JSON.parse(readFileSync(packagePath, 'utf-8')) as PackageJson;\n}\n\nexport function writePkgJson(packagePath: string, pkg: PackageJson): void {\n  writeFileSync(packagePath, JSON.stringify(pkg, null, 2));\n}\n\ntype NodeModulesPackagePathCache = Map<string, PackageJson>;\n\ninterface CreateGetDependencyPackageJsonOptions {\n  pkgDirname: string;\n  nodeModulesPackagePathCache?: NodeModulesPackagePathCache;\n}\n\nexport function createGetDependencyPackageJson({\n  pkgDirname,\n  nodeModulesPackagePathCache = new Map<string, PackageJson>(),\n}: CreateGetDependencyPackageJsonOptions): GetDependencyPackageJson {\n  return (pkgDepName) => {\n    const existing = nodeModulesPackagePathCache.get(pkgDepName);\n    if (existing) return existing;\n    let pkg: PackageJson;\n    if (pkgDepName.startsWith('.')) {\n      const packagePath = `${pkgDirname}/${pkgDepName}/package.json`;\n      pkg = readPkgJson(packagePath);\n    } else {\n      try {\n        // eslint-disable-next-line import/no-dynamic-require, @typescript-eslint/no-unsafe-assignment\n        pkg = require(require.resolve(`${pkgDepName}/package.json`, {\n          paths: [pkgDirname],\n        }));\n      } catch (err: unknown) {\n        if (!(err instanceof Error)) throw err;\n\n        if (\n          (err as NodeJS.ErrnoException).code !==\n          'ERR_PACKAGE_PATH_NOT_EXPORTED'\n        ) {\n          throw err;\n        }\n\n        const match = / in (.*\\/package.json)($|\\simported from)/.exec(\n          err.message,\n        );\n\n        if (match) {\n          const [, matchPackageJson] = match;\n          pkg = readPkgJson(matchPackageJson);\n        } else {\n          throw err;\n        }\n      }\n    }\n    nodeModulesPackagePathCache.set(pkgDepName, pkg);\n    return pkg;\n  };\n}\n","/* eslint-disable max-lines */\nimport path from 'path';\nimport util from 'util';\nimport type { OnlyWarnsFor } from 'utils/shouldOnlyWarnFor';\nimport {\n  checkDirectDuplicateDependencies,\n  checkWarnedFor,\n} from './checks/checkDirectDuplicateDependencies';\nimport { checkDirectPeerDependencies } from './checks/checkDirectPeerDependencies';\nimport { checkExactVersions } from './checks/checkExactVersions';\nimport { checkIdenticalVersions } from './checks/checkIdenticalVersions';\nimport { checkIdenticalVersionsThanDependency } from './checks/checkIdenticalVersionsThanDependency';\nimport { checkNoDependencies } from './checks/checkNoDependencies';\nimport type { CheckResolutionMessage } from './checks/checkResolutionsHasExplanation';\nimport { checkResolutionsHasExplanation } from './checks/checkResolutionsHasExplanation';\nimport { checkSatisfiesVersionsFromDependency } from './checks/checkSatisfiesVersionsFromDependency';\nimport type { GetDependencyPackageJson } from './utils/createGetDependencyPackageJson';\nimport {\n  createGetDependencyPackageJson,\n  readPkgJson,\n  writePkgJson,\n} from './utils/createGetDependencyPackageJson';\nimport { createReportError } from './utils/createReportError';\nimport { getKeys } from './utils/object';\nimport type {\n  RegularDependencyTypes,\n  DependencyTypes,\n  PackageJson,\n} from './utils/packageTypes';\n\nconst regularDependencyTypes: RegularDependencyTypes[] = [\n  'devDependencies',\n  'dependencies',\n  'optionalDependencies',\n];\n\nexport interface CreateCheckPackageOptions {\n  tryToAutoFix?: boolean;\n}\n\nexport interface CheckDirectPeerDependenciesOptions {\n  isLibrary?: boolean;\n  onlyWarnsFor?: OnlyWarnsFor;\n}\n\nexport interface CheckDirectDuplicateDependenciesOptions {\n  onlyWarnsFor?: OnlyWarnsFor;\n  /** @internal */\n  internalWarnedForDuplicate?: Set<string>;\n}\n\nexport interface CheckRecommendedOptions {\n  isLibrary?: boolean;\n  /** default is true for libraries, false otherwise */\n  allowRangeVersionsInDependencies?: boolean;\n  peerDependenciesOnlyWarnsFor?: OnlyWarnsFor;\n  directDuplicateDependenciesOnlyWarnsFor?: OnlyWarnsFor;\n  exactVersionsOnlyWarnsFor?: OnlyWarnsFor;\n  checkResolutionMessage?: CheckResolutionMessage;\n  /** @internal */\n  internalWarnedForDuplicate?: Set<string>;\n}\n\nexport interface CheckExactVersionsOptions {\n  allowRangeVersionsInDependencies?: boolean;\n  onlyWarnsFor?: OnlyWarnsFor;\n}\n\nexport interface CheckPackageApi {\n  /** @internal */\n  pkg: PackageJson;\n  /** @internal */\n  pkgDirname: string;\n  /** @internal */\n  pkgPathName: string;\n  /** @internal */\n  getDependencyPackageJson: GetDependencyPackageJson;\n\n  checkExactVersions: (options?: CheckExactVersionsOptions) => CheckPackageApi;\n  checkExactVersionsForLibrary: (\n    options?: CheckExactVersionsOptions,\n  ) => CheckPackageApi;\n  checkExactDevVersions: (\n    options?: CheckExactVersionsOptions,\n  ) => CheckPackageApi;\n  checkNoDependencies: (\n    type?: DependencyTypes,\n    moveToSuggestion?: DependencyTypes,\n  ) => CheckPackageApi;\n  checkDirectPeerDependencies: (\n    options?: CheckDirectPeerDependenciesOptions,\n  ) => CheckPackageApi;\n  checkDirectDuplicateDependencies: (\n    options?: CheckDirectDuplicateDependenciesOptions,\n  ) => CheckPackageApi;\n  checkResolutionsHasExplanation: (\n    checkMessage?: CheckResolutionMessage,\n  ) => CheckPackageApi;\n  checkRecommended: (options?: CheckRecommendedOptions) => CheckPackageApi;\n  checkIdenticalVersionsThanDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkIdenticalVersionsThanDevDependencyOfDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkSatisfiesVersionsFromDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkSatisfiesVersionsInDevDependenciesOfDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkIdenticalVersions: (dependencies: {\n    resolutions?: Record<string, string[]>;\n    dependencies?: Record<string, string[]>;\n    devDependencies?: Record<string, string[]>;\n  }) => CheckPackageApi;\n  checkSatisfiesVersionsBetweenDependencies: (\n    depName1: string,\n    depName2: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n}\n\nexport function createCheckPackage(\n  pkgDirectoryPath = '.',\n  { tryToAutoFix = false }: CreateCheckPackageOptions = {},\n): CheckPackageApi {\n  const pkgDirname = path.resolve(pkgDirectoryPath);\n  const pkgPath = `${pkgDirname}/package.json`;\n  const pkgPathName = `${pkgDirectoryPath}/package.json`;\n  const pkg = readPkgJson(pkgPath);\n  const copyPkg: PackageJson = JSON.parse(JSON.stringify(pkg)) as PackageJson;\n\n  if (\n    process.env.CI &&\n    process.env.CHECK_PACKAGE_DEPENDENCIES_ENABLE_CI_AUTOFIX !== 'true'\n  ) {\n    tryToAutoFix = false;\n  }\n\n  const writePackageIfChanged = (): void => {\n    if (!tryToAutoFix) return;\n    if (util.isDeepStrictEqual(pkg, copyPkg)) return;\n    writePkgJson(pkgPath, pkg);\n  };\n\n  const getDependencyPackageJson = createGetDependencyPackageJson({\n    pkgDirname,\n  });\n\n  return {\n    pkg,\n    pkgDirname,\n    pkgPathName,\n    getDependencyPackageJson,\n    checkExactVersions({\n      onlyWarnsFor,\n      allowRangeVersionsInDependencies = true,\n    } = {}) {\n      if (!allowRangeVersionsInDependencies) {\n        checkExactVersions(pkg, pkgPathName, 'dependencies', {\n          onlyWarnsFor,\n          tryToAutoFix,\n          getDependencyPackageJson,\n        });\n      }\n      checkExactVersions(pkg, pkgPathName, 'devDependencies', {\n        onlyWarnsFor,\n        tryToAutoFix,\n        getDependencyPackageJson,\n      });\n      checkExactVersions(pkg, pkgPathName, 'resolutions', {\n        onlyWarnsFor,\n        tryToAutoFix,\n        getDependencyPackageJson,\n      });\n      writePackageIfChanged();\n      return this;\n    },\n    /** @deprecated use checkExactVersions({ allowRangeVersionsInDependencies: true })  */\n    checkExactVersionsForLibrary({ onlyWarnsFor } = {}) {\n      checkExactVersions(pkg, pkgPathName, 'devDependencies', {\n        onlyWarnsFor,\n        tryToAutoFix,\n        getDependencyPackageJson,\n      });\n      checkExactVersions(pkg, pkgPathName, 'resolutions', {\n        onlyWarnsFor,\n        tryToAutoFix,\n        getDependencyPackageJson,\n      });\n      writePackageIfChanged();\n      return this;\n    },\n\n    checkExactDevVersions({ onlyWarnsFor } = {}) {\n      checkExactVersions(pkg, pkgPathName, 'devDependencies', {\n        onlyWarnsFor,\n        tryToAutoFix,\n        getDependencyPackageJson,\n      });\n      writePackageIfChanged();\n      return this;\n    },\n\n    checkNoDependencies(\n      type = 'dependencies',\n      moveToSuggestion = 'devDependencies',\n    ) {\n      checkNoDependencies(pkg, pkgPathName, type, moveToSuggestion);\n      return this;\n    },\n\n    checkDirectPeerDependencies({ isLibrary = false, onlyWarnsFor } = {}) {\n      regularDependencyTypes.forEach((depType) => {\n        if (!pkg[depType]) return;\n        getKeys(pkg[depType]).forEach((depName) => {\n          const depPkg = getDependencyPackageJson(depName);\n          if (depPkg.peerDependencies) {\n            checkDirectPeerDependencies(\n              isLibrary,\n              pkg,\n              pkgPathName,\n              depType,\n              depPkg,\n              onlyWarnsFor,\n            );\n          }\n        });\n      });\n      return this;\n    },\n\n    checkDirectDuplicateDependencies({\n      onlyWarnsFor,\n      internalWarnedForDuplicate,\n    } = {}) {\n      const warnedForInternal = internalWarnedForDuplicate || new Set();\n      const checks: {\n        type: DependencyTypes;\n        searchIn: DependencyTypes[];\n      }[] = [\n        {\n          type: 'devDependencies',\n          searchIn: ['devDependencies', 'dependencies'],\n        },\n        { type: 'dependencies', searchIn: ['devDependencies', 'dependencies'] },\n      ];\n      checks.forEach(({ type, searchIn }) => {\n        if (!pkg[type]) return;\n        getKeys(pkg[type]).forEach((depName) => {\n          const depPkg = getDependencyPackageJson(depName);\n          checkDirectDuplicateDependencies(\n            pkg,\n            pkgPathName,\n            'dependencies',\n            searchIn,\n            depPkg,\n            onlyWarnsFor,\n            warnedForInternal,\n          );\n        });\n      });\n\n      if (!warnedForInternal) {\n        const reportError = createReportError(\n          'Direct Duplicate Dependencies',\n          pkgPathName,\n        );\n        checkWarnedFor(reportError, warnedForInternal, onlyWarnsFor);\n      }\n      return this;\n    },\n\n    checkResolutionsHasExplanation(\n      checkMessage: CheckResolutionMessage = (depKey, message) => undefined,\n    ) {\n      checkResolutionsHasExplanation(\n        pkg,\n        pkgPathName,\n        checkMessage,\n        getDependencyPackageJson,\n      );\n      return this;\n    },\n\n    checkRecommended({\n      isLibrary = false,\n      allowRangeVersionsInDependencies = isLibrary,\n      peerDependenciesOnlyWarnsFor,\n      directDuplicateDependenciesOnlyWarnsFor,\n      exactVersionsOnlyWarnsFor,\n      checkResolutionMessage,\n      internalWarnedForDuplicate,\n    } = {}) {\n      this.checkExactVersions({\n        allowRangeVersionsInDependencies,\n        onlyWarnsFor: exactVersionsOnlyWarnsFor,\n      });\n\n      this.checkDirectPeerDependencies({\n        isLibrary,\n        onlyWarnsFor: peerDependenciesOnlyWarnsFor,\n      });\n\n      this.checkDirectDuplicateDependencies({\n        onlyWarnsFor: directDuplicateDependenciesOnlyWarnsFor,\n        internalWarnedForDuplicate,\n      });\n\n      this.checkResolutionsHasExplanation(checkResolutionMessage);\n      return this;\n    },\n\n    checkIdenticalVersionsThanDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (dependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      return this;\n    },\n\n    checkIdenticalVersionsThanDevDependencyOfDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (dependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (devDependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsFromDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsInDevDependenciesOfDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkIdenticalVersions({ resolutions, dependencies, devDependencies }) {\n      if (resolutions) {\n        checkIdenticalVersions(pkg, pkgPathName, 'resolutions', resolutions);\n      }\n      if (dependencies) {\n        checkIdenticalVersions(pkg, pkgPathName, 'dependencies', dependencies);\n      }\n      if (devDependencies) {\n        checkIdenticalVersions(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsBetweenDependencies(\n      depName1,\n      depName2,\n      { dependencies, devDependencies },\n    ) {\n      const depPkg1 = getDependencyPackageJson(depName1);\n      const depPkg2 = getDependencyPackageJson(depName2);\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          depPkg2,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg1,\n          depPkg1.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          depPkg2,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg1,\n          depPkg1.dependencies,\n        );\n      }\n      return this;\n    },\n  };\n}\n","import fs from 'fs';\nimport path from 'path';\nimport glob from 'glob';\nimport type { OnlyWarnsFor } from 'utils/shouldOnlyWarnFor';\nimport type {\n  CheckPackageApi,\n  CreateCheckPackageOptions,\n} from './check-package';\nimport { createCheckPackage } from './check-package';\nimport {\n  checkDirectDuplicateDependencies,\n  checkWarnedFor,\n} from './checks/checkDirectDuplicateDependencies';\nimport type { CheckResolutionMessage } from './checks/checkResolutionsHasExplanation';\nimport { createReportError } from './utils/createReportError';\n\nexport interface CheckPackageWithWorkspacesRecommendedOptions {\n  isLibrary?: (pkgName: string) => boolean;\n  allowRangeVersionsInLibraries?: boolean;\n  peerDependenciesOnlyWarnsFor?: OnlyWarnsFor;\n  directDuplicateDependenciesOnlyWarnsFor?: OnlyWarnsFor;\n  monorepoDirectDuplicateDependenciesOnlyWarnsFor?: OnlyWarnsFor;\n  checkResolutionMessage?: CheckResolutionMessage;\n}\n\nexport interface CheckPackageWithWorkspacesApi {\n  checkRecommended: (\n    options?: CheckPackageWithWorkspacesRecommendedOptions,\n  ) => CheckPackageWithWorkspacesApi;\n\n  forRoot: (\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n  forEach: (\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n  for: (\n    id: string,\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n}\n\nexport function createCheckPackageWithWorkspaces(\n  pkgDirectoryPath = '.',\n  createCheckPackageOptions: CreateCheckPackageOptions = {},\n): CheckPackageWithWorkspacesApi {\n  const checkPackage = createCheckPackage(\n    pkgDirectoryPath,\n    createCheckPackageOptions,\n  );\n  const { pkg, pkgDirname, pkgPathName } = checkPackage;\n\n  const pkgWorkspaces: string[] | undefined =\n    pkg.workspaces && !Array.isArray(pkg.workspaces)\n      ? pkg.workspaces.packages\n      : pkg.workspaces;\n\n  if (!pkgWorkspaces) {\n    throw new Error('Package is missing \"workspaces\"');\n  }\n\n  const workspacePackagesPaths: string[] = [];\n\n  if (pkgWorkspaces) {\n    pkgWorkspaces.forEach((pattern) => {\n      const match = glob.sync(`${pkgDirname}/${pattern}`);\n      match.forEach((pathMatch) => {\n        const stat = fs.statSync(pathMatch);\n        if (!stat.isDirectory()) return;\n        const subPkgDirectoryPath = path.relative(process.cwd(), pathMatch);\n        workspacePackagesPaths.push(subPkgDirectoryPath);\n      });\n    });\n  }\n\n  const checksWorkspaces = new Map<string, CheckPackageApi>(\n    workspacePackagesPaths.map((subPkgDirectoryPath) => {\n      const checkPkg = createCheckPackage(\n        subPkgDirectoryPath,\n        createCheckPackageOptions,\n      );\n      return [checkPkg.pkg.name, checkPkg];\n    }),\n  );\n\n  return {\n    checkRecommended({\n      isLibrary = () => false,\n      allowRangeVersionsInLibraries = true,\n      peerDependenciesOnlyWarnsFor,\n      directDuplicateDependenciesOnlyWarnsFor,\n      monorepoDirectDuplicateDependenciesOnlyWarnsFor,\n      checkResolutionMessage,\n    } = {}) {\n      const monorepoWarnedForDuplicate = new Set<string>();\n      const warnedForDuplicate = new Set<string>();\n      checkPackage.checkNoDependencies();\n      checkPackage.checkRecommended({\n        isLibrary: false,\n        peerDependenciesOnlyWarnsFor,\n        directDuplicateDependenciesOnlyWarnsFor,\n        checkResolutionMessage,\n        internalWarnedForDuplicate: warnedForDuplicate,\n      });\n\n      checksWorkspaces.forEach((checkSubPackage, id) => {\n        const isPackageALibrary = isLibrary(id);\n        checkSubPackage.checkRecommended({\n          isLibrary: isPackageALibrary,\n          allowRangeVersionsInDependencies: isPackageALibrary\n            ? allowRangeVersionsInLibraries\n            : false,\n          peerDependenciesOnlyWarnsFor,\n          directDuplicateDependenciesOnlyWarnsFor,\n          exactVersionsOnlyWarnsFor: [...checksWorkspaces.keys()],\n          checkResolutionMessage,\n          internalWarnedForDuplicate: warnedForDuplicate,\n        });\n        checkDirectDuplicateDependencies(\n          checkSubPackage.pkg,\n          checkSubPackage.pkgPathName,\n          'devDependencies',\n          ['devDependencies', 'dependencies'],\n          pkg,\n          monorepoDirectDuplicateDependenciesOnlyWarnsFor,\n          monorepoWarnedForDuplicate,\n          'Monorepo ',\n        );\n      });\n\n      checkWarnedFor(\n        createReportError('Recommended Checks', pkgPathName),\n        warnedForDuplicate,\n        directDuplicateDependenciesOnlyWarnsFor,\n      );\n\n      return this;\n    },\n\n    forRoot(callback) {\n      callback(checkPackage);\n      return this;\n    },\n\n    forEach(callback) {\n      checksWorkspaces.forEach((checkSubPackage) => {\n        callback(checkSubPackage);\n      });\n      return this;\n    },\n\n    for(id, callback) {\n      const packageCheck = checksWorkspaces.get(id);\n      if (!packageCheck) {\n        throw new Error(\n          `Invalid package name: ${id}. Known package names: \"${[\n            ...checksWorkspaces.keys(),\n          ].join('\",\"')}\"`,\n        );\n      }\n      callback(packageCheck);\n      return this;\n    },\n  };\n}\n"],"names":["titleDisplayed","pkgPathDisplayed","logMessage","msgTitle","msgInfo","onlyWarns","console","error","chalk","yellow","red","createReportError","title","pkgPathName","reportError","cyan","process","exitCode","shouldOnlyWarnFor","dependencyName","onlyWarnsFor","includes","checkWarnedFor","warnedFor","forEach","depName","has","checkDirectDuplicateDependencies","pkg","depType","searchIn","depPkg","warnedForInternal","reportErrorNamePrefix","dependencies","Set","searchInExisting","filter","type","depKey","range","Object","entries","versionsIn","length","versions","map","version","index","startsWith","semver","satisfies","includePrerelease","intersects","resolutions","versionInType","shouldOnlyWarn","add","name","checkPeerDependencies","allowedPeerIn","peerDependencies","peerDependenciesMeta","allowedPeerInExisting","allowedPeerInType","peerDepKey","allowedPeerInExistingType","peerDependenciesMetaPeerDep","optional","join","versionsInType","minVersionOfVersion","minVersion","getAllowedPeerInFromType","depPkgType","isLibrary","checkDirectPeerDependencies","isVersionRange","checkExactVersions","getDependencyPackageJson","tryToAutoFix","pkgDependencies","versionConst","match","exec","Error","realVersion","resolvedDep","slice","getKeys","o","keys","checkIdenticalVersions","deps","depConfigArrayOrObject","depConfig","Array","isArray","depKeyType","pkgDependenciesType","depKeyIdentical","value","checkIdenticalVersionsThanDependency","depKeys","checkNoDependencies","pkgPath","moveToSuggestion","checkResolutionsHasExplanation","checkMessage","pkgResolutions","pkgResolutionsExplained","resolutionsExplained","checkSatisfiesVersionsFromDependency","readPkgJson","packagePath","JSON","parse","readFileSync","writePkgJson","writeFileSync","stringify","createGetDependencyPackageJson","pkgDirname","nodeModulesPackagePathCache","Map","pkgDepName","existing","get","require","resolve","paths","err","code","message","matchPackageJson","set","regularDependencyTypes","createCheckPackage","pkgDirectoryPath","path","copyPkg","env","CI","CHECK_PACKAGE_DEPENDENCIES_ENABLE_CI_AUTOFIX","writePackageIfChanged","util","isDeepStrictEqual","allowRangeVersionsInDependencies","checkExactVersionsForLibrary","checkExactDevVersions","internalWarnedForDuplicate","undefined","checkRecommended","peerDependenciesOnlyWarnsFor","directDuplicateDependenciesOnlyWarnsFor","exactVersionsOnlyWarnsFor","checkResolutionMessage","devDependencies","checkIdenticalVersionsThanDevDependencyOfDependency","checkSatisfiesVersionsInDevDependenciesOfDependency","checkSatisfiesVersionsBetweenDependencies","depName1","depName2","depPkg1","depPkg2","createCheckPackageWithWorkspaces","createCheckPackageOptions","checkPackage","pkgWorkspaces","workspaces","packages","workspacePackagesPaths","pattern","glob","sync","pathMatch","stat","fs","statSync","isDirectory","subPkgDirectoryPath","relative","cwd","push","checksWorkspaces","checkPkg","allowRangeVersionsInLibraries","monorepoDirectDuplicateDependenciesOnlyWarnsFor","monorepoWarnedForDuplicate","warnedForDuplicate","checkSubPackage","id","isPackageALibrary","forRoot","callback","for","packageCheck"],"mappings":"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"}