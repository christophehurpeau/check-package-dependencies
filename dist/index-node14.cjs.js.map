{"version":3,"file":"index-node14.cjs.js","sources":["../src/utils/object.ts","../src/utils/createReportError.ts","../src/checks/checkDuplicateDependencies.ts","../src/checks/checkDirectDuplicateDependencies.ts","../src/checks/checkPeerDependencies.ts","../src/checks/checkDirectPeerDependencies.ts","../src/checks/checkExactVersions.ts","../src/checks/checkIdenticalVersions.ts","../src/checks/checkIdenticalVersionsThanDependency.ts","../src/checks/checkNoDependencies.ts","../src/checks/checkResolutionsHasExplanation.ts","../src/checks/checkSatisfiesVersionsFromDependency.ts","../src/utils/createGetDependencyPackageJson.ts","../src/utils/warnForUtils.ts","../src/check-package.ts","../src/check-package-with-workspaces.ts"],"sourcesContent":["export const getKeys = <T>(o: T): (keyof T)[] => Object.keys(o) as (keyof T)[];\n\nexport const getEntries = <T>(o: T): [keyof T, T[keyof T]][] =>\n  Object.entries(o) as unknown as [keyof T, T[keyof T]][];\n","/* eslint-disable no-console */\n\nimport chalk from 'chalk';\nimport { getEntries } from './object';\nimport type {\n  OnlyWarnsForCheck,\n  OnlyWarnsForMappingCheck,\n} from './warnForUtils';\n\nexport type ReportError = (\n  msgTitle: string,\n  msgInfo?: string,\n  onlyWarns?: boolean,\n) => void;\n\nlet titleDisplayed: string | null = null;\nlet pkgPathDisplayed: string | null = null;\n\nexport function logMessage(\n  msgTitle: string,\n  msgInfo?: string,\n  onlyWarns?: boolean,\n): void {\n  console.error(\n    `${\n      onlyWarns ? chalk.yellow(`⚠ ${msgTitle}`) : chalk.red(`❌ ${msgTitle}`)\n    }${msgInfo ? `: ${msgInfo}` : ''}`,\n  );\n}\n\nexport function createReportError(\n  title: string,\n  pkgPathName: string,\n): ReportError {\n  return function reportError(msgTitle, msgInfo, onlyWarns): void {\n    if (titleDisplayed !== title || pkgPathName !== pkgPathDisplayed) {\n      if (titleDisplayed) console.error();\n      console.error(chalk.cyan(`== ${title} in ${pkgPathName} ==`));\n      titleDisplayed = title;\n      pkgPathDisplayed = pkgPathName;\n    }\n    logMessage(msgTitle, msgInfo, onlyWarns);\n\n    if (!onlyWarns) {\n      // console.trace();\n      process.exitCode = 1;\n    }\n  };\n}\n\nexport function reportNotWarnedFor(\n  reportError: ReportError,\n  onlyWarnsForCheck: OnlyWarnsForCheck,\n): void {\n  const notWarnedFor = onlyWarnsForCheck.getNotWarnedFor();\n  if (notWarnedFor.length > 0) {\n    reportError(\n      `Invalid config in \"${onlyWarnsForCheck.configName}\"`,\n      `no warning was raised for ${notWarnedFor\n        .map((depName) => `\"${depName}\"`)\n        .join(', ')}`,\n      false,\n    );\n  }\n}\n\nexport function reportNotWarnedForMapping(\n  reportError: ReportError,\n  onlyWarnsForMappingCheck: OnlyWarnsForMappingCheck,\n): void {\n  const notWarnedForMapping = onlyWarnsForMappingCheck.getNotWarnedFor();\n  getEntries(notWarnedForMapping).forEach(([depNameOrStar, notWarnedFor]) => {\n    reportError(\n      `Invalid config in \"${onlyWarnsForMappingCheck.configName}\" for \"${depNameOrStar}\"`,\n      `no warning was raised for ${notWarnedFor\n        .map((depName) => `\"${depName}\"`)\n        .join(', ')}`,\n    );\n  });\n}\n","import semver from 'semver';\nimport type { ReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkDuplicateDependencies(\n  reportError: ReportError,\n  pkg: PackageJson,\n  depType: DependencyTypes,\n  searchIn: DependencyTypes[],\n  depPkg: PackageJson,\n  onlyWarnsForCheck: OnlyWarnsForCheck,\n): void {\n  const dependencies = depPkg[depType];\n  if (!dependencies) return;\n\n  const searchInExisting = searchIn.filter((type) => pkg[type]);\n\n  for (const [depKey, range] of Object.entries(dependencies)) {\n    const versionsIn = searchInExisting.filter((type) => pkg[type]![depKey]);\n\n    if (versionsIn.length > 1) {\n      reportError(\n        `${depKey} is present in both devDependencies and dependencies, please place it only in dependencies`,\n      );\n    } else {\n      const versions = versionsIn.map((type) => pkg[type]![depKey]);\n\n      versions.forEach((version, index) => {\n        if (version.startsWith('file:') || range.startsWith('file:')) return;\n        // https://yarnpkg.com/features/workspaces#workspace-ranges-workspace\n        if (\n          version.startsWith('workspace:') ||\n          range.startsWith('workspace:')\n        ) {\n          return;\n        }\n\n        if (\n          semver.satisfies(version, range, {\n            includePrerelease: true,\n          }) ||\n          semver.intersects(version, range, {\n            includePrerelease: true,\n          })\n        ) {\n          return;\n        }\n\n        // Ignore reporting duplicate when there's a resolution for it\n        if (pkg.resolutions?.[depKey]) {\n          return;\n        }\n\n        const versionInType = versionsIn[index];\n\n        reportError(\n          `Invalid duplicate dependency \"${depKey}\"`,\n          `\"${versions[0]}\" (in ${versionInType}) should satisfies \"${range}\" from \"${depPkg.name}\" ${depType}.`,\n          onlyWarnsForCheck.shouldWarnsFor(depKey),\n        );\n      });\n    }\n  }\n}\n","import type { GetDependencyPackageJson } from 'utils/createGetDependencyPackageJson';\nimport {\n  reportNotWarnedForMapping,\n  createReportError,\n} from '../utils/createReportError';\nimport { getKeys } from '../utils/object';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsForMappingCheck } from '../utils/warnForUtils';\nimport { checkDuplicateDependencies } from './checkDuplicateDependencies';\n\nexport function checkDirectDuplicateDependencies(\n  pkg: PackageJson,\n  pkgPathName: string,\n  depType: DependencyTypes,\n  getDependencyPackageJson: GetDependencyPackageJson,\n  onlyWarnsForCheck: OnlyWarnsForMappingCheck,\n  reportErrorNamePrefix = '',\n): void {\n  const reportError = createReportError(\n    `${reportErrorNamePrefix}Direct Duplicate Dependencies`,\n    pkgPathName,\n  );\n\n  const checks: {\n    type: DependencyTypes;\n    searchIn: DependencyTypes[];\n  }[] = [\n    {\n      type: 'devDependencies',\n      searchIn: ['devDependencies', 'dependencies'],\n    },\n    { type: 'dependencies', searchIn: ['devDependencies', 'dependencies'] },\n  ];\n  checks.forEach(({ type, searchIn }) => {\n    if (!pkg[type]) return;\n    getKeys(pkg[type]).forEach((depName) => {\n      const depPkg = getDependencyPackageJson(depName);\n      checkDuplicateDependencies(\n        reportError,\n        pkg,\n        depType,\n        searchIn,\n        depPkg,\n        onlyWarnsForCheck.createFor(depName),\n      );\n    });\n  });\n\n  reportNotWarnedForMapping(reportError, onlyWarnsForCheck);\n}\n","import semver from 'semver';\nimport type { ReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkPeerDependencies(\n  pkg: PackageJson,\n  reportError: ReportError,\n  type: DependencyTypes,\n  allowedPeerIn: DependencyTypes[],\n  depPkg: PackageJson,\n  missingOnlyWarnsForCheck: OnlyWarnsForCheck,\n  invalidOnlyWarnsForCheck: OnlyWarnsForCheck,\n): void {\n  const { peerDependencies, peerDependenciesMeta } = depPkg;\n  if (!peerDependencies) return;\n\n  const allowedPeerInExisting = allowedPeerIn.filter(\n    (allowedPeerInType) => pkg[allowedPeerInType],\n  );\n\n  for (const [peerDepKey, range] of Object.entries(peerDependencies)) {\n    const versionsIn = allowedPeerInExisting.filter(\n      (allowedPeerInExistingType) =>\n        pkg[allowedPeerInExistingType]![peerDepKey],\n    );\n    if (versionsIn.length === 0) {\n      const peerDependenciesMetaPeerDep = peerDependenciesMeta?.[peerDepKey];\n      if (peerDependenciesMetaPeerDep?.optional) {\n        return;\n      }\n      reportError(\n        `Missing \"${peerDepKey}\" peer dependency from \"${depPkg.name}\" in ${type}`,\n        `it should satisfies \"${range}\" and be in ${allowedPeerIn.join(\n          ' or ',\n        )}`,\n        missingOnlyWarnsForCheck.shouldWarnsFor(peerDepKey),\n      );\n    } else {\n      const versions = versionsIn.map(\n        (versionsInType) => pkg[versionsInType]![peerDepKey],\n      );\n\n      versions.forEach((version, index) => {\n        if (version.startsWith('npm:')) {\n          return;\n        }\n\n        const minVersionOfVersion = semver.minVersion(version);\n        if (\n          !minVersionOfVersion ||\n          !semver.satisfies(minVersionOfVersion, range, {\n            includePrerelease: true,\n          })\n        ) {\n          reportError(\n            `Invalid \"${peerDepKey}\" peer dependency`,\n            `\"${version}\" (in ${allowedPeerInExisting[index]}) should satisfies \"${range}\" from \"${depPkg.name}\" ${type}`,\n            invalidOnlyWarnsForCheck.shouldWarnsFor(peerDepKey),\n          );\n        }\n      });\n    }\n  }\n}\n","import type { GetDependencyPackageJson } from 'utils/createGetDependencyPackageJson';\nimport {\n  createReportError,\n  reportNotWarnedForMapping,\n} from '../utils/createReportError';\nimport { getKeys } from '../utils/object';\nimport type {\n  DependencyTypes,\n  PackageJson,\n  RegularDependencyTypes,\n} from '../utils/packageTypes';\nimport type { OnlyWarnsForMappingCheck } from '../utils/warnForUtils';\nimport { checkPeerDependencies } from './checkPeerDependencies';\n\nconst regularDependencyTypes: RegularDependencyTypes[] = [\n  'devDependencies',\n  'dependencies',\n  'optionalDependencies',\n];\n\nconst getAllowedPeerInFromType = (\n  depPkgType: RegularDependencyTypes,\n  isLibrary: boolean,\n): DependencyTypes[] => {\n  switch (depPkgType) {\n    case 'devDependencies':\n      return ['devDependencies', 'dependencies'];\n    case 'dependencies':\n    case 'optionalDependencies':\n      return isLibrary\n        ? ['dependencies', 'peerDependencies']\n        : ['dependencies'];\n  }\n};\n\nexport function checkDirectPeerDependencies(\n  isLibrary: boolean,\n  pkg: PackageJson,\n  pkgPathName: string,\n  getDependencyPackageJson: GetDependencyPackageJson,\n  missingOnlyWarnsForCheck: OnlyWarnsForMappingCheck,\n  invalidOnlyWarnsForCheck: OnlyWarnsForMappingCheck,\n): void {\n  const reportError = createReportError('Peer Dependencies', pkgPathName);\n\n  regularDependencyTypes.forEach((depType) => {\n    if (!pkg[depType]) return;\n    getKeys(pkg[depType]).forEach((depName) => {\n      const depPkg = getDependencyPackageJson(depName);\n\n      if (depPkg.peerDependencies) {\n        checkPeerDependencies(\n          pkg,\n          reportError,\n          depType,\n          getAllowedPeerInFromType(depType, isLibrary),\n          depPkg,\n          missingOnlyWarnsForCheck.createFor(depName),\n          invalidOnlyWarnsForCheck.createFor(depName),\n        );\n      }\n    });\n  });\n\n  reportNotWarnedForMapping(reportError, missingOnlyWarnsForCheck);\n  if (missingOnlyWarnsForCheck !== invalidOnlyWarnsForCheck) {\n    reportNotWarnedForMapping(reportError, invalidOnlyWarnsForCheck);\n  }\n}\n","/* eslint-disable complexity */\nimport semver from 'semver';\nimport type { GetDependencyPackageJson } from '../utils/createGetDependencyPackageJson';\nimport {\n  createReportError,\n  reportNotWarnedFor,\n} from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport interface CheckExactVersionsOptions {\n  getDependencyPackageJson?: GetDependencyPackageJson;\n  onlyWarnsForCheck: OnlyWarnsForCheck;\n  tryToAutoFix?: boolean;\n}\n\nconst isVersionRange = (version: string): boolean =>\n  version.startsWith('^') || version.startsWith('~');\n\nexport function checkExactVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  types: DependencyTypes[],\n  {\n    getDependencyPackageJson,\n    onlyWarnsForCheck,\n    tryToAutoFix = false,\n  }: CheckExactVersionsOptions,\n): void {\n  const reportError = createReportError('Exact versions', pkgPathName);\n\n  types.forEach((type) => {\n    const pkgDependencies = pkg[type];\n    if (!pkgDependencies) return;\n\n    for (const [dependencyName, versionConst] of Object.entries(\n      pkgDependencies,\n    )) {\n      let version = versionConst;\n      if (version.startsWith('npm:')) {\n        const match = /^npm:.*@(.*)$/.exec(version);\n        if (!match) throw new Error(`Invalid version match: ${version}`);\n        const [, realVersion] = match;\n        version = realVersion;\n      }\n\n      if (isVersionRange(version)) {\n        const shouldOnlyWarn = onlyWarnsForCheck.shouldWarnsFor(dependencyName);\n        if (!shouldOnlyWarn && tryToAutoFix && getDependencyPackageJson) {\n          let resolvedDep;\n          try {\n            resolvedDep = getDependencyPackageJson(dependencyName);\n          } catch {\n            resolvedDep = null;\n          }\n          if (!resolvedDep || !resolvedDep.version) {\n            reportError(\n              `Unexpected range dependency in \"${type}\" for \"${dependencyName}\"`,\n              `expecting \"${version}\" to be exact, autofix failed to resolve \"${dependencyName}\".`,\n              shouldOnlyWarn,\n            );\n          } else if (\n            !semver.satisfies(resolvedDep.version, version, {\n              includePrerelease: true,\n            })\n          ) {\n            reportError(\n              `Unexpected range dependency in \"${type}\" for \"${dependencyName}\"`,\n              `expecting \"${version}\" to be exact, autofix failed as \"${dependencyName}\"'s resolved version is \"${resolvedDep.version}\" and doesn't satisfies \"${version}\".`,\n              shouldOnlyWarn,\n            );\n          } else {\n            pkgDependencies[dependencyName] = resolvedDep.version;\n          }\n        } else {\n          reportError(\n            `Unexpected range dependency in \"${type}\" for \"${dependencyName}\"`,\n            `expecting \"${version}\" to be exact \"${version.slice(1)}\".`,\n            shouldOnlyWarn,\n          );\n        }\n      }\n    }\n  });\n\n  reportNotWarnedFor(reportError, onlyWarnsForCheck);\n}\n","import { createReportError } from '../utils/createReportError';\nimport { getKeys } from '../utils/object';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkIdenticalVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  deps: Record<string, string[] | Partial<Record<DependencyTypes, string[]>>>,\n  onlyWarnsForCheck?: OnlyWarnsForCheck,\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError('Identical Versions', pkgPathName);\n\n  getKeys(deps).forEach((depKey) => {\n    const version = pkgDependencies[depKey];\n    if (!version) {\n      reportError(`Unexpected missing ${type} for \"${depKey}\".`);\n      return;\n    }\n\n    const depConfigArrayOrObject = deps[depKey];\n    const depConfig = Array.isArray(depConfigArrayOrObject)\n      ? { [type]: depConfigArrayOrObject }\n      : depConfigArrayOrObject;\n\n    getKeys(depConfig).forEach((depKeyType) => {\n      const pkgDependenciesType = pkg[depKeyType] || {};\n      depConfig[depKeyType]?.forEach((depKeyIdentical) => {\n        const value = pkgDependenciesType[depKeyIdentical];\n        if (!value) {\n          reportError(\n            `Missing \"${depKeyIdentical}\" in ${depKeyType}`,\n            `it should be \"${version}\".`,\n            onlyWarnsForCheck?.shouldWarnsFor(depKey),\n          );\n        }\n\n        if (value !== version) {\n          reportError(\n            `Invalid \"${depKeyIdentical}\" in ${depKeyType}`,\n            `expecting \"${value}\" be \"${version}\".`,\n            onlyWarnsForCheck?.shouldWarnsFor(depKey),\n          );\n        }\n      });\n    });\n  });\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkIdenticalVersionsThanDependency(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  depKeys: string[],\n  depPkg: PackageJson,\n  dependencies: PackageJson[DependencyTypes] = {},\n  onlyWarnsForCheck?: OnlyWarnsForCheck,\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError(\n    `Same Versions than ${depPkg.name}`,\n    pkgPathName,\n  );\n\n  depKeys.forEach((depKey) => {\n    const version = dependencies[depKey];\n    if (!version) {\n      reportError(\n        `Unexpected missing dependency \"${depKey}\" in \"${depPkg.name}\".`,\n      );\n      return;\n    }\n\n    if (version.startsWith('^') || version.startsWith('~')) {\n      reportError(\n        `Unexpected range dependency in \"${depPkg.name}\" for \"${depKey}\"`,\n        'perhaps use checkSatisfiesVersionsFromDependency() instead.',\n      );\n      return;\n    }\n\n    const value = pkgDependencies[depKey];\n\n    if (!value) {\n      reportError(\n        `Missing \"${depKey}\" in ${type}`,\n        `expecting to be \"${version}\".`,\n        onlyWarnsForCheck?.shouldWarnsFor(depKey),\n      );\n    }\n\n    if (value !== version) {\n      reportError(\n        `Invalid \"${depKey}\" in ${type}`,\n        `expecting \"${value}\" to be \"${version}\".`,\n        onlyWarnsForCheck?.shouldWarnsFor(depKey),\n      );\n    }\n  });\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport function checkNoDependencies(\n  pkg: PackageJson,\n  pkgPath: string,\n  type: DependencyTypes = 'dependencies',\n  moveToSuggestion: DependencyTypes = 'devDependencies',\n): void {\n  const pkgDependencies = pkg[type];\n  if (!pkgDependencies) return;\n\n  const reportError = createReportError('No dependencies', pkgPath);\n  reportError(\n    `Unexpected ${type}`,\n    `you should move them in ${moveToSuggestion}`,\n  );\n}\n","import type { GetDependencyPackageJson } from '../utils/createGetDependencyPackageJson';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson } from '../utils/packageTypes';\n\nexport type CheckResolutionMessage = (\n  depKey: string,\n  resolutionExplainedMessage: string,\n  checkMessageHelpers: {\n    getDependencyPackageJson: GetDependencyPackageJson;\n  },\n) => string | undefined;\n\nexport function checkResolutionsHasExplanation(\n  pkg: PackageJson,\n  pkgPathName: string,\n  checkMessage: CheckResolutionMessage,\n  getDependencyPackageJson: GetDependencyPackageJson,\n): void {\n  const pkgResolutions = pkg.resolutions || {};\n  const pkgResolutionsExplained = pkg.resolutionsExplained || {};\n  const reportError = createReportError(\n    'Resolutions has explanation',\n    pkgPathName,\n  );\n\n  Object.keys(pkgResolutions).forEach((depKey) => {\n    if (!pkgResolutionsExplained[depKey]) {\n      reportError(`Missing \"${depKey}\" in resolutionsExplained.`);\n    }\n  });\n\n  Object.keys(pkgResolutionsExplained).forEach((depKey) => {\n    if (!pkgResolutions[depKey]) {\n      reportError(\n        `Found \"${depKey}\" in resolutionsExplained but not in resolutions.`,\n      );\n    } else {\n      const error = checkMessage(depKey, pkgResolutionsExplained[depKey], {\n        getDependencyPackageJson,\n      });\n      if (error) {\n        reportError(\n          `Invalid message for \"${depKey}\" in resolutionsExplained`,\n          `${error}.`,\n        );\n      }\n    }\n  });\n}\n","import semver from 'semver';\nimport { createReportError } from '../utils/createReportError';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkSatisfiesVersionsFromDependency(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  depKeys: string[],\n  depPkg: PackageJson,\n  dependencies: PackageJson[DependencyTypes] = {},\n  onlyWarnsForCheck?: OnlyWarnsForCheck,\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError(\n    `Satisfies Versions from ${depPkg.name}`,\n    pkgPathName,\n  );\n\n  depKeys.forEach((depKey) => {\n    const range = dependencies[depKey];\n    if (!range) {\n      reportError(\n        `Unexpected missing dependency \"${depKey}\" in \"${depPkg.name}\".`,\n      );\n      return;\n    }\n\n    const version = pkgDependencies[depKey];\n\n    if (!version) {\n      reportError(\n        `Missing \"${depKey}\" in ${type}`,\n        `should satisfies \"${range}\" from \"${depPkg.name}\" ${depKey}.`,\n        onlyWarnsForCheck?.shouldWarnsFor(depKey),\n      );\n    } else {\n      const minVersionOfVersion = semver.minVersion(version);\n      if (\n        !minVersionOfVersion ||\n        !semver.satisfies(minVersionOfVersion, range, {\n          includePrerelease: true,\n        })\n      ) {\n        reportError(\n          `Invalid \"${depKey}\" in ${type}`,\n          `\"${version}\" (in \"${depKey}\") should satisfies \"${range}\" from \"${depPkg.name}\" ${depKey}.`,\n          onlyWarnsForCheck?.shouldWarnsFor(depKey),\n        );\n      }\n    }\n  });\n}\n","import { readFileSync, writeFileSync } from 'fs';\nimport type { PackageJson } from './packageTypes';\n\nexport type GetDependencyPackageJson = (pkgDepName: string) => PackageJson;\n\nexport function readPkgJson(packagePath: string): PackageJson {\n  return JSON.parse(readFileSync(packagePath, 'utf-8')) as PackageJson;\n}\n\nexport function writePkgJson(packagePath: string, pkg: PackageJson): void {\n  writeFileSync(packagePath, JSON.stringify(pkg, null, 2));\n}\n\ntype NodeModulesPackagePathCache = Map<string, PackageJson>;\n\ninterface CreateGetDependencyPackageJsonOptions {\n  pkgDirname: string;\n  nodeModulesPackagePathCache?: NodeModulesPackagePathCache;\n}\n\nexport function createGetDependencyPackageJson({\n  pkgDirname,\n  nodeModulesPackagePathCache = new Map<string, PackageJson>(),\n}: CreateGetDependencyPackageJsonOptions): GetDependencyPackageJson {\n  return (pkgDepName) => {\n    const existing = nodeModulesPackagePathCache.get(pkgDepName);\n    if (existing) return existing;\n    let pkg: PackageJson;\n    if (pkgDepName.startsWith('.')) {\n      const packagePath = `${pkgDirname}/${pkgDepName}/package.json`;\n      pkg = readPkgJson(packagePath);\n    } else {\n      try {\n        // eslint-disable-next-line import/no-dynamic-require, @typescript-eslint/no-unsafe-assignment\n        pkg = require(require.resolve(`${pkgDepName}/package.json`, {\n          paths: [pkgDirname],\n        }));\n      } catch (err: unknown) {\n        if (!(err instanceof Error)) throw err;\n\n        if (\n          (err as NodeJS.ErrnoException).code !==\n          'ERR_PACKAGE_PATH_NOT_EXPORTED'\n        ) {\n          throw err;\n        }\n\n        const match = / in (.*\\/package.json)($|\\simported from)/.exec(\n          err.message,\n        );\n\n        if (match) {\n          const [, matchPackageJson] = match;\n          pkg = readPkgJson(matchPackageJson);\n        } else {\n          throw err;\n        }\n      }\n    }\n    nodeModulesPackagePathCache.set(pkgDepName, pkg);\n    return pkg;\n  };\n}\n","import { getEntries } from './object';\n\nexport type OnlyWarnsFor = string[];\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport type OnlyWarnsForDependencyMapping = Record<string | '*', OnlyWarnsFor>;\nexport type OnlyWarnsForOptionalDependencyMapping =\n  | undefined\n  | OnlyWarnsFor\n  | OnlyWarnsForDependencyMapping;\n\nexport interface OnlyWarnsForCheck {\n  configName: string;\n  getNotWarnedFor: () => string[];\n  shouldWarnsFor: (dependencyName: string) => boolean;\n}\n\nexport interface OnlyWarnsForMappingCheck {\n  configName: string;\n  getNotWarnedFor: () => Record<string, string[]>;\n  createFor: (dependencyName: string) => OnlyWarnsForCheck;\n}\n\nexport const createOnlyWarnsForArrayCheck = (\n  configName: string,\n  onlyWarnsFor: OnlyWarnsFor = [],\n): OnlyWarnsForCheck => {\n  const notWarnedFor = new Set(onlyWarnsFor);\n  return {\n    configName,\n    getNotWarnedFor: () => [...notWarnedFor],\n    shouldWarnsFor(dependencyName) {\n      if (onlyWarnsFor.includes(dependencyName)) {\n        notWarnedFor.delete(dependencyName);\n        return true;\n      }\n      return false;\n    },\n  };\n};\n\nconst isMapping = (\n  onlyWarnsFor: OnlyWarnsForOptionalDependencyMapping,\n): onlyWarnsFor is OnlyWarnsForDependencyMapping => {\n  return typeof onlyWarnsFor === 'object' && !Array.isArray(onlyWarnsFor);\n};\n\nexport const createOnlyWarnsForMappingCheck = (\n  configName: string,\n  onlyWarnsFor: OnlyWarnsForOptionalDependencyMapping,\n): OnlyWarnsForMappingCheck => {\n  if (isMapping(onlyWarnsFor)) {\n    const notWarnedFor = Object.fromEntries(\n      getEntries(onlyWarnsFor).map(([entryKey, entryValue]) => [\n        entryKey,\n        new Set(entryValue),\n      ]),\n    );\n    return {\n      configName,\n      getNotWarnedFor: () =>\n        Object.fromEntries(\n          getEntries(notWarnedFor)\n            .filter(([key, set]) => set.size > 0)\n            .map(([key, set]) => [key, [...set]]),\n        ),\n      createFor(dependencyNameLevel1) {\n        return {\n          configName,\n          getNotWarnedFor() {\n            throw new Error('Invalid call to getNotWarnedFor()');\n          },\n          shouldWarnsFor(dependencyName) {\n            if (onlyWarnsFor['*']?.includes(dependencyName)) {\n              notWarnedFor['*'].delete(dependencyName);\n              return true;\n            }\n            if (onlyWarnsFor[dependencyNameLevel1]?.includes(dependencyName)) {\n              notWarnedFor[dependencyNameLevel1].delete(dependencyName);\n              return true;\n            }\n            return false;\n          },\n        };\n      },\n    };\n  }\n\n  const arrayOnlyWarnsForCheck = createOnlyWarnsForArrayCheck(\n    configName,\n    onlyWarnsFor,\n  );\n  return {\n    configName,\n    getNotWarnedFor: (): Record<string, string[]> => {\n      const notWarnedFor = arrayOnlyWarnsForCheck.getNotWarnedFor();\n      if (notWarnedFor.length > 0) {\n        return { '*': notWarnedFor };\n      }\n      return {};\n    },\n    createFor() {\n      return {\n        configName,\n        getNotWarnedFor() {\n          throw new Error('Invalid call to getNotWarnedFor()');\n        },\n        shouldWarnsFor(dependencyName) {\n          return arrayOnlyWarnsForCheck.shouldWarnsFor(dependencyName);\n        },\n      };\n    },\n  };\n};\n","/* eslint-disable complexity */\n/* eslint-disable max-lines */\nimport path from 'path';\nimport util from 'util';\nimport { checkDirectDuplicateDependencies } from './checks/checkDirectDuplicateDependencies';\nimport { checkDirectPeerDependencies } from './checks/checkDirectPeerDependencies';\nimport { checkExactVersions } from './checks/checkExactVersions';\nimport { checkIdenticalVersions } from './checks/checkIdenticalVersions';\nimport { checkIdenticalVersionsThanDependency } from './checks/checkIdenticalVersionsThanDependency';\nimport { checkNoDependencies } from './checks/checkNoDependencies';\nimport type { CheckResolutionMessage } from './checks/checkResolutionsHasExplanation';\nimport { checkResolutionsHasExplanation } from './checks/checkResolutionsHasExplanation';\nimport { checkSatisfiesVersionsFromDependency } from './checks/checkSatisfiesVersionsFromDependency';\nimport type { GetDependencyPackageJson } from './utils/createGetDependencyPackageJson';\nimport {\n  createGetDependencyPackageJson,\n  readPkgJson,\n  writePkgJson,\n} from './utils/createGetDependencyPackageJson';\nimport { getEntries } from './utils/object';\nimport type { DependencyTypes, PackageJson } from './utils/packageTypes';\nimport type {\n  OnlyWarnsForOptionalDependencyMapping,\n  OnlyWarnsFor,\n  OnlyWarnsForDependencyMapping,\n} from './utils/warnForUtils';\nimport {\n  createOnlyWarnsForArrayCheck,\n  createOnlyWarnsForMappingCheck,\n} from './utils/warnForUtils';\n\nexport interface CreateCheckPackageOptions {\n  tryToAutoFix?: boolean;\n}\n\nexport interface CheckDirectPeerDependenciesOptions {\n  isLibrary?: boolean;\n  /** @deprecated use missingOnlyWarnsFor or invalidOnlyWarnsFor */\n  onlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  missingOnlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  invalidOnlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  internalMissingConfigName?: string;\n  internalInvalidConfigName?: string;\n}\n\nexport interface CheckDirectDuplicateDependenciesOptions {\n  onlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  internalConfigName?: string;\n}\n\nexport interface OnlyWarnsForInPackageCheckPackageRecommendedOption {\n  exactVersions: OnlyWarnsFor;\n}\n\nexport interface OnlyWarnsForInDependencyCheckPackageRecommendedOption {\n  duplicateDirectDependency: OnlyWarnsFor;\n  missingPeerDependency: OnlyWarnsFor;\n  invalidPeerDependencyVersion: OnlyWarnsFor;\n}\n\nexport type OnlyWarnsForInDependenciesCheckPackageRecommendedOption = Record<\n  // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n  '*' | string,\n  OnlyWarnsForInDependencyCheckPackageRecommendedOption\n>;\n\nexport interface CheckRecommendedOptions {\n  isLibrary?: boolean;\n  /** default is true for libraries, false otherwise */\n  allowRangeVersionsInDependencies?: boolean;\n  onlyWarnsForInPackage?: OnlyWarnsForInPackageCheckPackageRecommendedOption;\n  onlyWarnsForInDependencies?: OnlyWarnsForInDependenciesCheckPackageRecommendedOption;\n  /** @deprecated use onlyWarnsForInDependencies option */\n  peerDependenciesOnlyWarnsFor?: OnlyWarnsFor;\n  /** @deprecated use onlyWarnsForInDependencies option */\n  directDuplicateDependenciesOnlyWarnsFor?: OnlyWarnsFor;\n  /** @deprecated use onlyWarnsForInPackage option */\n  exactVersionsOnlyWarnsFor?: OnlyWarnsFor;\n  /** function to check the value in the \"resolutionExplained\" key in package.json */\n  checkResolutionMessage?: CheckResolutionMessage;\n}\n\nexport interface CheckExactVersionsOptions {\n  allowRangeVersionsInDependencies?: boolean;\n  onlyWarnsFor?: OnlyWarnsFor;\n}\n\nexport interface CheckPackageApi {\n  /** @internal */\n  pkg: PackageJson;\n  /** @internal */\n  pkgDirname: string;\n  /** @internal */\n  pkgPathName: string;\n  /** @internal */\n  getDependencyPackageJson: GetDependencyPackageJson;\n\n  checkExactVersions: (options?: CheckExactVersionsOptions) => CheckPackageApi;\n  checkExactVersionsForLibrary: (\n    options?: CheckExactVersionsOptions,\n  ) => CheckPackageApi;\n  checkExactDevVersions: (\n    options?: CheckExactVersionsOptions,\n  ) => CheckPackageApi;\n  checkNoDependencies: (\n    type?: DependencyTypes,\n    moveToSuggestion?: DependencyTypes,\n  ) => CheckPackageApi;\n  checkDirectPeerDependencies: (\n    options?: CheckDirectPeerDependenciesOptions,\n  ) => CheckPackageApi;\n  checkDirectDuplicateDependencies: (\n    options?: CheckDirectDuplicateDependenciesOptions,\n  ) => CheckPackageApi;\n  checkResolutionsHasExplanation: (\n    checkMessage?: CheckResolutionMessage,\n  ) => CheckPackageApi;\n  checkRecommended: (options?: CheckRecommendedOptions) => CheckPackageApi;\n  checkIdenticalVersionsThanDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkIdenticalVersionsThanDevDependencyOfDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkSatisfiesVersionsFromDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkSatisfiesVersionsInDevDependenciesOfDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkIdenticalVersions: (dependencies: {\n    resolutions?: Record<string, string[]>;\n    dependencies?: Record<string, string[]>;\n    devDependencies?: Record<string, string[]>;\n  }) => CheckPackageApi;\n  checkSatisfiesVersionsBetweenDependencies: (\n    depName1: string,\n    depName2: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n}\n\nexport function createCheckPackage(\n  pkgDirectoryPath = '.',\n  { tryToAutoFix = false }: CreateCheckPackageOptions = {},\n): CheckPackageApi {\n  const pkgDirname = path.resolve(pkgDirectoryPath);\n  const pkgPath = `${pkgDirname}/package.json`;\n  const pkgPathName = `${pkgDirectoryPath}/package.json`;\n  const pkg = readPkgJson(pkgPath);\n  const copyPkg: PackageJson = JSON.parse(JSON.stringify(pkg)) as PackageJson;\n\n  if (\n    process.env.CI &&\n    process.env.CHECK_PACKAGE_DEPENDENCIES_ENABLE_CI_AUTOFIX !== 'true'\n  ) {\n    tryToAutoFix = false;\n  }\n\n  const writePackageIfChanged = (): void => {\n    if (!tryToAutoFix) return;\n    if (util.isDeepStrictEqual(pkg, copyPkg)) return;\n    writePkgJson(pkgPath, pkg);\n  };\n\n  const getDependencyPackageJson = createGetDependencyPackageJson({\n    pkgDirname,\n  });\n\n  return {\n    pkg,\n    pkgDirname,\n    pkgPathName,\n    getDependencyPackageJson,\n    checkExactVersions({\n      onlyWarnsFor,\n      allowRangeVersionsInDependencies = true,\n    } = {}) {\n      const onlyWarnsForCheck = createOnlyWarnsForArrayCheck(\n        'checkExactVersions.onlyWarnsFor',\n        onlyWarnsFor,\n      );\n      checkExactVersions(\n        pkg,\n        pkgPathName,\n        !allowRangeVersionsInDependencies\n          ? ['dependencies', 'devDependencies', 'resolutions']\n          : ['devDependencies', 'resolutions'],\n        {\n          onlyWarnsForCheck,\n          tryToAutoFix,\n        },\n      );\n      writePackageIfChanged();\n      return this;\n    },\n    /** @deprecated use checkExactVersions({ allowRangeVersionsInDependencies: true })  */\n    checkExactVersionsForLibrary({ onlyWarnsFor } = {}) {\n      const onlyWarnsForCheck = createOnlyWarnsForArrayCheck(\n        'checkExactVersionsForLibrary.onlyWarnsFor',\n        onlyWarnsFor,\n      );\n      checkExactVersions(pkg, pkgPathName, ['devDependencies', 'resolutions'], {\n        onlyWarnsForCheck,\n        tryToAutoFix,\n        getDependencyPackageJson,\n      });\n      writePackageIfChanged();\n      return this;\n    },\n\n    checkExactDevVersions({ onlyWarnsFor } = {}) {\n      const onlyWarnsForCheck = createOnlyWarnsForArrayCheck(\n        'checkExactDevVersions.onlyWarnsFor',\n        onlyWarnsFor,\n      );\n      checkExactVersions(pkg, pkgPathName, ['devDependencies'], {\n        onlyWarnsForCheck,\n        tryToAutoFix,\n        getDependencyPackageJson,\n      });\n      writePackageIfChanged();\n      return this;\n    },\n\n    checkNoDependencies(\n      type = 'dependencies',\n      moveToSuggestion = 'devDependencies',\n    ) {\n      checkNoDependencies(pkg, pkgPathName, type, moveToSuggestion);\n      return this;\n    },\n\n    checkDirectPeerDependencies({\n      isLibrary = false,\n      onlyWarnsFor: deprecatedOnlyWarnsFor,\n      missingOnlyWarnsFor = deprecatedOnlyWarnsFor,\n      invalidOnlyWarnsFor = deprecatedOnlyWarnsFor,\n      internalMissingConfigName = deprecatedOnlyWarnsFor\n        ? 'onlyWarnsFor'\n        : 'missingOnlyWarnsFor',\n      internalInvalidConfigName = deprecatedOnlyWarnsFor\n        ? 'onlyWarnsFor'\n        : 'invalidOnlyWarnsFor',\n    } = {}) {\n      const missingOnlyWarnsForCheck = createOnlyWarnsForMappingCheck(\n        internalMissingConfigName,\n        missingOnlyWarnsFor,\n      );\n      const invalidOnlyWarnsForCheck =\n        internalInvalidConfigName === internalMissingConfigName\n          ? missingOnlyWarnsForCheck\n          : createOnlyWarnsForMappingCheck(\n              internalInvalidConfigName,\n              invalidOnlyWarnsFor,\n            );\n      checkDirectPeerDependencies(\n        isLibrary,\n        pkg,\n        pkgPathName,\n        getDependencyPackageJson,\n        missingOnlyWarnsForCheck,\n        invalidOnlyWarnsForCheck,\n      );\n      return this;\n    },\n\n    checkDirectDuplicateDependencies({\n      onlyWarnsFor,\n      internalConfigName = 'onlyWarnsFor',\n    } = {}) {\n      checkDirectDuplicateDependencies(\n        pkg,\n        pkgPathName,\n        'dependencies',\n        getDependencyPackageJson,\n        createOnlyWarnsForMappingCheck(internalConfigName, onlyWarnsFor),\n      );\n      return this;\n    },\n\n    checkResolutionsHasExplanation(\n      checkMessage: CheckResolutionMessage = (depKey, message) => undefined,\n    ) {\n      checkResolutionsHasExplanation(\n        pkg,\n        pkgPathName,\n        checkMessage,\n        getDependencyPackageJson,\n      );\n      return this;\n    },\n\n    checkRecommended({\n      isLibrary = false,\n      onlyWarnsForInPackage,\n      onlyWarnsForInDependencies,\n      allowRangeVersionsInDependencies = isLibrary,\n      peerDependenciesOnlyWarnsFor,\n      directDuplicateDependenciesOnlyWarnsFor,\n      exactVersionsOnlyWarnsFor,\n      checkResolutionMessage,\n    } = {}) {\n      let internalMissingPeerDependenciesOnlyWarnsFor: OnlyWarnsForOptionalDependencyMapping =\n        peerDependenciesOnlyWarnsFor;\n      let internalInvalidPeerDependenciesOnlyWarnsFor: OnlyWarnsForOptionalDependencyMapping =\n        peerDependenciesOnlyWarnsFor;\n      let internalDirectDuplicateDependenciesOnlyWarnsFor: OnlyWarnsForOptionalDependencyMapping =\n        directDuplicateDependenciesOnlyWarnsFor;\n\n      if (onlyWarnsForInPackage) {\n        if (exactVersionsOnlyWarnsFor) {\n          console.warn(\n            'Ignoring \"exactVersionsOnlyWarnsFor\" as \"onlyWarnsForInPackage\" is used.',\n          );\n        }\n        exactVersionsOnlyWarnsFor = onlyWarnsForInPackage.exactVersions || [];\n      }\n      if (onlyWarnsForInDependencies) {\n        if (peerDependenciesOnlyWarnsFor) {\n          console.warn(\n            'Ignoring \"peerDependenciesOnlyWarnsFor\" as \"onlyWarnsFor\" is used.',\n          );\n        }\n        if (directDuplicateDependenciesOnlyWarnsFor) {\n          console.warn(\n            'Ignoring \"directDuplicateDependenciesOnlyWarnsFor\" as \"onlyWarnsFor\" is used.',\n          );\n        }\n\n        internalDirectDuplicateDependenciesOnlyWarnsFor = {};\n        internalMissingPeerDependenciesOnlyWarnsFor = {};\n        internalInvalidPeerDependenciesOnlyWarnsFor = {};\n\n        getEntries(onlyWarnsForInDependencies).forEach(\n          ([dependencyNameOrSpecialKey, onlyWarnsForValue]) => {\n            if (onlyWarnsForValue.duplicateDirectDependency) {\n              (\n                internalDirectDuplicateDependenciesOnlyWarnsFor as OnlyWarnsForDependencyMapping\n              )[dependencyNameOrSpecialKey] =\n                onlyWarnsForValue.duplicateDirectDependency;\n            }\n            if (onlyWarnsForValue.missingPeerDependency) {\n              (\n                internalMissingPeerDependenciesOnlyWarnsFor as OnlyWarnsForDependencyMapping\n              )[dependencyNameOrSpecialKey] =\n                onlyWarnsForValue.missingPeerDependency;\n            }\n            if (onlyWarnsForValue.invalidPeerDependencyVersion) {\n              (\n                internalInvalidPeerDependenciesOnlyWarnsFor as OnlyWarnsForDependencyMapping\n              )[dependencyNameOrSpecialKey] =\n                onlyWarnsForValue.invalidPeerDependencyVersion;\n            }\n          },\n        );\n      }\n\n      this.checkExactVersions({\n        allowRangeVersionsInDependencies,\n        onlyWarnsFor: exactVersionsOnlyWarnsFor,\n      });\n\n      this.checkDirectPeerDependencies({\n        isLibrary,\n        missingOnlyWarnsFor: internalMissingPeerDependenciesOnlyWarnsFor,\n        invalidOnlyWarnsFor: internalInvalidPeerDependenciesOnlyWarnsFor,\n        internalMissingConfigName: peerDependenciesOnlyWarnsFor\n          ? 'peerDependenciesOnlyWarnsFor'\n          : 'onlyWarnsForInDependencies.missingPeerDependency',\n        internalInvalidConfigName: peerDependenciesOnlyWarnsFor\n          ? 'peerDependenciesOnlyWarnsFor'\n          : 'onlyWarnsForInDependencies.invalidPeerDependencyVersion',\n      });\n\n      this.checkDirectDuplicateDependencies({\n        onlyWarnsFor: internalDirectDuplicateDependenciesOnlyWarnsFor,\n        internalConfigName: directDuplicateDependenciesOnlyWarnsFor\n          ? 'directDuplicateDependenciesOnlyWarnsFor'\n          : 'onlyWarnsForInDependencies.duplicateDirectDependency',\n      });\n\n      this.checkResolutionsHasExplanation(checkResolutionMessage);\n      return this;\n    },\n\n    checkIdenticalVersionsThanDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (dependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      return this;\n    },\n\n    checkIdenticalVersionsThanDevDependencyOfDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (dependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (devDependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsFromDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsInDevDependenciesOfDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkIdenticalVersions({ resolutions, dependencies, devDependencies }) {\n      if (resolutions) {\n        checkIdenticalVersions(pkg, pkgPathName, 'resolutions', resolutions);\n      }\n      if (dependencies) {\n        checkIdenticalVersions(pkg, pkgPathName, 'dependencies', dependencies);\n      }\n      if (devDependencies) {\n        checkIdenticalVersions(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsBetweenDependencies(\n      depName1,\n      depName2,\n      { dependencies, devDependencies },\n    ) {\n      const depPkg1 = getDependencyPackageJson(depName1);\n      const depPkg2 = getDependencyPackageJson(depName2);\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          depPkg2,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg1,\n          depPkg1.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          depPkg2,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg1,\n          depPkg1.dependencies,\n        );\n      }\n      return this;\n    },\n  };\n}\n","import fs from 'fs';\nimport path from 'path';\nimport glob from 'glob';\nimport type {\n  CreateCheckPackageOptions,\n  CheckPackageApi,\n  OnlyWarnsForInDependenciesCheckPackageRecommendedOption,\n  OnlyWarnsForInDependencyCheckPackageRecommendedOption,\n  OnlyWarnsForInPackageCheckPackageRecommendedOption,\n} from './check-package';\nimport { createCheckPackage } from './check-package';\nimport { checkDirectDuplicateDependencies } from './checks/checkDirectDuplicateDependencies';\nimport type { CheckResolutionMessage } from './checks/checkResolutionsHasExplanation';\nimport type {\n  OnlyWarnsFor,\n  OnlyWarnsForOptionalDependencyMapping,\n} from './utils/warnForUtils';\nimport { createOnlyWarnsForMappingCheck } from './utils/warnForUtils';\n\ninterface OnlyWarnsForInMonorepoPackageCheckPackageRecommendedOption\n  extends OnlyWarnsForInPackageCheckPackageRecommendedOption {\n  duplicateDirectDependency: OnlyWarnsForInDependencyCheckPackageRecommendedOption['duplicateDirectDependency'];\n}\n\ntype OnlyWarnsForInMonorepoPackagesCheckPackageRecommendedOption = Record<\n  // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n  '*' | string,\n  OnlyWarnsForInMonorepoPackageCheckPackageRecommendedOption\n>;\n\nexport interface CheckPackageWithWorkspacesRecommendedOptions {\n  isLibrary?: (pkgName: string) => boolean;\n  allowRangeVersionsInLibraries?: boolean;\n  /** @deprecated use onlyWarnsFor */\n  peerDependenciesOnlyWarnsFor?: OnlyWarnsFor;\n  /** @deprecated use onlyWarnsFor */\n  directDuplicateDependenciesOnlyWarnsFor?: OnlyWarnsFor;\n  monorepoDirectDuplicateDependenciesOnlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  onlyWarnsForInRootPackage?: OnlyWarnsForInPackageCheckPackageRecommendedOption;\n  onlyWarnsForInMonorepoPackages?: OnlyWarnsForInMonorepoPackagesCheckPackageRecommendedOption;\n  onlyWarnsForInDependencies?: OnlyWarnsForInDependenciesCheckPackageRecommendedOption;\n  checkResolutionMessage?: CheckResolutionMessage;\n}\n\nexport interface CheckPackageWithWorkspacesApi {\n  checkRecommended: (\n    options?: CheckPackageWithWorkspacesRecommendedOptions,\n  ) => CheckPackageWithWorkspacesApi;\n\n  forRoot: (\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n  forEach: (\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n  for: (\n    id: string,\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n}\n\nexport function createCheckPackageWithWorkspaces(\n  pkgDirectoryPath = '.',\n  createCheckPackageOptions: CreateCheckPackageOptions = {},\n): CheckPackageWithWorkspacesApi {\n  const checkPackage = createCheckPackage(\n    pkgDirectoryPath,\n    createCheckPackageOptions,\n  );\n  const { pkg, pkgDirname } = checkPackage;\n\n  const pkgWorkspaces: string[] | undefined =\n    pkg.workspaces && !Array.isArray(pkg.workspaces)\n      ? pkg.workspaces.packages\n      : pkg.workspaces;\n\n  if (!pkgWorkspaces) {\n    throw new Error('Package is missing \"workspaces\"');\n  }\n\n  const workspacePackagesPaths: string[] = [];\n\n  if (pkgWorkspaces) {\n    pkgWorkspaces.forEach((pattern) => {\n      const match = glob.sync(`${pkgDirname}/${pattern}`);\n      match.forEach((pathMatch) => {\n        const stat = fs.statSync(pathMatch);\n        if (!stat.isDirectory()) return;\n        const subPkgDirectoryPath = path.relative(process.cwd(), pathMatch);\n        workspacePackagesPaths.push(subPkgDirectoryPath);\n      });\n    });\n  }\n\n  const checksWorkspaces = new Map<string, CheckPackageApi>(\n    workspacePackagesPaths.map((subPkgDirectoryPath) => {\n      const checkPkg = createCheckPackage(\n        subPkgDirectoryPath,\n        createCheckPackageOptions,\n      );\n      return [checkPkg.pkg.name, checkPkg];\n    }),\n  );\n\n  return {\n    checkRecommended({\n      isLibrary = () => false,\n      allowRangeVersionsInLibraries = true,\n      onlyWarnsForInRootPackage,\n      onlyWarnsForInMonorepoPackages,\n      onlyWarnsForInDependencies,\n      peerDependenciesOnlyWarnsFor,\n      directDuplicateDependenciesOnlyWarnsFor,\n      monorepoDirectDuplicateDependenciesOnlyWarnsFor,\n      checkResolutionMessage,\n    } = {}) {\n      if (peerDependenciesOnlyWarnsFor) {\n        console.warn(\n          'Option \"peerDependenciesOnlyWarnsFor\" in checkRecommended() is deprecated. Use \"onlyWarnsForInDependencies\" instead.',\n        );\n      }\n      if (directDuplicateDependenciesOnlyWarnsFor) {\n        console.warn(\n          'Option \"directDuplicateDependenciesOnlyWarnsFor\" in checkRecommended() is deprecated. Use \"onlyWarnsForInDependencies\" instead.',\n        );\n      }\n\n      checkPackage.checkNoDependencies();\n      checkPackage.checkRecommended({\n        isLibrary: false,\n        onlyWarnsForInPackage: onlyWarnsForInRootPackage,\n        onlyWarnsForInDependencies,\n        peerDependenciesOnlyWarnsFor,\n        directDuplicateDependenciesOnlyWarnsFor,\n        checkResolutionMessage,\n      });\n\n      checksWorkspaces.forEach((checkSubPackage, id) => {\n        const isPackageALibrary = isLibrary(id);\n        checkSubPackage.checkRecommended({\n          isLibrary: isPackageALibrary,\n          allowRangeVersionsInDependencies: isPackageALibrary\n            ? allowRangeVersionsInLibraries\n            : false,\n          onlyWarnsForInPackage: onlyWarnsForInMonorepoPackages\n            ? {\n                ...onlyWarnsForInMonorepoPackages['*'],\n                ...onlyWarnsForInMonorepoPackages[checkSubPackage.pkg.name],\n              }\n            : undefined,\n          onlyWarnsForInDependencies,\n          peerDependenciesOnlyWarnsFor,\n          directDuplicateDependenciesOnlyWarnsFor,\n          exactVersionsOnlyWarnsFor: [...checksWorkspaces.keys()],\n          checkResolutionMessage,\n        });\n\n        // TODO fix check onlyWarnFor\n        checkDirectDuplicateDependencies(\n          checkSubPackage.pkg,\n          checkSubPackage.pkgPathName,\n          'devDependencies',\n          checkSubPackage.getDependencyPackageJson,\n          createOnlyWarnsForMappingCheck(\n            'monorepoDirectDuplicateDependenciesOnlyWarnsFor',\n            monorepoDirectDuplicateDependenciesOnlyWarnsFor,\n          ),\n          'Monorepo ',\n        );\n      });\n\n      return this;\n    },\n\n    forRoot(callback) {\n      callback(checkPackage);\n      return this;\n    },\n\n    forEach(callback) {\n      checksWorkspaces.forEach((checkSubPackage) => {\n        callback(checkSubPackage);\n      });\n      return this;\n    },\n\n    for(id, callback) {\n      const packageCheck = checksWorkspaces.get(id);\n      if (!packageCheck) {\n        throw new Error(\n          `Invalid package name: ${id}. Known package names: \"${[\n            ...checksWorkspaces.keys(),\n          ].join('\",\"')}\"`,\n        );\n      }\n      callback(packageCheck);\n      return this;\n    },\n  };\n}\n"],"names":["getKeys","o","Object","keys","getEntries","entries","titleDisplayed","pkgPathDisplayed","logMessage","msgTitle","msgInfo","onlyWarns","console","error","chalk","yellow","red","createReportError","title","pkgPathName","reportError","cyan","process","exitCode","reportNotWarnedFor","onlyWarnsForCheck","notWarnedFor","getNotWarnedFor","length","configName","map","depName","join","reportNotWarnedForMapping","onlyWarnsForMappingCheck","notWarnedForMapping","forEach","depNameOrStar","checkDuplicateDependencies","pkg","depType","searchIn","depPkg","dependencies","searchInExisting","filter","type","depKey","range","versionsIn","versions","version","index","startsWith","semver","satisfies","includePrerelease","intersects","resolutions","versionInType","name","shouldWarnsFor","checkDirectDuplicateDependencies","getDependencyPackageJson","reportErrorNamePrefix","createFor","checkPeerDependencies","allowedPeerIn","missingOnlyWarnsForCheck","invalidOnlyWarnsForCheck","peerDependencies","peerDependenciesMeta","allowedPeerInExisting","allowedPeerInType","peerDepKey","allowedPeerInExistingType","peerDependenciesMetaPeerDep","optional","versionsInType","minVersionOfVersion","minVersion","regularDependencyTypes","getAllowedPeerInFromType","depPkgType","isLibrary","checkDirectPeerDependencies","isVersionRange","checkExactVersions","types","tryToAutoFix","pkgDependencies","dependencyName","versionConst","match","exec","Error","realVersion","shouldOnlyWarn","resolvedDep","slice","checkIdenticalVersions","deps","depConfigArrayOrObject","depConfig","Array","isArray","depKeyType","pkgDependenciesType","depKeyIdentical","value","checkIdenticalVersionsThanDependency","depKeys","checkNoDependencies","pkgPath","moveToSuggestion","checkResolutionsHasExplanation","checkMessage","pkgResolutions","pkgResolutionsExplained","resolutionsExplained","checkSatisfiesVersionsFromDependency","readPkgJson","packagePath","JSON","parse","readFileSync","writePkgJson","writeFileSync","stringify","createGetDependencyPackageJson","pkgDirname","nodeModulesPackagePathCache","Map","pkgDepName","existing","get","require","resolve","paths","err","code","message","matchPackageJson","set","createOnlyWarnsForArrayCheck","onlyWarnsFor","Set","includes","delete","isMapping","createOnlyWarnsForMappingCheck","fromEntries","entryKey","entryValue","key","size","dependencyNameLevel1","arrayOnlyWarnsForCheck","createCheckPackage","pkgDirectoryPath","path","copyPkg","env","CI","CHECK_PACKAGE_DEPENDENCIES_ENABLE_CI_AUTOFIX","writePackageIfChanged","util","isDeepStrictEqual","allowRangeVersionsInDependencies","checkExactVersionsForLibrary","checkExactDevVersions","deprecatedOnlyWarnsFor","missingOnlyWarnsFor","invalidOnlyWarnsFor","internalMissingConfigName","internalInvalidConfigName","internalConfigName","undefined","checkRecommended","onlyWarnsForInPackage","onlyWarnsForInDependencies","peerDependenciesOnlyWarnsFor","directDuplicateDependenciesOnlyWarnsFor","exactVersionsOnlyWarnsFor","checkResolutionMessage","internalMissingPeerDependenciesOnlyWarnsFor","internalInvalidPeerDependenciesOnlyWarnsFor","internalDirectDuplicateDependenciesOnlyWarnsFor","warn","exactVersions","dependencyNameOrSpecialKey","onlyWarnsForValue","duplicateDirectDependency","missingPeerDependency","invalidPeerDependencyVersion","devDependencies","checkIdenticalVersionsThanDevDependencyOfDependency","checkSatisfiesVersionsInDevDependenciesOfDependency","checkSatisfiesVersionsBetweenDependencies","depName1","depName2","depPkg1","depPkg2","createCheckPackageWithWorkspaces","createCheckPackageOptions","checkPackage","pkgWorkspaces","workspaces","packages","workspacePackagesPaths","pattern","glob","sync","pathMatch","stat","fs","statSync","isDirectory","subPkgDirectoryPath","relative","cwd","push","checksWorkspaces","checkPkg","allowRangeVersionsInLibraries","onlyWarnsForInRootPackage","onlyWarnsForInMonorepoPackages","monorepoDirectDuplicateDependenciesOnlyWarnsFor","checkSubPackage","id","isPackageALibrary","forRoot","callback","for","packageCheck"],"mappings":"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"}