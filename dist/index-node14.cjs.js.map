{"version":3,"file":"index-node14.cjs.js","sources":["../src/utils/object.ts","../src/utils/createReportError.ts","../src/checks/checkDuplicateDependencies.ts","../src/checks/checkDirectDuplicateDependencies.ts","../src/checks/checkPeerDependencies.ts","../src/checks/checkDirectPeerDependencies.ts","../src/checks/checkExactVersions.ts","../src/checks/checkIdenticalVersions.ts","../src/checks/checkIdenticalVersionsThanDependency.ts","../src/checks/checkNoDependencies.ts","../src/checks/checkResolutionsHasExplanation.ts","../src/checks/checkResolutionsVersionsMatch.ts","../src/checks/checkSatisfiesVersions.ts","../src/checks/checkSatisfiesVersionsFromDependency.ts","../src/utils/createGetDependencyPackageJson.ts","../src/utils/warnForUtils.ts","../src/check-package.ts","../src/check-package-with-workspaces.ts"],"sourcesContent":["export const getKeys = <T>(o: T): (keyof T)[] => Object.keys(o) as (keyof T)[];\n\nexport const getEntries = <T>(o: T): [keyof T, T[keyof T]][] =>\n  Object.entries(o) as unknown as [keyof T, T[keyof T]][];\n","/* eslint-disable no-console */\n\nimport chalk from 'chalk';\nimport { getEntries } from './object';\nimport type {\n  OnlyWarnsForCheck,\n  OnlyWarnsForMappingCheck,\n} from './warnForUtils';\n\nexport type ReportError = (\n  msgTitle: string,\n  msgInfo?: string,\n  onlyWarns?: boolean,\n) => void;\n\nlet titleDisplayed: string | null = null;\nlet pkgPathDisplayed: string | null = null;\n\nexport function logMessage(\n  msgTitle: string,\n  msgInfo?: string,\n  onlyWarns?: boolean,\n): void {\n  console.error(\n    `${\n      onlyWarns ? chalk.yellow(`⚠ ${msgTitle}`) : chalk.red(`❌ ${msgTitle}`)\n    }${msgInfo ? `: ${msgInfo}` : ''}`,\n  );\n}\n\nexport function createReportError(\n  title: string,\n  pkgPathName: string,\n): ReportError {\n  return function reportError(msgTitle, msgInfo, onlyWarns): void {\n    if (titleDisplayed !== title || pkgPathName !== pkgPathDisplayed) {\n      if (titleDisplayed) console.error();\n      console.error(chalk.cyan(`== ${title} in ${pkgPathName} ==`));\n      titleDisplayed = title;\n      pkgPathDisplayed = pkgPathName;\n    }\n    logMessage(msgTitle, msgInfo, onlyWarns);\n\n    if (!onlyWarns) {\n      // console.trace();\n      process.exitCode = 1;\n    }\n  };\n}\n\nexport function reportNotWarnedFor(\n  reportError: ReportError,\n  onlyWarnsForCheck: OnlyWarnsForCheck,\n): void {\n  const notWarnedFor = onlyWarnsForCheck.getNotWarnedFor();\n  if (notWarnedFor.length > 0) {\n    reportError(\n      `Invalid config in \"${onlyWarnsForCheck.configName}\"`,\n      `no warning was raised for ${notWarnedFor\n        .map((depName) => `\"${depName}\"`)\n        .join(', ')}`,\n      false,\n    );\n  }\n}\n\nexport function reportNotWarnedForMapping(\n  reportError: ReportError,\n  onlyWarnsForMappingCheck: OnlyWarnsForMappingCheck,\n): void {\n  const notWarnedForMapping = onlyWarnsForMappingCheck.getNotWarnedFor();\n  getEntries(notWarnedForMapping).forEach(([depNameOrStar, notWarnedFor]) => {\n    reportError(\n      `Invalid config in \"${onlyWarnsForMappingCheck.configName}\" for \"${depNameOrStar}\"`,\n      `no warning was raised for ${notWarnedFor\n        .map((depName) => `\"${depName}\"`)\n        .join(', ')}`,\n    );\n  });\n}\n","import semver from 'semver';\nimport type { ReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkDuplicateDependencies(\n  reportError: ReportError,\n  pkg: PackageJson,\n  depType: DependencyTypes,\n  searchIn: DependencyTypes[],\n  depPkg: PackageJson,\n  onlyWarnsForCheck: OnlyWarnsForCheck,\n): void {\n  const dependencies = depPkg[depType];\n  if (!dependencies) return;\n\n  const searchInExisting = searchIn.filter((type) => pkg[type]);\n\n  for (const [depKey, range] of Object.entries(dependencies)) {\n    const versionsIn = searchInExisting.filter((type) => pkg[type]![depKey]);\n\n    if (versionsIn.length > 1) {\n      reportError(\n        `${depKey} is present in both devDependencies and dependencies, please place it only in dependencies`,\n      );\n    } else {\n      const versions = versionsIn.map((type) => pkg[type]![depKey]);\n\n      versions.forEach((version, index) => {\n        if (version.startsWith('file:') || range.startsWith('file:')) return;\n        // https://yarnpkg.com/features/workspaces#workspace-ranges-workspace\n        if (\n          version.startsWith('workspace:') ||\n          range.startsWith('workspace:')\n        ) {\n          return;\n        }\n\n        if (\n          semver.satisfies(version, range, {\n            includePrerelease: true,\n          }) ||\n          semver.intersects(version, range, {\n            includePrerelease: true,\n          })\n        ) {\n          return;\n        }\n\n        // Ignore reporting duplicate when there's a resolution for it\n        if (pkg.resolutions?.[depKey]) {\n          return;\n        }\n\n        const versionInType = versionsIn[index];\n\n        reportError(\n          `Invalid duplicate dependency \"${depKey}\"`,\n          `\"${versions[0]}\" (in ${versionInType}) should satisfies \"${range}\" from \"${depPkg.name}\" ${depType}.`,\n          onlyWarnsForCheck.shouldWarnsFor(depKey),\n        );\n      });\n    }\n  }\n}\n","import type { GetDependencyPackageJson } from 'utils/createGetDependencyPackageJson';\nimport {\n  reportNotWarnedForMapping,\n  createReportError,\n} from '../utils/createReportError';\nimport { getKeys } from '../utils/object';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsForMappingCheck } from '../utils/warnForUtils';\nimport { checkDuplicateDependencies } from './checkDuplicateDependencies';\n\nexport function checkDirectDuplicateDependencies(\n  pkg: PackageJson,\n  pkgPathName: string,\n  depType: DependencyTypes,\n  getDependencyPackageJson: GetDependencyPackageJson,\n  onlyWarnsForCheck: OnlyWarnsForMappingCheck,\n  reportErrorNamePrefix = '',\n): void {\n  const reportError = createReportError(\n    `${reportErrorNamePrefix}Direct Duplicate Dependencies`,\n    pkgPathName,\n  );\n\n  const checks: {\n    type: DependencyTypes;\n    searchIn: DependencyTypes[];\n  }[] = [\n    {\n      type: 'devDependencies',\n      searchIn: ['devDependencies', 'dependencies'],\n    },\n    { type: 'dependencies', searchIn: ['devDependencies', 'dependencies'] },\n  ];\n  checks.forEach(({ type, searchIn }) => {\n    if (!pkg[type]) return;\n    getKeys(pkg[type]).forEach((depName) => {\n      const depPkg = getDependencyPackageJson(depName);\n      checkDuplicateDependencies(\n        reportError,\n        pkg,\n        depType,\n        searchIn,\n        depPkg,\n        onlyWarnsForCheck.createFor(depName),\n      );\n    });\n  });\n\n  reportNotWarnedForMapping(reportError, onlyWarnsForCheck);\n}\n","import semver from 'semver';\nimport type { ReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkPeerDependencies(\n  pkg: PackageJson,\n  reportError: ReportError,\n  type: DependencyTypes,\n  allowedPeerIn: DependencyTypes[],\n  depPkg: PackageJson,\n  missingOnlyWarnsForCheck: OnlyWarnsForCheck,\n  invalidOnlyWarnsForCheck: OnlyWarnsForCheck,\n): void {\n  const { peerDependencies, peerDependenciesMeta } = depPkg;\n  if (!peerDependencies) return;\n\n  const allowedPeerInExisting = allowedPeerIn.filter(\n    (allowedPeerInType) => pkg[allowedPeerInType],\n  );\n\n  for (const [peerDepName, range] of Object.entries(peerDependencies)) {\n    const versionsIn = allowedPeerInExisting.filter(\n      (allowedPeerInExistingType) =>\n        pkg[allowedPeerInExistingType]?.[peerDepName],\n    );\n    if (versionsIn.length === 0) {\n      const peerDependenciesMetaPeerDep = peerDependenciesMeta?.[peerDepName];\n      if (peerDependenciesMetaPeerDep?.optional) {\n        return;\n      }\n      reportError(\n        `Missing \"${peerDepName}\" peer dependency from \"${depPkg.name}\" in ${type}`,\n        `it should satisfies \"${range}\" and be in ${allowedPeerIn.join(\n          ' or ',\n        )}`,\n        missingOnlyWarnsForCheck.shouldWarnsFor(peerDepName),\n      );\n    } else {\n      const versions = versionsIn.map(\n        (versionsInType) => pkg[versionsInType]![peerDepName],\n      );\n\n      versions.forEach((version, index) => {\n        if (version.startsWith('npm:')) {\n          return;\n        }\n\n        const minVersionOfVersion = semver.minVersion(version);\n        if (\n          !minVersionOfVersion ||\n          !semver.satisfies(minVersionOfVersion, range, {\n            includePrerelease: true,\n          })\n        ) {\n          reportError(\n            `Invalid \"${peerDepName}\" peer dependency`,\n            `\"${version}\" (in ${allowedPeerInExisting[index]}) should satisfies \"${range}\" from \"${depPkg.name}\" ${type}`,\n            invalidOnlyWarnsForCheck.shouldWarnsFor(peerDepName),\n          );\n        }\n      });\n    }\n  }\n}\n","import type { GetDependencyPackageJson } from 'utils/createGetDependencyPackageJson';\nimport {\n  createReportError,\n  reportNotWarnedForMapping,\n} from '../utils/createReportError';\nimport { getKeys } from '../utils/object';\nimport type {\n  DependencyTypes,\n  PackageJson,\n  RegularDependencyTypes,\n} from '../utils/packageTypes';\nimport type { OnlyWarnsForMappingCheck } from '../utils/warnForUtils';\nimport { checkPeerDependencies } from './checkPeerDependencies';\n\nconst regularDependencyTypes: RegularDependencyTypes[] = [\n  'devDependencies',\n  'dependencies',\n  'optionalDependencies',\n];\n\nconst getAllowedPeerInFromType = (\n  depPkgType: RegularDependencyTypes,\n  isLibrary: boolean,\n): DependencyTypes[] => {\n  switch (depPkgType) {\n    case 'devDependencies':\n      return ['devDependencies', 'dependencies'];\n    case 'dependencies':\n      return isLibrary\n        ? ['dependencies', 'peerDependencies']\n        : ['devDependencies', 'dependencies'];\n    case 'optionalDependencies':\n      return isLibrary\n        ? ['dependencies', 'optionalDependencies', 'peerDependencies']\n        : ['devDependencies', 'dependencies'];\n  }\n};\n\nexport function checkDirectPeerDependencies(\n  isLibrary: boolean,\n  pkg: PackageJson,\n  pkgPathName: string,\n  getDependencyPackageJson: GetDependencyPackageJson,\n  missingOnlyWarnsForCheck: OnlyWarnsForMappingCheck,\n  invalidOnlyWarnsForCheck: OnlyWarnsForMappingCheck,\n): void {\n  const reportError = createReportError('Peer Dependencies', pkgPathName);\n\n  regularDependencyTypes.forEach((depType) => {\n    if (!pkg[depType]) return;\n    getKeys(pkg[depType]).forEach((depName) => {\n      const depPkg = getDependencyPackageJson(depName);\n\n      if (depPkg.peerDependencies) {\n        checkPeerDependencies(\n          pkg,\n          reportError,\n          depType,\n          getAllowedPeerInFromType(depType, isLibrary),\n          depPkg,\n          missingOnlyWarnsForCheck.createFor(depName),\n          invalidOnlyWarnsForCheck.createFor(depName),\n        );\n      }\n    });\n  });\n\n  reportNotWarnedForMapping(reportError, missingOnlyWarnsForCheck);\n  if (missingOnlyWarnsForCheck !== invalidOnlyWarnsForCheck) {\n    reportNotWarnedForMapping(reportError, invalidOnlyWarnsForCheck);\n  }\n}\n","/* eslint-disable complexity */\nimport semver from 'semver';\nimport type { GetDependencyPackageJson } from '../utils/createGetDependencyPackageJson';\nimport {\n  createReportError,\n  reportNotWarnedFor,\n} from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsFor, OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport interface CheckExactVersionsOptions {\n  getDependencyPackageJson?: GetDependencyPackageJson;\n  onlyWarnsForCheck: OnlyWarnsForCheck;\n  internalExactVersionsIgnore?: OnlyWarnsFor;\n  tryToAutoFix?: boolean;\n}\n\nconst isVersionRange = (version: string): boolean =>\n  version.startsWith('^') || version.startsWith('~');\n\nexport function checkExactVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  types: DependencyTypes[],\n  {\n    getDependencyPackageJson,\n    onlyWarnsForCheck,\n    internalExactVersionsIgnore,\n    tryToAutoFix = false,\n  }: CheckExactVersionsOptions,\n): void {\n  const reportError = createReportError('Exact versions', pkgPathName);\n\n  types.forEach((type) => {\n    const pkgDependencies = pkg[type];\n    if (!pkgDependencies) return;\n\n    for (const [dependencyName, versionConst] of Object.entries(\n      pkgDependencies,\n    )) {\n      let version = versionConst;\n      if (version.startsWith('npm:')) {\n        const match = /^npm:.*@(.*)$/.exec(version);\n        if (!match) throw new Error(`Invalid version match: ${version}`);\n        const [, realVersion] = match;\n        version = realVersion;\n      }\n\n      if (isVersionRange(version)) {\n        if (internalExactVersionsIgnore?.includes(dependencyName)) {\n          return;\n        }\n        const shouldOnlyWarn = onlyWarnsForCheck.shouldWarnsFor(dependencyName);\n        if (!shouldOnlyWarn && tryToAutoFix && getDependencyPackageJson) {\n          let resolvedDep;\n          try {\n            resolvedDep = getDependencyPackageJson(dependencyName);\n          } catch {\n            resolvedDep = null;\n          }\n          if (!resolvedDep || !resolvedDep.version) {\n            reportError(\n              `Unexpected range dependency in \"${type}\" for \"${dependencyName}\"`,\n              `expecting \"${version}\" to be exact, autofix failed to resolve \"${dependencyName}\".`,\n              shouldOnlyWarn,\n            );\n          } else if (\n            !semver.satisfies(resolvedDep.version, version, {\n              includePrerelease: true,\n            })\n          ) {\n            reportError(\n              `Unexpected range dependency in \"${type}\" for \"${dependencyName}\"`,\n              `expecting \"${version}\" to be exact, autofix failed as \"${dependencyName}\"'s resolved version is \"${resolvedDep.version}\" and doesn't satisfies \"${version}\".`,\n              shouldOnlyWarn,\n            );\n          } else {\n            pkgDependencies[dependencyName] = resolvedDep.version;\n          }\n        } else {\n          reportError(\n            `Unexpected range dependency in \"${type}\" for \"${dependencyName}\"`,\n            `expecting \"${version}\" to be exact \"${version.slice(1)}\".`,\n            shouldOnlyWarn,\n          );\n        }\n      }\n    }\n  });\n\n  reportNotWarnedFor(reportError, onlyWarnsForCheck);\n}\n","import { createReportError } from '../utils/createReportError';\nimport { getKeys } from '../utils/object';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkIdenticalVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  deps: Record<string, string[] | Partial<Record<DependencyTypes, string[]>>>,\n  onlyWarnsForCheck?: OnlyWarnsForCheck,\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError('Identical Versions', pkgPathName);\n\n  getKeys(deps).forEach((depKey) => {\n    const version = pkgDependencies[depKey];\n    if (!version) {\n      reportError(`Unexpected missing ${type} for \"${depKey}\".`);\n      return;\n    }\n\n    const depConfigArrayOrObject = deps[depKey];\n    const depConfig = Array.isArray(depConfigArrayOrObject)\n      ? { [type]: depConfigArrayOrObject }\n      : depConfigArrayOrObject;\n\n    getKeys(depConfig).forEach((depKeyType) => {\n      const pkgDependenciesType = pkg[depKeyType] || {};\n      depConfig[depKeyType]?.forEach((depKeyIdentical) => {\n        const value = pkgDependenciesType[depKeyIdentical];\n        if (!value) {\n          reportError(\n            `Missing \"${depKeyIdentical}\" in ${depKeyType}`,\n            `it should be \"${version}\".`,\n            onlyWarnsForCheck?.shouldWarnsFor(depKey),\n          );\n        }\n\n        if (value !== version) {\n          reportError(\n            `Invalid \"${depKeyIdentical}\" in ${depKeyType}`,\n            `expecting \"${value}\" be \"${version}\".`,\n            onlyWarnsForCheck?.shouldWarnsFor(depKey),\n          );\n        }\n      });\n    });\n  });\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkIdenticalVersionsThanDependency(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  depKeys: string[],\n  depPkg: PackageJson,\n  dependencies: PackageJson[DependencyTypes] = {},\n  onlyWarnsForCheck?: OnlyWarnsForCheck,\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError(\n    `Same Versions than ${depPkg.name}`,\n    pkgPathName,\n  );\n\n  depKeys.forEach((depKey) => {\n    const version = dependencies[depKey];\n    if (!version) {\n      reportError(\n        `Unexpected missing dependency \"${depKey}\" in \"${depPkg.name}\".`,\n      );\n      return;\n    }\n\n    if (version.startsWith('^') || version.startsWith('~')) {\n      reportError(\n        `Unexpected range dependency in \"${depPkg.name}\" for \"${depKey}\"`,\n        'perhaps use checkSatisfiesVersionsFromDependency() instead.',\n      );\n      return;\n    }\n\n    const value = pkgDependencies[depKey];\n\n    if (!value) {\n      reportError(\n        `Missing \"${depKey}\" in ${type}`,\n        `expecting to be \"${version}\".`,\n        onlyWarnsForCheck?.shouldWarnsFor(depKey),\n      );\n    }\n\n    if (value !== version) {\n      reportError(\n        `Invalid \"${depKey}\" in ${type}`,\n        `expecting \"${value}\" to be \"${version}\".`,\n        onlyWarnsForCheck?.shouldWarnsFor(depKey),\n      );\n    }\n  });\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport function checkNoDependencies(\n  pkg: PackageJson,\n  pkgPath: string,\n  type: DependencyTypes = 'dependencies',\n  moveToSuggestion: DependencyTypes = 'devDependencies',\n): void {\n  const pkgDependencies = pkg[type];\n  if (!pkgDependencies) return;\n\n  const reportError = createReportError('No dependencies', pkgPath);\n  reportError(\n    `Unexpected ${type}`,\n    `you should move them in ${moveToSuggestion}`,\n  );\n}\n","import type { GetDependencyPackageJson } from '../utils/createGetDependencyPackageJson';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson } from '../utils/packageTypes';\n\nexport type CheckResolutionMessage = (\n  depKey: string,\n  resolutionExplainedMessage: string,\n  checkMessageHelpers: {\n    getDependencyPackageJson: GetDependencyPackageJson;\n  },\n) => string | undefined;\n\nexport function checkResolutionsHasExplanation(\n  pkg: PackageJson,\n  pkgPathName: string,\n  checkMessage: CheckResolutionMessage,\n  getDependencyPackageJson: GetDependencyPackageJson,\n): void {\n  const pkgResolutions = pkg.resolutions || {};\n  const pkgResolutionsExplained = pkg.resolutionsExplained || {};\n  const reportError = createReportError(\n    'Resolutions has explanation',\n    pkgPathName,\n  );\n\n  Object.keys(pkgResolutions).forEach((depKey) => {\n    if (!pkgResolutionsExplained[depKey]) {\n      reportError(`Missing \"${depKey}\" in resolutionsExplained.`);\n    }\n  });\n\n  Object.keys(pkgResolutionsExplained).forEach((depKey) => {\n    if (!pkgResolutions[depKey]) {\n      reportError(\n        `Found \"${depKey}\" in resolutionsExplained but not in resolutions.`,\n      );\n    } else {\n      const error = checkMessage(depKey, pkgResolutionsExplained[depKey], {\n        getDependencyPackageJson,\n      });\n      if (error) {\n        reportError(\n          `Invalid message for \"${depKey}\" in resolutionsExplained`,\n          `${error}.`,\n        );\n      }\n    }\n  });\n}\n","import semver from 'semver';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson } from '../utils/packageTypes';\n\nexport interface CheckResolutionsVersionsMatchOptions {\n  tryToAutoFix?: boolean;\n}\n\nexport function checkResolutionsVersionsMatch(\n  pkg: PackageJson,\n  pkgPathName: string,\n  { tryToAutoFix }: CheckResolutionsVersionsMatchOptions = {},\n): void {\n  const pkgResolutions = pkg.resolutions || {};\n  const reportError = createReportError(\n    'Resolutions match other dependencies',\n    pkgPathName,\n  );\n\n  Object.entries(pkgResolutions).forEach(([depName, resolutionDepVersion]) => {\n    (['dependencies', 'devDependencies'] as const).forEach((depType) => {\n      const range = pkg?.[depType]?.[depName];\n\n      if (!range) return;\n\n      if (\n        !semver.satisfies(resolutionDepVersion, range, {\n          includePrerelease: true,\n        })\n      ) {\n        if (tryToAutoFix) {\n          pkg[depType]![depName] = resolutionDepVersion;\n        } else {\n          reportError(\n            `Invalid \"${depName}\" in ${depType}`,\n            `expecting \"${range}\" be \"${resolutionDepVersion}\" from resolutions.`,\n          );\n        }\n      }\n    });\n  });\n}\n","import semver from 'semver';\nimport { createReportError } from '../utils/createReportError';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkSatisfiesVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  dependenciesRanges: Record<string, string>,\n  onlyWarnsForCheck?: OnlyWarnsForCheck,\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError('Satisfies Versions', pkgPathName);\n\n  Object.entries(dependenciesRanges).forEach(([depKey, range]) => {\n    const version = pkgDependencies[depKey];\n\n    if (!version) {\n      reportError(\n        `Missing \"${depKey}\" in ${type}`,\n        `should satisfies \"${range}\".`,\n        onlyWarnsForCheck?.shouldWarnsFor(depKey),\n      );\n    } else {\n      const minVersionOfVersion = semver.minVersion(version);\n      if (\n        !minVersionOfVersion ||\n        !semver.satisfies(minVersionOfVersion, range, {\n          includePrerelease: true,\n        })\n      ) {\n        reportError(\n          `Invalid \"${depKey}\" in ${type}`,\n          `\"${version}\" (in \"${depKey}\") should satisfies \"${range}\".`,\n          onlyWarnsForCheck?.shouldWarnsFor(depKey),\n        );\n      }\n    }\n  });\n}\n","import semver from 'semver';\nimport { createReportError } from '../utils/createReportError';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkSatisfiesVersionsFromDependency(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  depKeys: string[],\n  depPkg: PackageJson,\n  dependencies: PackageJson[DependencyTypes] = {},\n  onlyWarnsForCheck?: OnlyWarnsForCheck,\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError(\n    `Satisfies Versions from ${depPkg.name}`,\n    pkgPathName,\n  );\n\n  depKeys.forEach((depKey) => {\n    const range = dependencies[depKey];\n    if (!range) {\n      reportError(\n        `Unexpected missing dependency \"${depKey}\" in \"${depPkg.name}\".`,\n      );\n      return;\n    }\n\n    const version = pkgDependencies[depKey];\n\n    if (!version) {\n      reportError(\n        `Missing \"${depKey}\" in ${type}`,\n        `should satisfies \"${range}\" from \"${depPkg.name}\" ${depKey}.`,\n        onlyWarnsForCheck?.shouldWarnsFor(depKey),\n      );\n    } else {\n      const minVersionOfVersion = semver.minVersion(version);\n      if (\n        !minVersionOfVersion ||\n        !semver.satisfies(minVersionOfVersion, range, {\n          includePrerelease: true,\n        })\n      ) {\n        reportError(\n          `Invalid \"${depKey}\" in ${type}`,\n          `\"${version}\" (in \"${depKey}\") should satisfies \"${range}\" from \"${depPkg.name}\" ${depKey}.`,\n          onlyWarnsForCheck?.shouldWarnsFor(depKey),\n        );\n      }\n    }\n  });\n}\n","import { readFileSync, writeFileSync } from 'fs';\nimport type { PackageJson } from './packageTypes';\n\nexport type GetDependencyPackageJson = (pkgDepName: string) => PackageJson;\n\nexport function readPkgJson(packagePath: string): PackageJson {\n  return JSON.parse(readFileSync(packagePath, 'utf8')) as PackageJson;\n}\n\nexport function writePkgJson(packagePath: string, pkg: PackageJson): void {\n  writeFileSync(packagePath, JSON.stringify(pkg, null, 2));\n}\n\n/** @internal */\nexport function internalLoadPackageJsonFromNodeModules(\n  pkgDepName: string,\n  pkgDirname: string,\n): PackageJson {\n  // eslint-disable-next-line import/no-dynamic-require, @typescript-eslint/no-var-requires\n  return require(require.resolve(`${pkgDepName}/package.json`, {\n    paths: [pkgDirname],\n  })) as PackageJson;\n}\n\ntype NodeModulesPackagePathCache = Map<string, PackageJson>;\n\ninterface CreateGetDependencyPackageJsonOptions {\n  pkgDirname: string;\n  nodeModulesPackagePathCache?: NodeModulesPackagePathCache;\n  /** @internal */\n  internalCustomLoadPackageJsonFromNodeModules?: typeof internalLoadPackageJsonFromNodeModules;\n  /** @internal */\n  internalReadPkgJson?: typeof readPkgJson;\n}\n\nexport function createGetDependencyPackageJson({\n  pkgDirname,\n  nodeModulesPackagePathCache = new Map<string, PackageJson>(),\n  internalCustomLoadPackageJsonFromNodeModules = internalLoadPackageJsonFromNodeModules,\n  internalReadPkgJson = readPkgJson,\n}: CreateGetDependencyPackageJsonOptions): GetDependencyPackageJson {\n  return (pkgDepName) => {\n    const existing = nodeModulesPackagePathCache.get(pkgDepName);\n    if (existing) return existing;\n    let pkg: PackageJson;\n    if (pkgDepName.startsWith('.')) {\n      const packagePath = `${pkgDirname}/${pkgDepName}/package.json`;\n      pkg = internalReadPkgJson(packagePath);\n    } else {\n      try {\n        pkg = internalCustomLoadPackageJsonFromNodeModules(\n          pkgDepName,\n          pkgDirname,\n        );\n      } catch (err: unknown) {\n        if (!(err instanceof Error)) throw err;\n\n        if (\n          (err as NodeJS.ErrnoException).code !==\n          'ERR_PACKAGE_PATH_NOT_EXPORTED'\n        ) {\n          throw err;\n        }\n\n        const match = / in (.*[/\\\\]package.json)($|\\simported from)/.exec(\n          err.message,\n        );\n\n        if (match) {\n          const [, matchPackageJson] = match;\n          pkg = internalReadPkgJson(matchPackageJson);\n        } else {\n          throw err;\n        }\n      }\n    }\n    nodeModulesPackagePathCache.set(pkgDepName, pkg);\n    return pkg;\n  };\n}\n","import { getEntries } from './object';\n\nexport type OnlyWarnsFor = string[];\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport type OnlyWarnsForDependencyMapping = Record<string | '*', OnlyWarnsFor>;\nexport type OnlyWarnsForOptionalDependencyMapping =\n  | undefined\n  | OnlyWarnsFor\n  | OnlyWarnsForDependencyMapping;\n\nexport interface OnlyWarnsForCheck {\n  configName: string;\n  getNotWarnedFor: () => string[];\n  shouldWarnsFor: (dependencyName: string) => boolean;\n}\n\nexport interface OnlyWarnsForMappingCheck {\n  configName: string;\n  getNotWarnedFor: () => Record<string, string[]>;\n  createFor: (dependencyName: string) => OnlyWarnsForCheck;\n}\n\nexport const createOnlyWarnsForArrayCheck = (\n  configName: string,\n  onlyWarnsFor: OnlyWarnsFor = [],\n): OnlyWarnsForCheck => {\n  const notWarnedFor = new Set(onlyWarnsFor);\n  return {\n    configName,\n    getNotWarnedFor: () => [...notWarnedFor],\n    shouldWarnsFor(dependencyName) {\n      if (onlyWarnsFor.includes(dependencyName)) {\n        notWarnedFor.delete(dependencyName);\n        return true;\n      }\n      return false;\n    },\n  };\n};\n\nconst isMapping = (\n  onlyWarnsFor: OnlyWarnsForOptionalDependencyMapping,\n): onlyWarnsFor is OnlyWarnsForDependencyMapping => {\n  return typeof onlyWarnsFor === 'object' && !Array.isArray(onlyWarnsFor);\n};\n\nexport const createOnlyWarnsForMappingCheck = (\n  configName: string,\n  onlyWarnsFor: OnlyWarnsForOptionalDependencyMapping,\n): OnlyWarnsForMappingCheck => {\n  if (isMapping(onlyWarnsFor)) {\n    const notWarnedFor = Object.fromEntries(\n      getEntries(onlyWarnsFor).map(([entryKey, entryValue]) => [\n        entryKey,\n        new Set(entryValue),\n      ]),\n    );\n    return {\n      configName,\n      getNotWarnedFor: () =>\n        Object.fromEntries(\n          getEntries(notWarnedFor)\n            .filter(([key, set]) => set.size > 0)\n            .map(([key, set]) => [key, [...set]]),\n        ),\n      createFor(dependencyNameLevel1) {\n        return {\n          configName,\n          getNotWarnedFor() {\n            throw new Error('Invalid call to getNotWarnedFor()');\n          },\n          shouldWarnsFor(dependencyName) {\n            if (onlyWarnsFor['*']?.includes(dependencyName)) {\n              notWarnedFor['*'].delete(dependencyName);\n              return true;\n            }\n            if (onlyWarnsFor[dependencyNameLevel1]?.includes(dependencyName)) {\n              notWarnedFor[dependencyNameLevel1].delete(dependencyName);\n              return true;\n            }\n            return false;\n          },\n        };\n      },\n    };\n  }\n\n  const arrayOnlyWarnsForCheck = createOnlyWarnsForArrayCheck(\n    configName,\n    onlyWarnsFor,\n  );\n  return {\n    configName,\n    getNotWarnedFor: (): Record<string, string[]> => {\n      const notWarnedFor = arrayOnlyWarnsForCheck.getNotWarnedFor();\n      if (notWarnedFor.length > 0) {\n        return { '*': notWarnedFor };\n      }\n      return {};\n    },\n    createFor() {\n      return {\n        configName,\n        getNotWarnedFor() {\n          throw new Error('Invalid call to getNotWarnedFor()');\n        },\n        shouldWarnsFor(dependencyName) {\n          return arrayOnlyWarnsForCheck.shouldWarnsFor(dependencyName);\n        },\n      };\n    },\n  };\n};\n","/* eslint-disable complexity */\n/* eslint-disable max-lines */\nimport path from 'path';\nimport util from 'util';\nimport { checkDirectDuplicateDependencies } from './checks/checkDirectDuplicateDependencies';\nimport { checkDirectPeerDependencies } from './checks/checkDirectPeerDependencies';\nimport { checkExactVersions } from './checks/checkExactVersions';\nimport { checkIdenticalVersions } from './checks/checkIdenticalVersions';\nimport { checkIdenticalVersionsThanDependency } from './checks/checkIdenticalVersionsThanDependency';\nimport { checkNoDependencies } from './checks/checkNoDependencies';\nimport type { CheckResolutionMessage } from './checks/checkResolutionsHasExplanation';\nimport { checkResolutionsHasExplanation } from './checks/checkResolutionsHasExplanation';\nimport { checkResolutionsVersionsMatch } from './checks/checkResolutionsVersionsMatch';\nimport { checkSatisfiesVersions } from './checks/checkSatisfiesVersions';\nimport { checkSatisfiesVersionsFromDependency } from './checks/checkSatisfiesVersionsFromDependency';\nimport type { GetDependencyPackageJson } from './utils/createGetDependencyPackageJson';\nimport {\n  createGetDependencyPackageJson,\n  readPkgJson,\n  writePkgJson,\n} from './utils/createGetDependencyPackageJson';\nimport { getEntries } from './utils/object';\nimport type {\n  DependencyName,\n  DependencyTypes,\n  PackageJson,\n} from './utils/packageTypes';\nimport type {\n  OnlyWarnsForOptionalDependencyMapping,\n  OnlyWarnsFor,\n  OnlyWarnsForDependencyMapping,\n} from './utils/warnForUtils';\nimport {\n  createOnlyWarnsForArrayCheck,\n  createOnlyWarnsForMappingCheck,\n} from './utils/warnForUtils';\n\nexport interface CreateCheckPackageOptions {\n  /** @deprecated pass in cli --fix instead */\n  tryToAutoFix?: boolean;\n  /** @internal */\n  internalWorkspacePkgDirectoryPath?: string;\n}\n\nexport interface CheckDirectPeerDependenciesOptions {\n  isLibrary?: boolean;\n  /** @deprecated use missingOnlyWarnsFor or invalidOnlyWarnsFor */\n  onlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  missingOnlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  invalidOnlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  internalMissingConfigName?: string;\n  internalInvalidConfigName?: string;\n}\n\nexport interface CheckDirectDuplicateDependenciesOptions {\n  onlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  internalConfigName?: string;\n}\n\nexport interface OnlyWarnsForInPackageCheckPackageRecommendedOption {\n  exactVersions: OnlyWarnsFor;\n}\n\nexport interface OnlyWarnsForInDependencyCheckPackageRecommendedOption {\n  duplicateDirectDependency: OnlyWarnsFor;\n  missingPeerDependency: OnlyWarnsFor;\n  invalidPeerDependencyVersion: OnlyWarnsFor;\n}\n\nexport type OnlyWarnsForInDependenciesCheckPackageRecommendedOption = Record<\n  // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n  '*' | string,\n  OnlyWarnsForInDependencyCheckPackageRecommendedOption\n>;\n\nexport interface CheckRecommendedOptions {\n  isLibrary?: boolean;\n  /** default is true for libraries, false otherwise */\n  allowRangeVersionsInDependencies?: boolean;\n  onlyWarnsForInPackage?: OnlyWarnsForInPackageCheckPackageRecommendedOption;\n  onlyWarnsForInDependencies?: OnlyWarnsForInDependenciesCheckPackageRecommendedOption;\n  /** @deprecated use onlyWarnsForInDependencies option */\n  peerDependenciesOnlyWarnsFor?: OnlyWarnsFor;\n  /** @deprecated use onlyWarnsForInDependencies option */\n  directDuplicateDependenciesOnlyWarnsFor?: OnlyWarnsFor;\n  /** @deprecated use onlyWarnsForInPackage option */\n  exactVersionsOnlyWarnsFor?: OnlyWarnsFor;\n  /** @internal */\n  internalExactVersionsIgnore?: OnlyWarnsFor;\n  /** function to check the value in the \"resolutionExplained\" key in package.json */\n  checkResolutionMessage?: CheckResolutionMessage;\n}\n\nexport interface CheckExactVersionsOptions {\n  allowRangeVersionsInDependencies?: boolean;\n  onlyWarnsFor?: OnlyWarnsFor;\n  /** @internal */\n  internalExactVersionsIgnore?: OnlyWarnsFor;\n}\n\nexport interface CheckPackageApi {\n  run: () => Promise<void>;\n\n  /** @internal */\n  pkg: PackageJson;\n  /** @internal */\n  pkgDirname: string;\n  /** @internal */\n  pkgPathName: string;\n  /** @internal */\n  getDependencyPackageJson: GetDependencyPackageJson;\n\n  checkExactVersions: (options?: CheckExactVersionsOptions) => CheckPackageApi;\n\n  checkResolutionsVersionsMatch: () => CheckPackageApi;\n\n  checkExactVersionsForLibrary: (\n    options?: CheckExactVersionsOptions,\n  ) => CheckPackageApi;\n\n  checkExactDevVersions: (\n    options?: CheckExactVersionsOptions,\n  ) => CheckPackageApi;\n\n  checkNoDependencies: (\n    type?: DependencyTypes,\n    moveToSuggestion?: DependencyTypes,\n  ) => CheckPackageApi;\n\n  /**\n   * @example\n   * ```\n   * .checkDirectPeerDependencies({\n   *   invalidOnlyWarnsFor: ['semver'],\n   * })\n   * ```\n   */\n  checkDirectPeerDependencies: (\n    options?: CheckDirectPeerDependenciesOptions,\n  ) => CheckPackageApi;\n\n  /**\n   * @example\n   * ```\n   * .checkDirectDuplicateDependencies({\n   *   invalidOnlyWarnsFor: { '*': 'type-fest' },\n   * })\n   * ```\n   */\n  checkDirectDuplicateDependencies: (\n    options?: CheckDirectDuplicateDependenciesOptions,\n  ) => CheckPackageApi;\n\n  checkResolutionsHasExplanation: (\n    checkMessage?: CheckResolutionMessage,\n  ) => CheckPackageApi;\n\n  checkRecommended: (options?: CheckRecommendedOptions) => CheckPackageApi;\n\n  /**\n   * @example\n   * Check that your package.json contains the same version of @babel/core than react-scripts, both in resolutions and devDependencies\n   * ```\n   * .checkIdenticalVersionsThanDependency('react-scripts', {\n   *   resolutions: ['@babel/core'],\n   *   devDependencies: ['@babel/core'],\n   * })\n   * ```\n   */\n  checkIdenticalVersionsThanDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n\n  checkIdenticalVersionsThanDevDependencyOfDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n\n  /**\n   * Check that your package.json dependencies specifically satisfies the range passed in config\n   *\n   * @example\n   * ```\n   * .checkSatisfiesVersions({\n   *   devDependencies: {\n   *     eslint: '^8.0.0'\n   *   },\n   * })\n   * ```\n   */\n  checkSatisfiesVersions: (\n    dependencies: Partial<\n      Record<DependencyTypes, Record<DependencyName, string>>\n    >,\n  ) => CheckPackageApi;\n\n  /**\n   * Check that your package.json dependencies specifically satisfies the range set in another dependencies\n   * @example\n   * ```\n   * .checkSatisfiesVersionsFromDependency('@pob/eslint-config-typescript', {\n   *   devDependencies: [\n   *     '@typescript-eslint/eslint-plugin',\n   *     '@typescript-eslint/parser',\n   *   ],\n   * })\n   * ```\n   */\n  checkSatisfiesVersionsFromDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n\n  checkSatisfiesVersionsInDevDependenciesOfDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n\n  /**\n   * Check that your package.json dependencies have the exact same version that another dependency also present in your package.json\n   * @example\n   * The react-dom version should match react, so this check will ensure it does\n   * ```\n   * .checkIdenticalVersions({\n   *   dependencies: {\n   *     react: {\n   *       dependencies: ['react-dom'],\n   *       devDependencies: ['react-test-renderer'],\n   *     },\n   *   },\n   * })\n   * ```\n   */\n  checkIdenticalVersions: (dependencies: {\n    resolutions?: Record<string, string[]>;\n    dependencies?: Record<string, string[]>;\n    devDependencies?: Record<string, string[]>;\n  }) => CheckPackageApi;\n\n  checkSatisfiesVersionsBetweenDependencies: (\n    depName1: string,\n    depName2: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n}\n\nexport function createCheckPackage(\n  pkgDirectoryPath = '.',\n  {\n    tryToAutoFix = false,\n    internalWorkspacePkgDirectoryPath,\n  }: CreateCheckPackageOptions = {},\n): CheckPackageApi {\n  const pkgDirname = path.resolve(pkgDirectoryPath);\n  const pkgPath = `${pkgDirname}/package.json`;\n  const pkgPathName = `${pkgDirectoryPath}/package.json`;\n  const pkg = readPkgJson(pkgPath);\n  const copyPkg: PackageJson = JSON.parse(JSON.stringify(pkg)) as PackageJson;\n\n  if (\n    process.env.CI &&\n    process.env.CHECK_PACKAGE_DEPENDENCIES_ENABLE_CI_AUTOFIX !== 'true'\n  ) {\n    tryToAutoFix = false;\n  }\n\n  if (process.argv.slice(2).includes('--fix')) {\n    tryToAutoFix = true;\n  }\n\n  const writePackageIfChanged = (): void => {\n    if (!tryToAutoFix) return;\n    if (util.isDeepStrictEqual(pkg, copyPkg)) return;\n    writePkgJson(pkgPath, pkg);\n  };\n\n  const getDependencyPackageJson = createGetDependencyPackageJson({\n    pkgDirname,\n  });\n\n  let runCalled = false;\n\n  if (!internalWorkspacePkgDirectoryPath) {\n    process.on('beforeExit', () => {\n      if (!runCalled) {\n        console.warn(\n          '\\nFor future compatibility, call .run() and await the result.',\n        );\n      }\n    });\n  }\n\n  return {\n    run() {\n      runCalled = true;\n      return Promise.resolve();\n    },\n\n    pkg,\n    pkgDirname,\n    pkgPathName,\n    getDependencyPackageJson,\n    checkExactVersions({\n      onlyWarnsFor,\n      internalExactVersionsIgnore,\n      allowRangeVersionsInDependencies = true,\n    } = {}) {\n      const onlyWarnsForCheck = createOnlyWarnsForArrayCheck(\n        'checkExactVersions.onlyWarnsFor',\n        onlyWarnsFor,\n      );\n      checkExactVersions(\n        pkg,\n        pkgPathName,\n        !allowRangeVersionsInDependencies\n          ? ['dependencies', 'devDependencies', 'resolutions']\n          : ['devDependencies', 'resolutions'],\n        {\n          onlyWarnsForCheck,\n          internalExactVersionsIgnore,\n          getDependencyPackageJson,\n          tryToAutoFix,\n        },\n      );\n      writePackageIfChanged();\n      return this;\n    },\n\n    checkResolutionsVersionsMatch() {\n      checkResolutionsVersionsMatch(pkg, pkgPathName, {\n        tryToAutoFix,\n      });\n      writePackageIfChanged();\n      return this;\n    },\n\n    /** @deprecated use checkExactVersions({ allowRangeVersionsInDependencies: true })  */\n    checkExactVersionsForLibrary({ onlyWarnsFor } = {}) {\n      const onlyWarnsForCheck = createOnlyWarnsForArrayCheck(\n        'checkExactVersionsForLibrary.onlyWarnsFor',\n        onlyWarnsFor,\n      );\n      checkExactVersions(pkg, pkgPathName, ['devDependencies', 'resolutions'], {\n        onlyWarnsForCheck,\n        tryToAutoFix,\n        getDependencyPackageJson,\n      });\n      writePackageIfChanged();\n      return this;\n    },\n\n    checkExactDevVersions({ onlyWarnsFor } = {}) {\n      const onlyWarnsForCheck = createOnlyWarnsForArrayCheck(\n        'checkExactDevVersions.onlyWarnsFor',\n        onlyWarnsFor,\n      );\n      checkExactVersions(pkg, pkgPathName, ['devDependencies'], {\n        onlyWarnsForCheck,\n        tryToAutoFix,\n        getDependencyPackageJson,\n      });\n      writePackageIfChanged();\n      return this;\n    },\n\n    checkNoDependencies(\n      type = 'dependencies',\n      moveToSuggestion = 'devDependencies',\n    ) {\n      checkNoDependencies(pkg, pkgPathName, type, moveToSuggestion);\n      return this;\n    },\n\n    checkDirectPeerDependencies({\n      isLibrary = false,\n      onlyWarnsFor: deprecatedOnlyWarnsFor,\n      missingOnlyWarnsFor = deprecatedOnlyWarnsFor,\n      invalidOnlyWarnsFor = deprecatedOnlyWarnsFor,\n      internalMissingConfigName = deprecatedOnlyWarnsFor\n        ? 'onlyWarnsFor'\n        : 'missingOnlyWarnsFor',\n      internalInvalidConfigName = deprecatedOnlyWarnsFor\n        ? 'onlyWarnsFor'\n        : 'invalidOnlyWarnsFor',\n    } = {}) {\n      const missingOnlyWarnsForCheck = createOnlyWarnsForMappingCheck(\n        internalMissingConfigName,\n        missingOnlyWarnsFor,\n      );\n      const invalidOnlyWarnsForCheck =\n        internalInvalidConfigName === internalMissingConfigName\n          ? missingOnlyWarnsForCheck\n          : createOnlyWarnsForMappingCheck(\n              internalInvalidConfigName,\n              invalidOnlyWarnsFor,\n            );\n      checkDirectPeerDependencies(\n        isLibrary,\n        pkg,\n        pkgPathName,\n        getDependencyPackageJson,\n        missingOnlyWarnsForCheck,\n        invalidOnlyWarnsForCheck,\n      );\n      return this;\n    },\n\n    checkDirectDuplicateDependencies({\n      onlyWarnsFor,\n      internalConfigName = 'onlyWarnsFor',\n    } = {}) {\n      checkDirectDuplicateDependencies(\n        pkg,\n        pkgPathName,\n        'dependencies',\n        getDependencyPackageJson,\n        createOnlyWarnsForMappingCheck(internalConfigName, onlyWarnsFor),\n      );\n      return this;\n    },\n\n    checkResolutionsHasExplanation(\n      checkMessage: CheckResolutionMessage = (depKey, message) => undefined,\n    ) {\n      checkResolutionsHasExplanation(\n        pkg,\n        pkgPathName,\n        checkMessage,\n        getDependencyPackageJson,\n      );\n      return this;\n    },\n\n    checkRecommended({\n      isLibrary = false,\n      onlyWarnsForInPackage,\n      onlyWarnsForInDependencies,\n      allowRangeVersionsInDependencies = isLibrary,\n      peerDependenciesOnlyWarnsFor,\n      directDuplicateDependenciesOnlyWarnsFor,\n      exactVersionsOnlyWarnsFor,\n      internalExactVersionsIgnore,\n      checkResolutionMessage,\n    } = {}) {\n      let internalMissingPeerDependenciesOnlyWarnsFor: OnlyWarnsForOptionalDependencyMapping =\n        peerDependenciesOnlyWarnsFor;\n      let internalInvalidPeerDependenciesOnlyWarnsFor: OnlyWarnsForOptionalDependencyMapping =\n        peerDependenciesOnlyWarnsFor;\n      let internalDirectDuplicateDependenciesOnlyWarnsFor: OnlyWarnsForOptionalDependencyMapping =\n        directDuplicateDependenciesOnlyWarnsFor;\n\n      if (onlyWarnsForInPackage) {\n        if (exactVersionsOnlyWarnsFor) {\n          console.warn(\n            'Ignoring \"exactVersionsOnlyWarnsFor\" as \"onlyWarnsForInPackage\" is used.',\n          );\n        }\n        exactVersionsOnlyWarnsFor = onlyWarnsForInPackage.exactVersions || [];\n      }\n      if (onlyWarnsForInDependencies) {\n        if (peerDependenciesOnlyWarnsFor) {\n          console.warn(\n            'Ignoring \"peerDependenciesOnlyWarnsFor\" as \"onlyWarnsFor\" is used.',\n          );\n        }\n        if (directDuplicateDependenciesOnlyWarnsFor) {\n          console.warn(\n            'Ignoring \"directDuplicateDependenciesOnlyWarnsFor\" as \"onlyWarnsFor\" is used.',\n          );\n        }\n\n        internalDirectDuplicateDependenciesOnlyWarnsFor = {};\n        internalMissingPeerDependenciesOnlyWarnsFor = {};\n        internalInvalidPeerDependenciesOnlyWarnsFor = {};\n\n        getEntries(onlyWarnsForInDependencies).forEach(\n          ([dependencyNameOrSpecialKey, onlyWarnsForValue]) => {\n            if (onlyWarnsForValue.duplicateDirectDependency) {\n              (\n                internalDirectDuplicateDependenciesOnlyWarnsFor as OnlyWarnsForDependencyMapping\n              )[dependencyNameOrSpecialKey] =\n                onlyWarnsForValue.duplicateDirectDependency;\n            }\n            if (onlyWarnsForValue.missingPeerDependency) {\n              (\n                internalMissingPeerDependenciesOnlyWarnsFor as OnlyWarnsForDependencyMapping\n              )[dependencyNameOrSpecialKey] =\n                onlyWarnsForValue.missingPeerDependency;\n            }\n            if (onlyWarnsForValue.invalidPeerDependencyVersion) {\n              (\n                internalInvalidPeerDependenciesOnlyWarnsFor as OnlyWarnsForDependencyMapping\n              )[dependencyNameOrSpecialKey] =\n                onlyWarnsForValue.invalidPeerDependencyVersion;\n            }\n          },\n        );\n      }\n\n      this.checkExactVersions({\n        allowRangeVersionsInDependencies,\n        onlyWarnsFor: exactVersionsOnlyWarnsFor,\n        internalExactVersionsIgnore,\n      });\n\n      this.checkResolutionsVersionsMatch();\n      this.checkResolutionsHasExplanation(checkResolutionMessage);\n\n      this.checkDirectPeerDependencies({\n        isLibrary,\n        missingOnlyWarnsFor: internalMissingPeerDependenciesOnlyWarnsFor,\n        invalidOnlyWarnsFor: internalInvalidPeerDependenciesOnlyWarnsFor,\n        internalMissingConfigName: peerDependenciesOnlyWarnsFor\n          ? 'peerDependenciesOnlyWarnsFor'\n          : 'onlyWarnsForInDependencies.missingPeerDependency',\n        internalInvalidConfigName: peerDependenciesOnlyWarnsFor\n          ? 'peerDependenciesOnlyWarnsFor'\n          : 'onlyWarnsForInDependencies.invalidPeerDependencyVersion',\n      });\n\n      this.checkDirectDuplicateDependencies({\n        onlyWarnsFor: internalDirectDuplicateDependenciesOnlyWarnsFor,\n        internalConfigName: directDuplicateDependenciesOnlyWarnsFor\n          ? 'directDuplicateDependenciesOnlyWarnsFor'\n          : 'onlyWarnsForInDependencies.duplicateDirectDependency',\n      });\n\n      return this;\n    },\n\n    checkIdenticalVersionsThanDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (dependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      return this;\n    },\n\n    checkIdenticalVersionsThanDevDependencyOfDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (dependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (devDependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersions(dependencies) {\n      Object.entries(dependencies).forEach(\n        ([dependencyType, dependenciesRanges]) => {\n          checkSatisfiesVersions(\n            pkg,\n            pkgPathName,\n            dependencyType as DependencyTypes,\n            dependenciesRanges,\n          );\n        },\n      );\n      return this;\n    },\n\n    checkSatisfiesVersionsFromDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsInDevDependenciesOfDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkIdenticalVersions({ resolutions, dependencies, devDependencies }) {\n      if (resolutions) {\n        checkIdenticalVersions(pkg, pkgPathName, 'resolutions', resolutions);\n      }\n      if (dependencies) {\n        checkIdenticalVersions(pkg, pkgPathName, 'dependencies', dependencies);\n      }\n      if (devDependencies) {\n        checkIdenticalVersions(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsBetweenDependencies(\n      depName1,\n      depName2,\n      { dependencies, devDependencies },\n    ) {\n      const depPkg1 = getDependencyPackageJson(depName1);\n      const depPkg2 = getDependencyPackageJson(depName2);\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          depPkg2,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg1,\n          depPkg1.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          depPkg2,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg1,\n          depPkg1.dependencies,\n        );\n      }\n      return this;\n    },\n  };\n}\n","/* eslint-disable max-lines */\nimport fs from 'fs';\nimport path from 'path';\nimport glob from 'glob';\nimport type {\n  CreateCheckPackageOptions,\n  CheckPackageApi,\n  OnlyWarnsForInDependenciesCheckPackageRecommendedOption,\n  OnlyWarnsForInDependencyCheckPackageRecommendedOption,\n  OnlyWarnsForInPackageCheckPackageRecommendedOption,\n} from './check-package';\nimport { createCheckPackage } from './check-package';\nimport { checkDuplicateDependencies } from './checks/checkDuplicateDependencies';\nimport type { CheckResolutionMessage } from './checks/checkResolutionsHasExplanation';\nimport {\n  createReportError,\n  reportNotWarnedForMapping,\n} from './utils/createReportError';\nimport type {\n  OnlyWarnsFor,\n  OnlyWarnsForOptionalDependencyMapping,\n} from './utils/warnForUtils';\nimport { createOnlyWarnsForMappingCheck } from './utils/warnForUtils';\n\ninterface OnlyWarnsForInMonorepoPackageCheckPackageRecommendedOption\n  extends OnlyWarnsForInPackageCheckPackageRecommendedOption {\n  duplicateDirectDependency: OnlyWarnsForInDependencyCheckPackageRecommendedOption['duplicateDirectDependency'];\n}\n\ntype OnlyWarnsForInMonorepoPackagesCheckPackageRecommendedOption = Record<\n  // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n  '*' | string,\n  OnlyWarnsForInMonorepoPackageCheckPackageRecommendedOption\n>;\n\ntype OnlyWarnsForInMonorepoPackagesDependenciesCheckPackageRecommendedOption =\n  Record<string, OnlyWarnsForInDependenciesCheckPackageRecommendedOption>;\n\nexport interface CheckPackageWithWorkspacesRecommendedOptions {\n  isLibrary?: (pkgName: string) => boolean;\n  allowRangeVersionsInLibraries?: boolean;\n  /** @deprecated use onlyWarnsFor */\n  peerDependenciesOnlyWarnsFor?: OnlyWarnsFor;\n  /** @deprecated use onlyWarnsFor */\n  directDuplicateDependenciesOnlyWarnsFor?: OnlyWarnsFor;\n  monorepoDirectDuplicateDependenciesOnlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  onlyWarnsForInRootPackage?: OnlyWarnsForInPackageCheckPackageRecommendedOption;\n  onlyWarnsForInMonorepoPackages?: OnlyWarnsForInMonorepoPackagesCheckPackageRecommendedOption;\n  /** @deprecated use onlyWarnsForInRootDependencies */\n  onlyWarnsForInDependencies?: OnlyWarnsForInDependenciesCheckPackageRecommendedOption;\n  onlyWarnsForInRootDependencies?: OnlyWarnsForInDependenciesCheckPackageRecommendedOption;\n  onlyWarnsForInMonorepoPackagesDependencies?: OnlyWarnsForInMonorepoPackagesDependenciesCheckPackageRecommendedOption;\n  checkResolutionMessage?: CheckResolutionMessage;\n}\n\nexport interface CheckPackageWithWorkspacesApi {\n  run: () => Promise<void>;\n\n  checkRecommended: (\n    options?: CheckPackageWithWorkspacesRecommendedOptions,\n  ) => CheckPackageWithWorkspacesApi;\n\n  forRoot: (\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n  forEach: (\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n  for: (\n    id: string,\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n}\n\nexport function createCheckPackageWithWorkspaces(\n  pkgDirectoryPath = '.',\n  createCheckPackageOptions: CreateCheckPackageOptions = {},\n): CheckPackageWithWorkspacesApi {\n  const checkPackage = createCheckPackage(\n    pkgDirectoryPath,\n    createCheckPackageOptions,\n  );\n  const { pkg, pkgDirname } = checkPackage;\n\n  const pkgWorkspaces: string[] | undefined =\n    pkg.workspaces && !Array.isArray(pkg.workspaces)\n      ? pkg.workspaces.packages\n      : pkg.workspaces;\n\n  if (!pkgWorkspaces) {\n    throw new Error('Package is missing \"workspaces\"');\n  }\n\n  const workspacePackagesPaths: string[] = [];\n\n  if (pkgWorkspaces) {\n    pkgWorkspaces.forEach((pattern) => {\n      const match = glob.sync(pattern, { cwd: pkgDirname });\n      match.forEach((pathMatch) => {\n        const stat = fs.statSync(pathMatch);\n        if (!stat.isDirectory()) return;\n        const subPkgDirectoryPath = path.relative(process.cwd(), pathMatch);\n        workspacePackagesPaths.push(subPkgDirectoryPath);\n      });\n    });\n  }\n\n  const checksWorkspaces = new Map<string, CheckPackageApi>(\n    workspacePackagesPaths.map((subPkgDirectoryPath) => {\n      const checkPkg = createCheckPackage(subPkgDirectoryPath, {\n        ...createCheckPackageOptions,\n        internalWorkspacePkgDirectoryPath: pkgDirectoryPath,\n      });\n      return [checkPkg.pkg.name, checkPkg];\n    }),\n  );\n\n  return {\n    async run() {\n      await Promise.all(\n        [checkPackage, ...checksWorkspaces.values()].map((checksWorkspace) =>\n          checksWorkspace.run(),\n        ),\n      );\n    },\n\n    checkRecommended({\n      isLibrary = () => false,\n      allowRangeVersionsInLibraries = true,\n      onlyWarnsForInRootPackage,\n      onlyWarnsForInMonorepoPackages,\n      onlyWarnsForInDependencies,\n      onlyWarnsForInRootDependencies = onlyWarnsForInDependencies,\n      onlyWarnsForInMonorepoPackagesDependencies = onlyWarnsForInDependencies\n        ? { '*': onlyWarnsForInDependencies }\n        : {},\n      peerDependenciesOnlyWarnsFor,\n      directDuplicateDependenciesOnlyWarnsFor,\n      monorepoDirectDuplicateDependenciesOnlyWarnsFor,\n      checkResolutionMessage,\n    } = {}) {\n      if (peerDependenciesOnlyWarnsFor) {\n        console.warn(\n          'Option \"peerDependenciesOnlyWarnsFor\" in checkRecommended() is deprecated. Use \"onlyWarnsForInDependencies\" instead.',\n        );\n      }\n      if (directDuplicateDependenciesOnlyWarnsFor) {\n        console.warn(\n          'Option \"directDuplicateDependenciesOnlyWarnsFor\" in checkRecommended() is deprecated. Use \"onlyWarnsForInDependencies\" instead.',\n        );\n      }\n\n      checkPackage.checkNoDependencies();\n      checkPackage.checkRecommended({\n        isLibrary: false,\n        onlyWarnsForInPackage: onlyWarnsForInRootPackage,\n        onlyWarnsForInDependencies: onlyWarnsForInRootDependencies,\n        peerDependenciesOnlyWarnsFor,\n        directDuplicateDependenciesOnlyWarnsFor,\n        checkResolutionMessage,\n      });\n\n      const monorepoDirectDuplicateDependenciesOnlyWarnsForCheck =\n        createOnlyWarnsForMappingCheck(\n          'monorepoDirectDuplicateDependenciesOnlyWarnsFor',\n          monorepoDirectDuplicateDependenciesOnlyWarnsFor,\n        );\n\n      const previousCheckedWorkspaces = new Map<string, CheckPackageApi>();\n      checksWorkspaces.forEach((checkSubPackage, id) => {\n        const isPackageALibrary = isLibrary(id);\n        checkSubPackage.checkRecommended({\n          isLibrary: isPackageALibrary,\n          allowRangeVersionsInDependencies: isPackageALibrary\n            ? allowRangeVersionsInLibraries\n            : false,\n          onlyWarnsForInPackage: onlyWarnsForInMonorepoPackages\n            ? {\n                ...onlyWarnsForInMonorepoPackages['*'],\n                ...onlyWarnsForInMonorepoPackages[checkSubPackage.pkg.name],\n              }\n            : undefined,\n          onlyWarnsForInDependencies:\n            onlyWarnsForInMonorepoPackagesDependencies[\n              checkSubPackage.pkg.name\n            ],\n          peerDependenciesOnlyWarnsFor,\n          directDuplicateDependenciesOnlyWarnsFor,\n          internalExactVersionsIgnore: [...checksWorkspaces.keys()],\n          checkResolutionMessage,\n        });\n\n        const reportMonorepoDDDError = createReportError(\n          'Monorepo Direct Duplicate Dependencies',\n          checkSubPackage.pkgPathName,\n        );\n        // Root\n        checkDuplicateDependencies(\n          reportMonorepoDDDError,\n          checkSubPackage.pkg,\n          'devDependencies',\n          ['dependencies', 'devDependencies'],\n          pkg,\n          monorepoDirectDuplicateDependenciesOnlyWarnsForCheck.createFor(\n            checkSubPackage.pkg.name,\n          ),\n        );\n        // previous packages\n        previousCheckedWorkspaces.forEach((previousCheckSubPackage) => {\n          checkDuplicateDependencies(\n            reportMonorepoDDDError,\n            checkSubPackage.pkg,\n            'devDependencies',\n            ['dependencies', 'devDependencies'],\n            previousCheckSubPackage.pkg,\n            monorepoDirectDuplicateDependenciesOnlyWarnsForCheck.createFor(\n              checkSubPackage.pkg.name,\n            ),\n          );\n          checkDuplicateDependencies(\n            reportMonorepoDDDError,\n            checkSubPackage.pkg,\n            'dependencies',\n            ['dependencies', 'devDependencies'],\n            previousCheckSubPackage.pkg,\n            monorepoDirectDuplicateDependenciesOnlyWarnsForCheck.createFor(\n              checkSubPackage.pkg.name,\n            ),\n          );\n          checkDuplicateDependencies(\n            reportMonorepoDDDError,\n            checkSubPackage.pkg,\n            'peerDependencies',\n            ['peerDependencies'],\n            previousCheckSubPackage.pkg,\n            monorepoDirectDuplicateDependenciesOnlyWarnsForCheck.createFor(\n              checkSubPackage.pkg.name,\n            ),\n          );\n        });\n\n        previousCheckedWorkspaces.set(id, checkSubPackage);\n      });\n      reportNotWarnedForMapping(\n        createReportError(\n          'Monorepo Direct Duplicate Dependencies',\n          checkPackage.pkgPathName,\n        ),\n        monorepoDirectDuplicateDependenciesOnlyWarnsForCheck,\n      );\n\n      return this;\n    },\n\n    forRoot(callback) {\n      callback(checkPackage);\n      return this;\n    },\n\n    forEach(callback) {\n      checksWorkspaces.forEach((checkSubPackage) => {\n        callback(checkSubPackage);\n      });\n      return this;\n    },\n\n    for(id, callback) {\n      const packageCheck = checksWorkspaces.get(id);\n      if (!packageCheck) {\n        throw new Error(\n          `Invalid package name: ${id}. Known package names: \"${[\n            ...checksWorkspaces.keys(),\n          ].join('\",\"')}\"`,\n        );\n      }\n      callback(packageCheck);\n      return this;\n    },\n  };\n}\n"],"names":["getKeys","o","Object","keys","getEntries","entries","titleDisplayed","pkgPathDisplayed","logMessage","msgTitle","msgInfo","onlyWarns","console","error","chalk","yellow","red","createReportError","title","pkgPathName","reportError","cyan","process","exitCode","reportNotWarnedFor","onlyWarnsForCheck","notWarnedFor","getNotWarnedFor","length","configName","map","depName","join","reportNotWarnedForMapping","onlyWarnsForMappingCheck","notWarnedForMapping","forEach","depNameOrStar","checkDuplicateDependencies","pkg","depType","searchIn","depPkg","dependencies","searchInExisting","filter","type","depKey","range","versionsIn","versions","version","index","startsWith","semver","satisfies","includePrerelease","intersects","resolutions","versionInType","name","shouldWarnsFor","checkDirectDuplicateDependencies","getDependencyPackageJson","reportErrorNamePrefix","createFor","checkPeerDependencies","allowedPeerIn","missingOnlyWarnsForCheck","invalidOnlyWarnsForCheck","peerDependencies","peerDependenciesMeta","allowedPeerInExisting","allowedPeerInType","peerDepName","allowedPeerInExistingType","peerDependenciesMetaPeerDep","optional","versionsInType","minVersionOfVersion","minVersion","regularDependencyTypes","getAllowedPeerInFromType","depPkgType","isLibrary","checkDirectPeerDependencies","isVersionRange","checkExactVersions","types","internalExactVersionsIgnore","tryToAutoFix","pkgDependencies","dependencyName","versionConst","match","exec","Error","realVersion","includes","shouldOnlyWarn","resolvedDep","slice","checkIdenticalVersions","deps","depConfigArrayOrObject","depConfig","Array","isArray","depKeyType","pkgDependenciesType","depKeyIdentical","value","checkIdenticalVersionsThanDependency","depKeys","checkNoDependencies","pkgPath","moveToSuggestion","checkResolutionsHasExplanation","checkMessage","pkgResolutions","pkgResolutionsExplained","resolutionsExplained","checkResolutionsVersionsMatch","resolutionDepVersion","checkSatisfiesVersions","dependenciesRanges","checkSatisfiesVersionsFromDependency","readPkgJson","packagePath","JSON","parse","readFileSync","writePkgJson","writeFileSync","stringify","internalLoadPackageJsonFromNodeModules","pkgDepName","pkgDirname","require","resolve","paths","createGetDependencyPackageJson","nodeModulesPackagePathCache","Map","internalCustomLoadPackageJsonFromNodeModules","internalReadPkgJson","existing","get","err","code","message","matchPackageJson","set","createOnlyWarnsForArrayCheck","onlyWarnsFor","Set","delete","isMapping","createOnlyWarnsForMappingCheck","fromEntries","entryKey","entryValue","key","size","dependencyNameLevel1","arrayOnlyWarnsForCheck","createCheckPackage","pkgDirectoryPath","internalWorkspacePkgDirectoryPath","path","copyPkg","env","CI","CHECK_PACKAGE_DEPENDENCIES_ENABLE_CI_AUTOFIX","argv","writePackageIfChanged","util","isDeepStrictEqual","runCalled","on","warn","run","Promise","allowRangeVersionsInDependencies","checkExactVersionsForLibrary","checkExactDevVersions","deprecatedOnlyWarnsFor","missingOnlyWarnsFor","invalidOnlyWarnsFor","internalMissingConfigName","internalInvalidConfigName","internalConfigName","undefined","checkRecommended","onlyWarnsForInPackage","onlyWarnsForInDependencies","peerDependenciesOnlyWarnsFor","directDuplicateDependenciesOnlyWarnsFor","exactVersionsOnlyWarnsFor","checkResolutionMessage","internalMissingPeerDependenciesOnlyWarnsFor","internalInvalidPeerDependenciesOnlyWarnsFor","internalDirectDuplicateDependenciesOnlyWarnsFor","exactVersions","dependencyNameOrSpecialKey","onlyWarnsForValue","duplicateDirectDependency","missingPeerDependency","invalidPeerDependencyVersion","devDependencies","checkIdenticalVersionsThanDevDependencyOfDependency","dependencyType","checkSatisfiesVersionsInDevDependenciesOfDependency","checkSatisfiesVersionsBetweenDependencies","depName1","depName2","depPkg1","depPkg2","createCheckPackageWithWorkspaces","createCheckPackageOptions","checkPackage","pkgWorkspaces","workspaces","packages","workspacePackagesPaths","pattern","glob","sync","cwd","pathMatch","stat","fs","statSync","isDirectory","subPkgDirectoryPath","relative","push","checksWorkspaces","checkPkg","all","values","checksWorkspace","allowRangeVersionsInLibraries","onlyWarnsForInRootPackage","onlyWarnsForInMonorepoPackages","onlyWarnsForInRootDependencies","onlyWarnsForInMonorepoPackagesDependencies","monorepoDirectDuplicateDependenciesOnlyWarnsFor","monorepoDirectDuplicateDependenciesOnlyWarnsForCheck","previousCheckedWorkspaces","checkSubPackage","id","isPackageALibrary","reportMonorepoDDDError","previousCheckSubPackage","forRoot","callback","for","packageCheck"],"mappings":"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"}