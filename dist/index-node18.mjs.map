{"version":3,"file":"index-node18.mjs","sources":["../src/utils/object.ts","../src/utils/createReportError.ts","../src/checks/checkDuplicateDependencies.ts","../src/checks/checkDirectDuplicateDependencies.ts","../src/checks/checkPeerDependencies.ts","../src/checks/checkDirectPeerDependencies.ts","../src/checks/checkExactVersions.ts","../src/checks/checkIdenticalVersions.ts","../src/checks/checkIdenticalVersionsThanDependency.ts","../src/checks/checkMinRangeSatisfies.ts","../src/checks/checkNoDependencies.ts","../src/checks/checkResolutionsHasExplanation.ts","../src/checks/checkResolutionsVersionsMatch.ts","../src/checks/checkSatisfiesVersions.ts","../src/utils/semverUtils.ts","../src/checks/checkSatisfiesVersionsFromDependency.ts","../src/checks/checkSatisfiesVersionsInDependency.ts","../src/utils/pkgJsonUtils.ts","../src/utils/createGetDependencyPackageJson.ts","../src/utils/warnForUtils.ts","../src/check-package.ts","../src/check-package-with-workspaces.ts"],"sourcesContent":["export const getKeys = <T extends object>(o: T): (keyof T)[] =>\n  Object.keys(o) as (keyof T)[];\n\nexport const getEntries = <T extends object>(o: T): [keyof T, T[keyof T]][] =>\n  Object.entries(o) as unknown as [keyof T, T[keyof T]][];\n","/* eslint-disable no-console */\n\nimport chalk from 'chalk';\nimport { getEntries } from './object';\nimport type {\n  OnlyWarnsForCheck,\n  OnlyWarnsForMappingCheck,\n} from './warnForUtils';\n\nexport type ReportError = (\n  msgTitle: string,\n  msgInfo?: string,\n  onlyWarns?: boolean,\n  autoFixable?: boolean,\n) => void;\n\nlet titleDisplayed: string | null = null;\nlet pkgPathDisplayed: string | null = null;\n\nlet totalWarnings = 0;\nlet totalErrors = 0;\nlet totalFixable = 0;\n\nexport function displayConclusion(): void {\n  if (!totalWarnings && !totalErrors) {\n    console.log(`\\n${chalk.green('✅ No errors or warnings found')}.`);\n  } else if (!totalErrors) {\n    console.log(`\\nFound ${chalk.yellow(`${totalWarnings} warnings`)}.`);\n  } else if (!totalWarnings) {\n    console.log(`\\nFound ${chalk.red(`${totalErrors} errors`)}.`);\n  } else {\n    console.log(\n      `\\nFound ${chalk.red(`${totalErrors} errors`)} and ${chalk.yellow(\n        `${totalWarnings} warnings`,\n      )}.`,\n    );\n  }\n\n  if (totalFixable) {\n    console.log(\n      `Found ${chalk.green(\n        `${totalFixable} auto-fixable`,\n      )} errors or warnings, run the command with \"--fix\" to fix them.`,\n    );\n  }\n}\n\nexport function logMessage(\n  msgTitle: string,\n  msgInfo?: string,\n  onlyWarns?: boolean,\n  autoFixable?: boolean,\n): void {\n  if (onlyWarns) totalWarnings++;\n  else totalErrors++;\n  if (autoFixable) totalFixable++;\n  console.error(\n    `${\n      onlyWarns ? chalk.yellow(`⚠ ${msgTitle}`) : chalk.red(`❌ ${msgTitle}`)\n    }${msgInfo ? `: ${msgInfo}` : ''}${\n      autoFixable ? ` ${chalk.bgGreenBright(chalk.black('auto-fixable'))}` : ''\n    }`,\n  );\n}\n\nexport function createReportError(\n  title: string,\n  pkgPathName: string,\n): ReportError {\n  return function reportError(\n    msgTitle,\n    msgInfo,\n    onlyWarns,\n    autoFixable = false,\n  ): void {\n    if (titleDisplayed !== title || pkgPathName !== pkgPathDisplayed) {\n      if (titleDisplayed) console.error();\n      console.error(chalk.cyan(`== ${title} in ${pkgPathName} ==`));\n      titleDisplayed = title;\n      pkgPathDisplayed = pkgPathName;\n    }\n    logMessage(msgTitle, msgInfo, onlyWarns, autoFixable);\n\n    if (!onlyWarns) {\n      // console.trace();\n      process.exitCode = 1;\n    }\n  };\n}\n\nexport function reportNotWarnedFor(\n  reportError: ReportError,\n  onlyWarnsForCheck: OnlyWarnsForCheck,\n): void {\n  const notWarnedFor = onlyWarnsForCheck.getNotWarnedFor();\n  if (notWarnedFor.length > 0) {\n    reportError(\n      `Invalid config in \"${onlyWarnsForCheck.configName}\"`,\n      `no warning was raised for ${notWarnedFor\n        .map((depName) => `\"${depName}\"`)\n        .join(', ')}`,\n      false,\n    );\n  }\n}\n\nexport function reportNotWarnedForMapping(\n  reportError: ReportError,\n  onlyWarnsForMappingCheck: OnlyWarnsForMappingCheck,\n): void {\n  const notWarnedForMapping = onlyWarnsForMappingCheck.getNotWarnedFor();\n  getEntries(notWarnedForMapping).forEach(([depNameOrStar, notWarnedFor]) => {\n    reportError(\n      `Invalid config in \"${onlyWarnsForMappingCheck.configName}\" for \"${depNameOrStar}\"`,\n      `no warning was raised for ${notWarnedFor\n        .map((depName) => `\"${depName}\"`)\n        .join(', ')}`,\n    );\n  });\n}\n","import semver from 'semver';\nimport type { ReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkDuplicateDependencies(\n  reportError: ReportError,\n  pkg: PackageJson,\n  isPkgLibrary: boolean,\n  depType: DependencyTypes,\n  searchIn: DependencyTypes[],\n  depPkg: PackageJson,\n  onlyWarnsForCheck: OnlyWarnsForCheck,\n): void {\n  const dependencies = depPkg[depType];\n  if (!dependencies) return;\n\n  const searchInExisting = searchIn.filter((type) => pkg[type]);\n\n  for (const [depKey, range] of Object.entries(dependencies)) {\n    const versionsIn = searchInExisting.filter((type) => pkg[type]![depKey]);\n\n    let allowDuplicated = false;\n    if (\n      versionsIn.length === 2 &&\n      isPkgLibrary &&\n      versionsIn.includes('dependencies') &&\n      versionsIn.includes('devDependencies')\n    ) {\n      const depVersion = pkg.dependencies![depKey];\n      const devDepVersion = pkg.devDependencies![depKey];\n\n      if (depVersion && depVersion === devDepVersion) {\n        reportError(\n          `Invalid \"${depKey}\" has same version in dependencies and devDependencies`,\n          'please place it only in dependencies or use range in dependencies',\n        );\n        continue;\n      }\n      allowDuplicated = true;\n    }\n\n    if (\n      versionsIn.length > 2 ||\n      (versionsIn.length === 2 && !allowDuplicated)\n    ) {\n      reportError(\n        `Invalid \"${depKey}\" present in ${versionsIn.join(' and ')}`,\n        'please place it only in dependencies',\n      );\n    } else {\n      const versions = versionsIn.map((type) => pkg[type]![depKey]);\n\n      versions.forEach((version, index) => {\n        if (version.startsWith('file:') || range.startsWith('file:')) return;\n        // https://yarnpkg.com/features/workspaces#workspace-ranges-workspace\n        if (\n          version.startsWith('workspace:') ||\n          range.startsWith('workspace:')\n        ) {\n          return;\n        }\n\n        if (\n          semver.satisfies(version, range, {\n            includePrerelease: true,\n          }) ||\n          semver.intersects(version, range, {\n            includePrerelease: true,\n          })\n        ) {\n          return;\n        }\n\n        // Ignore reporting duplicate when there's a resolution for it\n        if (pkg.resolutions?.[depKey]) {\n          return;\n        }\n\n        const versionInType = versionsIn[index];\n\n        reportError(\n          `Invalid duplicate dependency \"${depKey}\"`,\n          `\"${versions[0]}\" (in ${versionInType}) should satisfies \"${range}\" from \"${depPkg.name}\" ${depType}.`,\n          onlyWarnsForCheck.shouldWarnsFor(depKey),\n        );\n      });\n    }\n  }\n}\n","import type { GetDependencyPackageJson } from '../utils/createGetDependencyPackageJson';\nimport {\n  reportNotWarnedForMapping,\n  createReportError,\n} from '../utils/createReportError';\nimport { getKeys } from '../utils/object';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsForMappingCheck } from '../utils/warnForUtils';\nimport { checkDuplicateDependencies } from './checkDuplicateDependencies';\n\nexport async function checkDirectDuplicateDependencies(\n  pkg: PackageJson,\n  pkgPathName: string,\n  isPackageALibrary: boolean,\n  depType: DependencyTypes,\n  getDependencyPackageJson: GetDependencyPackageJson,\n  onlyWarnsForCheck: OnlyWarnsForMappingCheck,\n  reportErrorNamePrefix = '',\n  customCreateReportError = createReportError,\n): Promise<void> {\n  const reportError = customCreateReportError(\n    `${reportErrorNamePrefix}Direct Duplicate Dependencies`,\n    pkgPathName,\n  );\n\n  const checks: {\n    type: DependencyTypes;\n    searchIn: DependencyTypes[];\n  }[] = [\n    {\n      type: 'devDependencies',\n      searchIn: ['devDependencies', 'dependencies'],\n    },\n    { type: 'dependencies', searchIn: ['devDependencies', 'dependencies'] },\n  ];\n\n  checks.forEach(({ type, searchIn }) => {\n    const dependencies = pkg[type];\n\n    if (!dependencies) return;\n    for (const depName of getKeys(dependencies)) {\n      const depPkg = getDependencyPackageJson(depName);\n      checkDuplicateDependencies(\n        reportError,\n        pkg,\n        isPackageALibrary,\n        depType,\n        searchIn,\n        depPkg,\n        onlyWarnsForCheck.createFor(depName),\n      );\n    }\n  });\n\n  reportNotWarnedForMapping(reportError, onlyWarnsForCheck);\n}\n","import semver from 'semver';\nimport type { ReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkPeerDependencies(\n  pkg: PackageJson,\n  reportError: ReportError,\n  type: DependencyTypes,\n  allowedPeerIn: DependencyTypes[],\n  providedDependencies: [string, string][],\n  depPkg: PackageJson,\n  missingOnlyWarnsForCheck: OnlyWarnsForCheck,\n  invalidOnlyWarnsForCheck: OnlyWarnsForCheck,\n): void {\n  const { peerDependencies, peerDependenciesMeta } = depPkg;\n  if (!peerDependencies) return;\n\n  const allowedPeerInExisting = allowedPeerIn.filter(\n    (allowedPeerInType) => pkg[allowedPeerInType],\n  );\n\n  for (const [peerDepName, range] of Object.entries(peerDependencies)) {\n    const versionsIn = allowedPeerInExisting.filter(\n      (allowedPeerInExistingType) =>\n        pkg[allowedPeerInExistingType]?.[peerDepName],\n    );\n    if (versionsIn.length === 0) {\n      const peerDependenciesMetaPeerDep = peerDependenciesMeta?.[peerDepName];\n      if (peerDependenciesMetaPeerDep?.optional) {\n        continue;\n      }\n\n      let additionalDetails = '';\n      // satisfied by another direct dependency\n      const providedDependenciesForDepName = providedDependencies.filter(\n        ([depName]) => depName === peerDepName,\n      );\n      if (providedDependenciesForDepName.length > 0) {\n        if (\n          providedDependenciesForDepName.every(([, depRange]) =>\n            semver.intersects(range, depRange),\n          )\n        ) {\n          continue;\n        }\n\n        additionalDetails +=\n          ' (required as some dependencies have non-satisfying range too)';\n      }\n\n      reportError(\n        `Missing \"${peerDepName}\" peer dependency from \"${depPkg.name}\" in ${type}`,\n        `it should satisfies \"${range}\" and be in ${allowedPeerIn.join(\n          ' or ',\n        )}${additionalDetails}`,\n        missingOnlyWarnsForCheck.shouldWarnsFor(peerDepName),\n      );\n    } else {\n      const versions = versionsIn.map(\n        (versionsInType) => pkg[versionsInType]![peerDepName],\n      );\n\n      versions.forEach((version, index) => {\n        if (version.startsWith('npm:')) {\n          return;\n        }\n\n        if (version === '*') {\n          return;\n        }\n\n        const minVersionOfVersion = semver.minVersion(version);\n        if (\n          !minVersionOfVersion ||\n          !semver.satisfies(minVersionOfVersion, range, {\n            includePrerelease: true,\n          })\n        ) {\n          reportError(\n            `Invalid \"${peerDepName}\" peer dependency`,\n            `\"${version}\" (in ${allowedPeerInExisting[index]}) should satisfies \"${range}\" from \"${depPkg.name}\" ${type}`,\n            invalidOnlyWarnsForCheck.shouldWarnsFor(peerDepName),\n          );\n        }\n      });\n    }\n  }\n}\n","import semver from 'semver';\nimport type { GetDependencyPackageJson } from '../utils/createGetDependencyPackageJson';\nimport {\n  createReportError,\n  reportNotWarnedForMapping,\n} from '../utils/createReportError';\nimport { getKeys } from '../utils/object';\nimport type {\n  DependencyTypes,\n  PackageJson,\n  RegularDependencyTypes,\n} from '../utils/packageTypes';\nimport type { OnlyWarnsForMappingCheck } from '../utils/warnForUtils';\nimport { checkPeerDependencies } from './checkPeerDependencies';\n\nconst regularDependencyTypes: RegularDependencyTypes[] = [\n  'devDependencies',\n  'dependencies',\n  'optionalDependencies',\n];\n\nconst getAllowedPeerInFromType = (\n  depPkgType: RegularDependencyTypes,\n  isLibrary: boolean,\n): DependencyTypes[] => {\n  switch (depPkgType) {\n    case 'devDependencies':\n      return ['devDependencies', 'dependencies'];\n    case 'dependencies':\n      return isLibrary\n        ? ['dependencies', 'peerDependencies']\n        : ['devDependencies', 'dependencies'];\n    case 'optionalDependencies':\n      return isLibrary\n        ? ['dependencies', 'optionalDependencies', 'peerDependencies']\n        : ['devDependencies', 'dependencies'];\n\n    // no default\n  }\n};\n\nexport async function checkDirectPeerDependencies(\n  isLibrary: boolean,\n  pkg: PackageJson,\n  pkgPathName: string,\n  getDependencyPackageJson: GetDependencyPackageJson,\n  missingOnlyWarnsForCheck: OnlyWarnsForMappingCheck,\n  invalidOnlyWarnsForCheck: OnlyWarnsForMappingCheck,\n  customCreateReportError = createReportError,\n): Promise<void> {\n  const reportError = customCreateReportError('Peer Dependencies', pkgPathName);\n\n  const allDepPkgs: {\n    name: string;\n    type: RegularDependencyTypes;\n    pkg: PackageJson;\n  }[] = [];\n  const allDirectDependenciesDependencies: [string, string][] = [];\n\n  await Promise.all(\n    regularDependencyTypes.map(async (depType) => {\n      const dependencies = pkg[depType];\n      if (!dependencies) return;\n      for (const depName of getKeys(dependencies)) {\n        if (pkg.peerDependencies?.[depName]) {\n          if (\n            semver.intersects(\n              dependencies[depName],\n              pkg.peerDependencies[depName],\n            )\n          ) {\n            continue;\n          }\n        }\n\n        const depPkg = getDependencyPackageJson(depName);\n        allDepPkgs.push({ name: depName, type: depType, pkg: depPkg });\n\n        if (depPkg.dependencies && !isLibrary) {\n          allDirectDependenciesDependencies.push(\n            ...Object.entries(depPkg.dependencies),\n          );\n        }\n      }\n    }),\n  );\n\n  for (const { name: depName, type: depType, pkg: depPkg } of allDepPkgs) {\n    if (depPkg.peerDependencies) {\n      checkPeerDependencies(\n        pkg,\n        reportError,\n        depType,\n        getAllowedPeerInFromType(depType, isLibrary),\n        allDirectDependenciesDependencies,\n        depPkg,\n        missingOnlyWarnsForCheck.createFor(depName),\n        invalidOnlyWarnsForCheck.createFor(depName),\n      );\n    }\n  }\n\n  reportNotWarnedForMapping(reportError, missingOnlyWarnsForCheck);\n  if (missingOnlyWarnsForCheck !== invalidOnlyWarnsForCheck) {\n    reportNotWarnedForMapping(reportError, invalidOnlyWarnsForCheck);\n  }\n}\n","import semver from 'semver';\nimport type { GetDependencyPackageJson } from '../utils/createGetDependencyPackageJson';\nimport {\n  createReportError,\n  reportNotWarnedFor,\n} from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsFor, OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport interface CheckExactVersionsOptions {\n  getDependencyPackageJson?: GetDependencyPackageJson;\n  onlyWarnsForCheck: OnlyWarnsForCheck;\n  internalExactVersionsIgnore?: OnlyWarnsFor;\n  tryToAutoFix?: boolean;\n  customCreateReportError?: typeof createReportError;\n}\n\nconst isVersionRange = (version: string): boolean =>\n  version.startsWith('^') ||\n  version.startsWith('~') ||\n  version.startsWith('>') ||\n  version.startsWith('<');\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function checkExactVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  types: DependencyTypes[],\n  {\n    getDependencyPackageJson,\n    onlyWarnsForCheck,\n    internalExactVersionsIgnore,\n    tryToAutoFix = false,\n    customCreateReportError = createReportError,\n  }: CheckExactVersionsOptions,\n): Promise<void> {\n  const reportError = customCreateReportError('Exact versions', pkgPathName);\n\n  for (const type of types) {\n    const pkgDependencies = pkg[type];\n    if (!pkgDependencies) continue;\n\n    for (const [dependencyName, versionConst] of Object.entries(\n      pkgDependencies,\n    )) {\n      let version = versionConst;\n      if (version.startsWith('npm:')) {\n        const match = /^npm:.*@(.*)$/.exec(version);\n        if (!match) throw new Error(`Invalid version match: ${version}`);\n        const [, realVersion] = match;\n        version = realVersion;\n      }\n\n      if (isVersionRange(version)) {\n        if (internalExactVersionsIgnore?.includes(dependencyName)) {\n          continue;\n        }\n        const shouldOnlyWarn = onlyWarnsForCheck.shouldWarnsFor(dependencyName);\n        if (!shouldOnlyWarn && getDependencyPackageJson) {\n          let resolvedDep;\n          try {\n            resolvedDep = getDependencyPackageJson(dependencyName);\n          } catch {\n            resolvedDep = null;\n          }\n          if (!resolvedDep?.version) {\n            reportError(\n              `Unexpected range dependency in \"${type}\" for \"${dependencyName}\"`,\n              `expecting \"${version}\" to be exact${\n                tryToAutoFix\n                  ? `, autofix failed to resolve \"${dependencyName}\".`\n                  : ''\n              }`,\n              shouldOnlyWarn,\n              false,\n            );\n          } else if (\n            !semver.satisfies(resolvedDep.version, version, {\n              includePrerelease: true,\n            })\n          ) {\n            reportError(\n              `Unexpected range dependency in \"${type}\" for \"${dependencyName}\"`,\n              `expecting \"${version}\" to be exact${\n                tryToAutoFix\n                  ? `, autofix failed as \"${dependencyName}\"'s resolved version is \"${resolvedDep.version}\" and doesn't satisfies \"${version}\".`\n                  : ''\n              }`,\n              shouldOnlyWarn,\n              false,\n            );\n          } else if (tryToAutoFix) {\n            pkgDependencies[dependencyName] = resolvedDep.version;\n          } else {\n            reportError(\n              `Unexpected range dependency in \"${type}\" for \"${dependencyName}\"`,\n              `expecting \"${version}\" to be exact \"${resolvedDep.version}\".`,\n              shouldOnlyWarn,\n              true,\n            );\n          }\n        } else {\n          let exactVersion = version.slice(version[1] === '=' ? 2 : 1);\n          if (exactVersion.split('.').length < 3) {\n            if (exactVersion.split('.').length === 1) {\n              exactVersion = `${exactVersion}.0.0`;\n            } else {\n              exactVersion = `${exactVersion}.0`;\n            }\n          }\n          reportError(\n            `Unexpected range dependency in \"${type}\" for \"${dependencyName}\"`,\n            `expecting \"${version}\" to be exact \"${exactVersion}\".`,\n            shouldOnlyWarn,\n            false,\n          );\n        }\n      }\n    }\n  }\n\n  reportNotWarnedFor(reportError, onlyWarnsForCheck);\n}\n","import { createReportError } from '../utils/createReportError';\nimport { getKeys } from '../utils/object';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkIdenticalVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  deps: Record<string, Partial<Record<DependencyTypes, string[]>> | string[]>,\n  onlyWarnsForCheck?: OnlyWarnsForCheck,\n  customCreateReportError = createReportError,\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = customCreateReportError(\n    'Identical Versions',\n    pkgPathName,\n  );\n\n  getKeys(deps).forEach((depKey) => {\n    const version = pkgDependencies[depKey];\n    if (!version) {\n      reportError(`Unexpected missing ${type} for \"${depKey}\".`);\n      return;\n    }\n\n    const depConfigArrayOrObject = deps[depKey];\n    const depConfig = Array.isArray(depConfigArrayOrObject)\n      ? { [type]: depConfigArrayOrObject }\n      : depConfigArrayOrObject;\n\n    getKeys(depConfig).forEach((depKeyType) => {\n      const pkgDependenciesType = pkg[depKeyType] || {};\n      depConfig[depKeyType]?.forEach((depKeyIdentical) => {\n        const value = pkgDependenciesType[depKeyIdentical];\n        if (!value) {\n          reportError(\n            `Missing \"${depKeyIdentical}\" in ${depKeyType}`,\n            `it should be \"${version}\".`,\n            onlyWarnsForCheck?.shouldWarnsFor(depKey),\n          );\n        }\n\n        if (value !== version) {\n          reportError(\n            `Invalid \"${depKeyIdentical}\" in ${depKeyType}`,\n            `expecting \"${value}\" be \"${version}\".`,\n            onlyWarnsForCheck?.shouldWarnsFor(depKey),\n          );\n        }\n      });\n    });\n  });\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport function checkIdenticalVersionsThanDependency(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  depKeys: string[],\n  depPkg: PackageJson,\n  dependencies: PackageJson[DependencyTypes] = {},\n  onlyWarnsForCheck?: OnlyWarnsForCheck,\n  customCreateReportError = createReportError,\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = customCreateReportError(\n    `Same Versions than ${depPkg.name}`,\n    pkgPathName,\n  );\n\n  depKeys.forEach((depKey) => {\n    const version = dependencies[depKey];\n    if (!version) {\n      reportError(\n        `Unexpected missing dependency \"${depKey}\" in \"${depPkg.name}\".`,\n      );\n      return;\n    }\n\n    if (version.startsWith('^') || version.startsWith('~')) {\n      reportError(\n        `Unexpected range dependency in \"${depPkg.name}\" for \"${depKey}\"`,\n        'perhaps use checkSatisfiesVersionsFromDependency() instead.',\n      );\n      return;\n    }\n\n    const value = pkgDependencies[depKey];\n\n    if (!value) {\n      reportError(\n        `Missing \"${depKey}\" in ${type}`,\n        `expecting to be \"${version}\".`,\n        onlyWarnsForCheck?.shouldWarnsFor(depKey),\n      );\n    }\n\n    if (value !== version) {\n      reportError(\n        `Invalid \"${depKey}\" in ${type}`,\n        `expecting \"${value}\" to be \"${version}\".`,\n        onlyWarnsForCheck?.shouldWarnsFor(depKey),\n      );\n    }\n  });\n}\n","import semver from 'semver';\nimport semverUtils from 'semver-utils';\nimport type { PackageJson } from 'type-fest';\nimport { createReportError } from '../utils/createReportError';\nimport { getEntries } from '../utils/object';\nimport type { DependencyTypes } from '../utils/packageTypes';\n\nexport interface CheckMinRangeSatisfiesOptions {\n  customCreateReportError?: typeof createReportError;\n  tryToAutoFix?: boolean;\n}\n\nexport function checkMinRangeSatisfies(\n  pkgPathName: string,\n  pkg: PackageJson,\n  type1: DependencyTypes = 'dependencies',\n  type2: DependencyTypes = 'devDependencies',\n  {\n    tryToAutoFix = false,\n    customCreateReportError = createReportError,\n  }: CheckMinRangeSatisfiesOptions = {},\n): void {\n  const dependencies1 = pkg[type1];\n  const dependencies2 = pkg[type2];\n\n  if (!dependencies1 || !dependencies2) {\n    return;\n  }\n\n  const reportError = customCreateReportError(\n    `\"${type1}\" minimum range satisfies \"${type2}\"`,\n    pkgPathName,\n  );\n\n  for (const [depName, depRange1] of getEntries(dependencies1)) {\n    if (depRange1 === '*') continue;\n\n    const depRange2 = dependencies2[depName];\n    if (!depRange2 || !depRange1) continue;\n\n    const minDepRange1 = semver.minVersion(depRange1)?.version || depRange1;\n\n    if (\n      !semver.satisfies(minDepRange1, depRange2, {\n        includePrerelease: true,\n      })\n    ) {\n      if (tryToAutoFix) {\n        const depRange1Parsed = semverUtils.parseRange(depRange1);\n        dependencies1[depName] =\n          (depRange1Parsed[0]?.operator || '') +\n          (semver.minVersion(depRange2)?.version || depRange2);\n      } else {\n        reportError(\n          `Invalid \"${depName}\" in ${type1}`,\n          `\"${depRange1}\" should satisfies \"${depRange2}\" from \"${type2}\".`,\n          false,\n          true,\n        );\n      }\n    }\n  }\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport function checkNoDependencies(\n  pkg: PackageJson,\n  pkgPath: string,\n  type: DependencyTypes = 'dependencies',\n  moveToSuggestion: DependencyTypes = 'devDependencies',\n  customCreateReportError = createReportError,\n): void {\n  const pkgDependencies = pkg[type];\n  if (!pkgDependencies) return;\n\n  const reportError = customCreateReportError('No dependencies', pkgPath);\n  reportError(\n    `Unexpected ${type}`,\n    `you should move them in ${moveToSuggestion}`,\n  );\n}\n","import type { GetDependencyPackageJson } from '../utils/createGetDependencyPackageJson';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson } from '../utils/packageTypes';\n\nexport type CheckResolutionMessage = (\n  depKey: string,\n  resolutionExplainedMessage: string,\n  checkMessageHelpers: {\n    getDependencyPackageJson: GetDependencyPackageJson;\n  },\n) => string | undefined;\n\nexport function checkResolutionsHasExplanation(\n  pkg: PackageJson,\n  pkgPathName: string,\n  checkMessage: CheckResolutionMessage,\n  getDependencyPackageJson: GetDependencyPackageJson,\n  customCreateReportError = createReportError,\n): void {\n  const pkgResolutions = pkg.resolutions || {};\n  const pkgResolutionsExplained = pkg.resolutionsExplained || {};\n  const reportError = customCreateReportError(\n    'Resolutions has explanation',\n    pkgPathName,\n  );\n\n  Object.keys(pkgResolutions).forEach((depKey) => {\n    if (!pkgResolutionsExplained[depKey]) {\n      reportError(`Missing \"${depKey}\" in resolutionsExplained.`);\n    }\n  });\n\n  Object.keys(pkgResolutionsExplained).forEach((depKey) => {\n    if (!pkgResolutions[depKey]) {\n      reportError(\n        `Found \"${depKey}\" in resolutionsExplained but not in resolutions.`,\n      );\n    } else {\n      const error = checkMessage(depKey, pkgResolutionsExplained[depKey], {\n        getDependencyPackageJson,\n      });\n      if (error) {\n        reportError(\n          `Invalid message for \"${depKey}\" in resolutionsExplained`,\n          `${error}.`,\n        );\n      }\n    }\n  });\n}\n","import semver from 'semver';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson } from '../utils/packageTypes';\n\nexport interface CheckResolutionsVersionsMatchOptions {\n  tryToAutoFix?: boolean;\n  customCreateReportError?: typeof createReportError;\n}\n\nexport function checkResolutionsVersionsMatch(\n  pkg: PackageJson,\n  pkgPathName: string,\n  {\n    tryToAutoFix,\n    customCreateReportError = createReportError,\n  }: CheckResolutionsVersionsMatchOptions = {},\n): void {\n  const pkgResolutions = pkg.resolutions || {};\n  const reportError = customCreateReportError(\n    'Resolutions match other dependencies',\n    pkgPathName,\n  );\n\n  Object.entries(pkgResolutions).forEach(([resolutionKey, resolutionValue]) => {\n    let depName = resolutionKey;\n    let resolutionDepVersion = resolutionValue;\n    if (resolutionValue.startsWith('patch:')) {\n      const matchResolutionInKey = /^(.+)@npm:(.+)$/.exec(resolutionKey);\n      if (matchResolutionInKey) {\n        [, depName, resolutionDepVersion] = matchResolutionInKey;\n      }\n    }\n    (['dependencies', 'devDependencies'] as const).forEach((depType) => {\n      const range = pkg?.[depType]?.[depName];\n\n      if (!range) return;\n\n      if (\n        !semver.satisfies(resolutionDepVersion, range, {\n          includePrerelease: true,\n        })\n      ) {\n        if (tryToAutoFix) {\n          pkg[depType]![depName] = resolutionDepVersion;\n        } else {\n          reportError(\n            `Invalid \"${depName}\" in ${depType}`,\n            `expecting \"${range}\" be \"${resolutionDepVersion}\" from resolutions.`,\n            false,\n            true,\n          );\n        }\n      }\n    });\n  });\n}\n","import semver from 'semver';\nimport { createReportError } from '../utils/createReportError';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport interface CheckSatisfiesVersionsOptions {\n  customCreateReportError?: typeof createReportError;\n}\n\nexport function checkSatisfiesVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  dependenciesRanges: Record<string, string>,\n  onlyWarnsForCheck?: OnlyWarnsForCheck,\n  {\n    customCreateReportError = createReportError,\n  }: CheckSatisfiesVersionsOptions = {},\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = customCreateReportError(\n    'Satisfies Versions',\n    pkgPathName,\n  );\n\n  Object.entries(dependenciesRanges).forEach(([depKey, range]) => {\n    const version = pkgDependencies[depKey];\n\n    if (!version) {\n      reportError(\n        `Missing \"${depKey}\" in ${type}`,\n        `should satisfies \"${range}\".`,\n        onlyWarnsForCheck?.shouldWarnsFor(depKey),\n      );\n    } else {\n      const minVersionOfVersion = semver.minVersion(version);\n      if (\n        !minVersionOfVersion ||\n        !semver.satisfies(minVersionOfVersion, range, {\n          includePrerelease: true,\n        })\n      ) {\n        reportError(\n          `Invalid \"${depKey}\" in ${type}`,\n          `\"${version}\" (in \"${depKey}\") should satisfies \"${range}\".`,\n          onlyWarnsForCheck?.shouldWarnsFor(depKey),\n        );\n      }\n    }\n  });\n}\n","import type { SemVer } from 'semver-utils';\nimport semverUtils from 'semver-utils';\n\nexport const parse = semverUtils.parse;\nexport const parseRange = semverUtils.parseRange;\n\n// semverUtils.stringify does not support the operator\nfunction stringify(semver: SemVer): string {\n  let str = '';\n  if (semver.operator) {\n    str += semver.operator;\n  }\n  str += semver.major || '0';\n  str += '.';\n  str += semver.minor || '0';\n  str += '.';\n  str += semver.patch || '0';\n  if (semver.release) {\n    str += `-${semver.release}`;\n  }\n  if (semver.build) {\n    str += `+${semver.build}`;\n  }\n  return str;\n}\n\nexport function getOperator(range: string): string | null {\n  const parsedRange = parseRange(range);\n  if (parsedRange.length !== 1) return null;\n  return parsedRange[0].operator || '';\n}\n\nexport function changeOperator(\n  range: string,\n  operator: string | null,\n): string | null {\n  if (operator === null) return range;\n  const parsedRange = parseRange(range);\n  if (parsedRange.length !== 1) return null;\n  const parsed = parsedRange[0];\n  parsed.operator = operator === '' ? undefined : operator;\n  return stringify(parsed);\n}\n\nexport function isExactParsedRange(\n  parsedRange: ReturnType<typeof semverUtils.parseRange>,\n): boolean {\n  return parsedRange.length === 1 && parsedRange[0].operator === undefined;\n}\n\nexport function isExactRange(range: string): boolean {\n  return isExactParsedRange(parseRange(range));\n}\n","import semver from 'semver';\nimport type { ShouldHaveExactVersions } from '../check-package';\nimport { createReportError } from '../utils/createReportError';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\nimport { changeOperator, getOperator } from '../utils/semverUtils';\nimport type { OnlyWarnsForCheck } from '../utils/warnForUtils';\n\nexport interface CheckSatisfiesVersionsFromDependencyOptions {\n  tryToAutoFix?: boolean;\n  shouldHaveExactVersions: ShouldHaveExactVersions;\n  onlyWarnsForCheck?: OnlyWarnsForCheck;\n  customCreateReportError?: typeof createReportError;\n}\n\nexport function checkSatisfiesVersionsFromDependency(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  depKeys: string[],\n  depPkg: PackageJson,\n  depType: DependencyTypes,\n  {\n    tryToAutoFix,\n    shouldHaveExactVersions,\n    onlyWarnsForCheck,\n    customCreateReportError = createReportError,\n  }: CheckSatisfiesVersionsFromDependencyOptions,\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const dependencies = depPkg[depType] || {};\n\n  const reportError = customCreateReportError(\n    `Satisfies Versions from \"${depPkg.name}\"`,\n    pkgPathName,\n  );\n\n  depKeys.forEach((depKey) => {\n    const range = dependencies[depKey];\n\n    if (!range) {\n      reportError(\n        `Unexpected missing dependency \"${depKey}\" in \"${depPkg.name}\"`,\n        `config expects \"${depKey}\" in \"${depType}\" of \"${depPkg.name}\".`,\n        undefined,\n        false,\n      );\n      return;\n    }\n\n    const version = pkgDependencies[depKey];\n\n    const getAutoFixIfExists = (): string | null | undefined => {\n      const existingOperator = version ? getOperator(version) : null;\n      const expectedOperator = (() => {\n        if (existingOperator !== null) {\n          return existingOperator;\n        }\n        return shouldHaveExactVersions(type) ? '' : null;\n      })();\n\n      return expectedOperator === ''\n        ? semver.minVersion(range)?.version\n        : changeOperator(range, expectedOperator);\n    };\n\n    const autoFix = (versionToApply: string): void => {\n      pkg[type] = {\n        ...pkg[type],\n        [depKey]: versionToApply,\n      };\n    };\n\n    if (!version) {\n      const fix = getAutoFixIfExists();\n      if (!fix || !tryToAutoFix) {\n        reportError(\n          `Missing \"${depKey}\" in \"${type}\" of \"${pkg.name}\"`,\n          `should satisfies \"${range}\" from \"${depPkg.name}\" in \"${depType}\".`,\n          onlyWarnsForCheck?.shouldWarnsFor(depKey),\n          !!fix,\n        );\n      } else {\n        autoFix(fix);\n      }\n    } else {\n      const minVersionOfVersion = semver.minVersion(version);\n      if (\n        !minVersionOfVersion ||\n        !semver.satisfies(minVersionOfVersion, range, {\n          includePrerelease: true,\n        })\n      ) {\n        const fix = getAutoFixIfExists();\n        if (!fix || !tryToAutoFix) {\n          reportError(\n            `Invalid \"${depKey}\" in \"${type}\" of \"${pkg.name}\"`,\n            `\"${version}\" should satisfies \"${range}\" from \"${depPkg.name}\"'s \"${depType}\".`,\n            onlyWarnsForCheck?.shouldWarnsFor(depKey),\n            !!fix,\n          );\n        } else {\n          autoFix(fix);\n        }\n      }\n    }\n  });\n}\n","import semver from 'semver';\nimport { createReportError } from '../utils/createReportError';\nimport { getEntries } from '../utils/object';\nimport type { DependenciesRanges, PackageJson } from '../utils/packageTypes';\n\ninterface CheckSatisfiesVersionsInDependencyOptions {\n  customCreateReportError?: typeof createReportError;\n}\n\nexport function checkSatisfiesVersionsInDependency(\n  pkgPathName: string,\n  depPkg: PackageJson,\n  dependenciesRanges: DependenciesRanges,\n  {\n    customCreateReportError = createReportError,\n  }: CheckSatisfiesVersionsInDependencyOptions = {},\n): void {\n  const reportError = customCreateReportError(\n    `Satisfies Versions In Dependency \"${depPkg.name}\"`,\n    pkgPathName,\n  );\n\n  for (const [dependenciesType, dependenciesTypeRanges] of getEntries(\n    dependenciesRanges,\n  )) {\n    if (!dependenciesTypeRanges) return;\n    const dependencies = depPkg[dependenciesType];\n\n    for (const [dependencyName, dependencyRange] of getEntries(\n      dependenciesTypeRanges,\n    )) {\n      if (dependencyRange == null) {\n        if (dependencies?.[dependencyName]) {\n          reportError(\n            `Invalid \"${dependencyName}\" in ${dependenciesType} of \"${depPkg.name}\"`,\n            'it should not be present',\n          );\n        }\n      } else if (!dependencies) {\n        reportError(\n          `Missing \"${dependencyName}\" in ${dependenciesType} of \"${depPkg.name}\"`,\n          `\"${dependenciesType}\" is missing in \"${depPkg.name}\"`,\n        );\n      } else if (!dependencies[dependencyName]) {\n        reportError(\n          `Missing \"${dependencyName}\" in ${dependenciesType} of \"${depPkg.name}\"`,\n          `\"${dependencyName}\" is missing in ${dependenciesType}`,\n        );\n      } else if (\n        !semver.satisfies(dependencies[dependencyName], dependencyRange, {\n          includePrerelease: true,\n        }) &&\n        !semver.intersects(dependencies[dependencyName], dependencyRange, {\n          includePrerelease: true,\n        })\n      ) {\n        reportError(\n          `Invalid \"${dependencyName}\" in ${dependenciesType} of \"${depPkg.name}\"`,\n          `\"${dependencies[dependencyName]}\" does not satisfies \"${dependencyRange}\"`,\n        );\n      }\n    }\n  }\n}\n","import { readFileSync, writeFileSync } from 'node:fs';\nimport { fileURLToPath } from 'node:url';\nimport { resolve as importResolve } from 'import-meta-resolve';\nimport type { PackageJson } from './packageTypes';\n\nexport function readPkgJson(packagePath: string): PackageJson {\n  return JSON.parse(readFileSync(packagePath, 'utf8')) as PackageJson;\n}\n\nexport function writePkgJson(packagePath: string, pkg: PackageJson): void {\n  writeFileSync(packagePath, `${JSON.stringify(pkg, null, 2)}\\n`);\n}\n\n/** @internal */\nexport function internalLoadPackageJsonFromNodeModules(\n  pkgDepName: string,\n  pkgDirname: string,\n): PackageJson {\n  const packageUrl = importResolve(\n    `${pkgDepName}/package.json`,\n    `file://${pkgDirname}/package.json`,\n  );\n  return readPkgJson(fileURLToPath(packageUrl));\n}\n","import type { PackageJson } from './packageTypes';\nimport {\n  internalLoadPackageJsonFromNodeModules,\n  readPkgJson,\n} from './pkgJsonUtils';\n\nexport type GetDependencyPackageJson = (pkgDepName: string) => PackageJson;\n\ntype NodeModulesPackagePathCache = Map<string, PackageJson>;\n\ninterface CreateGetDependencyPackageJsonOptions {\n  pkgDirname: string;\n  nodeModulesPackagePathCache?: NodeModulesPackagePathCache;\n  /** @internal */\n  internalCustomLoadPackageJsonFromNodeModules?: typeof internalLoadPackageJsonFromNodeModules;\n  /** @internal */\n  internalReadPkgJson?: typeof readPkgJson;\n}\n\nexport function createGetDependencyPackageJson({\n  pkgDirname,\n  nodeModulesPackagePathCache = new Map<string, PackageJson>(),\n  internalCustomLoadPackageJsonFromNodeModules = internalLoadPackageJsonFromNodeModules,\n  internalReadPkgJson = readPkgJson,\n}: CreateGetDependencyPackageJsonOptions): GetDependencyPackageJson {\n  return (pkgDepName) => {\n    const existing = nodeModulesPackagePathCache.get(pkgDepName);\n    if (existing) return existing;\n    let pkg: PackageJson;\n    if (pkgDepName.startsWith('.')) {\n      const packagePath = `${pkgDirname}/${pkgDepName}/package.json`;\n      pkg = internalReadPkgJson(packagePath);\n    } else {\n      try {\n        pkg = internalCustomLoadPackageJsonFromNodeModules(\n          pkgDepName,\n          pkgDirname,\n        );\n      } catch (error: unknown) {\n        if (!(error instanceof Error)) throw error;\n\n        if (\n          (error as NodeJS.ErrnoException).code !==\n          'ERR_PACKAGE_PATH_NOT_EXPORTED'\n        ) {\n          throw error;\n        }\n\n        const match = / in (.*[/\\\\]package\\.json)\\s+imported from/.exec(\n          error.message,\n        );\n\n        if (match) {\n          const [, matchPackageJson] = match;\n          pkg = internalReadPkgJson(matchPackageJson);\n        } else {\n          throw error;\n        }\n      }\n    }\n    nodeModulesPackagePathCache.set(pkgDepName, pkg);\n    return pkg;\n  };\n}\n","import { getEntries } from './object';\n\nexport type OnlyWarnsFor = string[];\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport type OnlyWarnsForDependencyMapping = Record<string | '*', OnlyWarnsFor>;\nexport type OnlyWarnsForOptionalDependencyMapping =\n  | OnlyWarnsFor\n  | OnlyWarnsForDependencyMapping\n  | undefined;\n\nexport interface OnlyWarnsForCheck {\n  configName: string;\n  getNotWarnedFor: () => string[];\n  shouldWarnsFor: (dependencyName: string) => boolean;\n}\n\nexport interface OnlyWarnsForMappingCheck {\n  configName: string;\n  getNotWarnedFor: () => Record<string, string[]>;\n  createFor: (dependencyName: string) => OnlyWarnsForCheck;\n}\n\nexport const createOnlyWarnsForArrayCheck = (\n  configName: string,\n  onlyWarnsFor: OnlyWarnsFor = [],\n): OnlyWarnsForCheck => {\n  const notWarnedFor = new Set(onlyWarnsFor);\n  return {\n    configName,\n    getNotWarnedFor: () => [...notWarnedFor],\n    shouldWarnsFor(dependencyName) {\n      if (onlyWarnsFor.includes(dependencyName)) {\n        notWarnedFor.delete(dependencyName);\n        return true;\n      }\n      return false;\n    },\n  };\n};\n\nconst isMapping = (\n  onlyWarnsFor: OnlyWarnsForOptionalDependencyMapping,\n): onlyWarnsFor is OnlyWarnsForDependencyMapping => {\n  return typeof onlyWarnsFor === 'object' && !Array.isArray(onlyWarnsFor);\n};\n\nexport const createOnlyWarnsForMappingCheck = (\n  configName: string,\n  onlyWarnsFor: OnlyWarnsForOptionalDependencyMapping,\n): OnlyWarnsForMappingCheck => {\n  if (isMapping(onlyWarnsFor)) {\n    const notWarnedFor = Object.fromEntries(\n      getEntries(onlyWarnsFor).map(([entryKey, entryValue]) => [\n        entryKey,\n        new Set(entryValue),\n      ]),\n    );\n    return {\n      configName,\n      getNotWarnedFor: () =>\n        Object.fromEntries(\n          getEntries(notWarnedFor)\n            .filter(([key, set]) => set.size > 0)\n            .map(([key, set]) => [key, [...set]]),\n        ),\n      createFor(dependencyNameLevel1) {\n        return {\n          configName,\n          getNotWarnedFor() {\n            throw new Error('Invalid call to getNotWarnedFor()');\n          },\n          shouldWarnsFor(dependencyName) {\n            if (onlyWarnsFor['*']?.includes(dependencyName)) {\n              notWarnedFor['*'].delete(dependencyName);\n              return true;\n            }\n            if (onlyWarnsFor[dependencyNameLevel1]?.includes(dependencyName)) {\n              notWarnedFor[dependencyNameLevel1].delete(dependencyName);\n              return true;\n            }\n            return false;\n          },\n        };\n      },\n    };\n  }\n\n  const arrayOnlyWarnsForCheck = createOnlyWarnsForArrayCheck(\n    configName,\n    onlyWarnsFor,\n  );\n  return {\n    configName,\n    getNotWarnedFor: (): Record<string, string[]> => {\n      const notWarnedFor = arrayOnlyWarnsForCheck.getNotWarnedFor();\n      if (notWarnedFor.length > 0) {\n        return { '*': notWarnedFor };\n      }\n      return {};\n    },\n    createFor() {\n      return {\n        configName,\n        getNotWarnedFor() {\n          throw new Error('Invalid call to getNotWarnedFor()');\n        },\n        shouldWarnsFor(dependencyName) {\n          return arrayOnlyWarnsForCheck.shouldWarnsFor(dependencyName);\n        },\n      };\n    },\n  };\n};\n","import path from 'node:path';\nimport util from 'node:util';\nimport { checkDirectDuplicateDependencies } from './checks/checkDirectDuplicateDependencies';\nimport { checkDirectPeerDependencies } from './checks/checkDirectPeerDependencies';\nimport { checkExactVersions } from './checks/checkExactVersions';\nimport { checkIdenticalVersions } from './checks/checkIdenticalVersions';\nimport { checkIdenticalVersionsThanDependency } from './checks/checkIdenticalVersionsThanDependency';\nimport { checkMinRangeSatisfies } from './checks/checkMinRangeSatisfies';\nimport { checkNoDependencies } from './checks/checkNoDependencies';\nimport type { CheckResolutionMessage } from './checks/checkResolutionsHasExplanation';\nimport { checkResolutionsHasExplanation } from './checks/checkResolutionsHasExplanation';\nimport { checkResolutionsVersionsMatch } from './checks/checkResolutionsVersionsMatch';\nimport { checkSatisfiesVersions } from './checks/checkSatisfiesVersions';\nimport { checkSatisfiesVersionsFromDependency } from './checks/checkSatisfiesVersionsFromDependency';\nimport { checkSatisfiesVersionsInDependency } from './checks/checkSatisfiesVersionsInDependency';\nimport type { GetDependencyPackageJson } from './utils/createGetDependencyPackageJson';\nimport { createGetDependencyPackageJson } from './utils/createGetDependencyPackageJson';\nimport { displayConclusion } from './utils/createReportError';\nimport { getEntries } from './utils/object';\nimport type {\n  DependenciesRanges,\n  DependencyName,\n  DependencyTypes,\n  PackageJson,\n} from './utils/packageTypes';\nimport { readPkgJson, writePkgJson } from './utils/pkgJsonUtils';\nimport type {\n  OnlyWarnsForOptionalDependencyMapping,\n  OnlyWarnsFor,\n  OnlyWarnsForDependencyMapping,\n} from './utils/warnForUtils';\nimport {\n  createOnlyWarnsForArrayCheck,\n  createOnlyWarnsForMappingCheck,\n} from './utils/warnForUtils';\n\nexport interface CreateCheckPackageOptions {\n  packageDirectoryPath?: string;\n  isLibrary?: boolean | ((pkg: PackageJson) => boolean);\n  /** @internal */\n  internalWorkspacePkgDirectoryPath?: string;\n}\n\nexport interface CheckDirectPeerDependenciesOptions {\n  missingOnlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  invalidOnlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  internalMissingConfigName?: string;\n  internalInvalidConfigName?: string;\n}\n\nexport interface CheckDirectDuplicateDependenciesOptions {\n  onlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  internalConfigName?: string;\n}\n\nexport interface OnlyWarnsForInPackageCheckPackageRecommendedOption {\n  exactVersions: OnlyWarnsFor;\n}\n\nexport interface OnlyWarnsForInDependencyCheckPackageRecommendedOption {\n  duplicateDirectDependency: OnlyWarnsFor;\n  missingPeerDependency: OnlyWarnsFor;\n  invalidPeerDependencyVersion: OnlyWarnsFor;\n}\n\nexport type OnlyWarnsForInDependenciesCheckPackageRecommendedOption = Record<\n  // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents, @typescript-eslint/sort-type-constituents\n  '*' | string,\n  OnlyWarnsForInDependencyCheckPackageRecommendedOption\n>;\n\nexport interface CheckRecommendedOptions {\n  /** default is true for libraries, false otherwise */\n  allowRangeVersionsInDependencies?: boolean;\n  onlyWarnsForInPackage?: OnlyWarnsForInPackageCheckPackageRecommendedOption;\n  onlyWarnsForInDependencies?: OnlyWarnsForInDependenciesCheckPackageRecommendedOption;\n  /** @internal */\n  internalExactVersionsIgnore?: OnlyWarnsFor;\n  /** function to check the value in the \"resolutionExplained\" key in package.json */\n  checkResolutionMessage?: CheckResolutionMessage;\n}\n\nexport interface CheckExactVersionsOptions {\n  allowRangeVersionsInDependencies?: boolean;\n  onlyWarnsFor?: OnlyWarnsFor;\n  /** @internal */\n  internalExactVersionsIgnore?: OnlyWarnsFor;\n}\n\nexport interface CheckPackageApiRunOptions {\n  /** @internal */\n  skipDisplayConclusion?: boolean;\n}\n\nexport interface CheckPackageApi {\n  run: (options?: CheckPackageApiRunOptions) => Promise<void>;\n\n  /** @internal */\n  pkg: PackageJson;\n  /** @internal */\n  pkgDirname: string;\n  /** @internal */\n  pkgPathName: string;\n  /** @internal */\n  isPkgLibrary: boolean;\n  /** @internal */\n  getDependencyPackageJson: GetDependencyPackageJson;\n\n  checkExactVersions: (options?: CheckExactVersionsOptions) => CheckPackageApi;\n\n  checkResolutionsVersionsMatch: () => CheckPackageApi;\n\n  checkExactDevVersions: (\n    options?: CheckExactVersionsOptions,\n  ) => CheckPackageApi;\n\n  checkNoDependencies: (\n    type?: DependencyTypes,\n    moveToSuggestion?: DependencyTypes,\n  ) => CheckPackageApi;\n\n  /**\n   * @example\n   * ```\n   * .checkDirectPeerDependencies({\n   *   invalidOnlyWarnsFor: ['semver'],\n   * })\n   * ```\n   */\n  checkDirectPeerDependencies: (\n    options?: CheckDirectPeerDependenciesOptions,\n  ) => CheckPackageApi;\n\n  /**\n   * @example\n   * ```\n   * .checkDirectDuplicateDependencies({\n   *   invalidOnlyWarnsFor: { '*': 'type-fest' },\n   * })\n   * ```\n   */\n  checkDirectDuplicateDependencies: (\n    options?: CheckDirectDuplicateDependenciesOptions,\n  ) => CheckPackageApi;\n\n  checkResolutionsHasExplanation: (\n    checkMessage?: CheckResolutionMessage,\n  ) => CheckPackageApi;\n\n  checkRecommended: (options?: CheckRecommendedOptions) => CheckPackageApi;\n\n  /**\n   * @example\n   * Check that your package.json contains the same version of @babel/core than react-scripts, both in resolutions and devDependencies\n   * ```\n   * .checkIdenticalVersionsThanDependency('react-scripts', {\n   *   resolutions: ['@babel/core'],\n   *   devDependencies: ['@babel/core'],\n   * })\n   * ```\n   */\n  checkIdenticalVersionsThanDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n\n  checkIdenticalVersionsThanDevDependencyOfDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n\n  /**\n   * Check that your package.json dependencies specifically satisfies the range passed in config\n   *\n   * @example\n   * ```\n   * .checkSatisfiesVersions({\n   *   devDependencies: {\n   *     eslint: '^8.0.0'\n   *   },\n   * })\n   * ```\n   */\n  checkSatisfiesVersions: (\n    dependencies: Partial<\n      Record<DependencyTypes, Record<DependencyName, string>>\n    >,\n  ) => CheckPackageApi;\n\n  /**\n   * Check that your package.json dependencies specifically satisfies the range set in another dependencies\n   * @example\n   * ```\n   * .checkSatisfiesVersionsFromDependency('@pob/eslint-config-typescript', {\n   *   devDependencies: [\n   *     '@typescript-eslint/eslint-plugin',\n   *     '@typescript-eslint/parser',\n   *   ],\n   * })\n   * ```\n   */\n  checkSatisfiesVersionsFromDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n\n  checkSatisfiesVersionsInDevDependenciesOfDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n\n  /**\n   * Check that your package.json dependencies have the exact same version that another dependency also present in your package.json\n   * @example\n   * The react-dom version should match react, so this check will ensure it does\n   * ```\n   * .checkIdenticalVersions({\n   *   dependencies: {\n   *     react: {\n   *       dependencies: ['react-dom'],\n   *       devDependencies: ['react-test-renderer'],\n   *     },\n   *   },\n   * })\n   * ```\n   */\n  checkIdenticalVersions: (dependencies: {\n    resolutions?: Record<string, string[]>;\n    dependencies?: Record<string, string[]>;\n    devDependencies?: Record<string, string[]>;\n  }) => CheckPackageApi;\n\n  checkSatisfiesVersionsBetweenDependencies: (\n    depName1: string,\n    depName2: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n\n  /**\n   * Check versions in a dependency\n   * Also useable to check if a dependency is not present\n   *\n   * @example\n   * Checking if `@lerna/version` has no dependency `@nrwl/devkit`\n   * ```\n   * .checkSatisfiesVersionsInDependency('@lerna/version', {\n   *   dependencies: {\n   *     '@nrwl/devkit': null,\n   *   },\n   * })\n   * ```\n   */\n  checkSatisfiesVersionsInDependency: (\n    depName: string,\n    dependenciesRanges: DependenciesRanges,\n  ) => CheckPackageApi;\n\n  checkMinRangeDependenciesSatisfiesDevDependencies: () => CheckPackageApi;\n  checkMinRangePeerDependenciesSatisfiesDependencies: () => CheckPackageApi;\n}\n\nexport type ShouldHaveExactVersions = (depType: DependencyTypes) => boolean;\n\nexport function createCheckPackage({\n  packageDirectoryPath = '.',\n  internalWorkspacePkgDirectoryPath,\n  isLibrary = false,\n}: CreateCheckPackageOptions = {}): CheckPackageApi {\n  const pkgDirname = path.resolve(packageDirectoryPath);\n  const pkgPath = `${pkgDirname}/package.json`;\n  const pkgPathName = `${packageDirectoryPath}/package.json`;\n  const pkg = readPkgJson(pkgPath);\n  const copyPkg: PackageJson = JSON.parse(JSON.stringify(pkg)) as PackageJson;\n  const isPkgLibrary =\n    typeof isLibrary === 'function' ? isLibrary(pkg) : isLibrary;\n  const shouldHaveExactVersions: ShouldHaveExactVersions = (depType) =>\n    !isPkgLibrary ? true : depType === 'devDependencies';\n\n  let tryToAutoFix = false;\n\n  if (process.argv.slice(2).includes('--fix')) {\n    tryToAutoFix = true;\n  }\n\n  const writePackageIfChanged = (): void => {\n    if (!tryToAutoFix) return;\n    if (util.isDeepStrictEqual(pkg, copyPkg)) return;\n    writePkgJson(pkgPath, pkg);\n  };\n\n  const getDependencyPackageJson = createGetDependencyPackageJson({\n    pkgDirname,\n  });\n\n  let runCalled = false;\n\n  if (!internalWorkspacePkgDirectoryPath) {\n    process.on('beforeExit', () => {\n      if (!runCalled) {\n        throw new Error('Call .run() and await the result.');\n      }\n    });\n  }\n\n  class Job {\n    name: string;\n\n    fn: () => Promise<void>;\n\n    constructor(name: string, fn: () => Promise<void>) {\n      this.name = name;\n      this.fn = fn;\n    }\n\n    async run(): Promise<void> {\n      try {\n        await this.fn();\n      } catch (error) {\n        throw new Error(`${this.name} failed: ${(error as Error).message}`);\n      }\n    }\n  }\n\n  const jobs: Job[] = [];\n\n  return {\n    async run({\n      skipDisplayConclusion = false,\n    }: CheckPackageApiRunOptions = {}) {\n      runCalled = true;\n      // TODO parallel\n      for (const job of jobs) {\n        await job.run();\n      }\n      writePackageIfChanged();\n      if (!skipDisplayConclusion) {\n        displayConclusion();\n      }\n    },\n\n    pkg,\n    pkgDirname,\n    pkgPathName,\n    isPkgLibrary,\n    getDependencyPackageJson,\n    checkExactVersions({\n      onlyWarnsFor,\n      internalExactVersionsIgnore,\n      allowRangeVersionsInDependencies = true,\n    } = {}) {\n      jobs.push(\n        new Job(this.checkExactVersions.name, async () => {\n          const onlyWarnsForCheck = createOnlyWarnsForArrayCheck(\n            'checkExactVersions.onlyWarnsFor',\n            onlyWarnsFor,\n          );\n          await checkExactVersions(\n            pkg,\n            pkgPathName,\n            !allowRangeVersionsInDependencies\n              ? ['dependencies', 'devDependencies', 'resolutions']\n              : ['devDependencies', 'resolutions'],\n            {\n              onlyWarnsForCheck,\n              internalExactVersionsIgnore,\n              getDependencyPackageJson,\n              tryToAutoFix,\n            },\n          );\n        }),\n      );\n      return this;\n    },\n\n    checkResolutionsVersionsMatch() {\n      checkResolutionsVersionsMatch(pkg, pkgPathName, {\n        tryToAutoFix,\n      });\n      return this;\n    },\n\n    checkExactDevVersions({ onlyWarnsFor } = {}) {\n      jobs.push(\n        new Job(this.checkExactDevVersions.name, async () => {\n          const onlyWarnsForCheck = createOnlyWarnsForArrayCheck(\n            'checkExactDevVersions.onlyWarnsFor',\n            onlyWarnsFor,\n          );\n          await checkExactVersions(pkg, pkgPathName, ['devDependencies'], {\n            onlyWarnsForCheck,\n            tryToAutoFix,\n            getDependencyPackageJson,\n          });\n        }),\n      );\n      return this;\n    },\n\n    checkNoDependencies(\n      type = 'dependencies',\n      moveToSuggestion = 'devDependencies',\n    ) {\n      checkNoDependencies(pkg, pkgPathName, type, moveToSuggestion);\n      return this;\n    },\n\n    checkDirectPeerDependencies({\n      missingOnlyWarnsFor,\n      invalidOnlyWarnsFor,\n      internalMissingConfigName = 'missingOnlyWarnsFor',\n      internalInvalidConfigName = 'invalidOnlyWarnsFor',\n    } = {}) {\n      jobs.push(\n        new Job(this.checkDirectPeerDependencies.name, async () => {\n          const missingOnlyWarnsForCheck = createOnlyWarnsForMappingCheck(\n            internalMissingConfigName,\n            missingOnlyWarnsFor,\n          );\n          const invalidOnlyWarnsForCheck =\n            internalInvalidConfigName === internalMissingConfigName\n              ? missingOnlyWarnsForCheck\n              : createOnlyWarnsForMappingCheck(\n                  internalInvalidConfigName,\n                  invalidOnlyWarnsFor,\n                );\n          await checkDirectPeerDependencies(\n            isPkgLibrary,\n            pkg,\n            pkgPathName,\n            getDependencyPackageJson,\n            missingOnlyWarnsForCheck,\n            invalidOnlyWarnsForCheck,\n          );\n        }),\n      );\n      return this;\n    },\n\n    checkDirectDuplicateDependencies({\n      onlyWarnsFor,\n      internalConfigName = 'onlyWarnsFor',\n    } = {}) {\n      jobs.push(\n        new Job(this.checkDirectDuplicateDependencies.name, async () => {\n          await checkDirectDuplicateDependencies(\n            pkg,\n            pkgPathName,\n            isPkgLibrary,\n            'dependencies',\n            getDependencyPackageJson,\n            createOnlyWarnsForMappingCheck(internalConfigName, onlyWarnsFor),\n          );\n        }),\n      );\n      return this;\n    },\n\n    checkResolutionsHasExplanation(\n      checkMessage: CheckResolutionMessage = (depKey, message) => undefined,\n    ) {\n      checkResolutionsHasExplanation(\n        pkg,\n        pkgPathName,\n        checkMessage,\n        getDependencyPackageJson,\n      );\n      return this;\n    },\n\n    checkRecommended({\n      onlyWarnsForInPackage,\n      onlyWarnsForInDependencies,\n      allowRangeVersionsInDependencies = isPkgLibrary,\n      internalExactVersionsIgnore,\n      checkResolutionMessage,\n    } = {}) {\n      let internalMissingPeerDependenciesOnlyWarnsFor: OnlyWarnsForOptionalDependencyMapping =\n        {};\n      let internalInvalidPeerDependenciesOnlyWarnsFor: OnlyWarnsForOptionalDependencyMapping =\n        {};\n      let internalDirectDuplicateDependenciesOnlyWarnsFor: OnlyWarnsForOptionalDependencyMapping =\n        {};\n\n      const exactVersionsOnlyWarnsFor =\n        onlyWarnsForInPackage?.exactVersions || [];\n\n      if (onlyWarnsForInDependencies) {\n        internalDirectDuplicateDependenciesOnlyWarnsFor = {};\n        internalMissingPeerDependenciesOnlyWarnsFor = {};\n        internalInvalidPeerDependenciesOnlyWarnsFor = {};\n\n        getEntries(onlyWarnsForInDependencies).forEach(\n          ([dependencyNameOrSpecialKey, onlyWarnsForValue]) => {\n            if (onlyWarnsForValue.duplicateDirectDependency) {\n              (\n                internalDirectDuplicateDependenciesOnlyWarnsFor as OnlyWarnsForDependencyMapping\n              )[dependencyNameOrSpecialKey] =\n                onlyWarnsForValue.duplicateDirectDependency;\n            }\n            if (onlyWarnsForValue.missingPeerDependency) {\n              (\n                internalMissingPeerDependenciesOnlyWarnsFor as OnlyWarnsForDependencyMapping\n              )[dependencyNameOrSpecialKey] =\n                onlyWarnsForValue.missingPeerDependency;\n            }\n            if (onlyWarnsForValue.invalidPeerDependencyVersion) {\n              (\n                internalInvalidPeerDependenciesOnlyWarnsFor as OnlyWarnsForDependencyMapping\n              )[dependencyNameOrSpecialKey] =\n                onlyWarnsForValue.invalidPeerDependencyVersion;\n            }\n          },\n        );\n      }\n\n      this.checkExactVersions({\n        allowRangeVersionsInDependencies,\n        onlyWarnsFor: exactVersionsOnlyWarnsFor,\n        internalExactVersionsIgnore,\n      });\n\n      this.checkResolutionsVersionsMatch();\n      this.checkResolutionsHasExplanation(checkResolutionMessage);\n\n      this.checkDirectPeerDependencies({\n        missingOnlyWarnsFor: internalMissingPeerDependenciesOnlyWarnsFor,\n        invalidOnlyWarnsFor: internalInvalidPeerDependenciesOnlyWarnsFor,\n        internalMissingConfigName:\n          'onlyWarnsForInDependencies.missingPeerDependency',\n        internalInvalidConfigName:\n          'onlyWarnsForInDependencies.invalidPeerDependencyVersion',\n      });\n\n      this.checkDirectDuplicateDependencies({\n        onlyWarnsFor: internalDirectDuplicateDependenciesOnlyWarnsFor,\n        internalConfigName:\n          'onlyWarnsForInDependencies.duplicateDirectDependency',\n      });\n\n      if (isPkgLibrary) {\n        this.checkMinRangeDependenciesSatisfiesDevDependencies();\n        this.checkMinRangePeerDependenciesSatisfiesDependencies();\n      }\n\n      return this;\n    },\n\n    checkIdenticalVersionsThanDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      jobs.push(\n        new Job(this.checkIdenticalVersionsThanDependency.name, async () => {\n          const depPkg = getDependencyPackageJson(depName);\n          if (resolutions) {\n            checkIdenticalVersionsThanDependency(\n              pkg,\n              pkgPathName,\n              'resolutions',\n              resolutions,\n              depPkg,\n              depPkg.dependencies,\n            );\n          }\n          if (dependencies) {\n            checkIdenticalVersionsThanDependency(\n              pkg,\n              pkgPathName,\n              'dependencies',\n              dependencies,\n              depPkg,\n              depPkg.dependencies,\n            );\n          }\n          if (devDependencies) {\n            checkIdenticalVersionsThanDependency(\n              pkg,\n              pkgPathName,\n              'devDependencies',\n              devDependencies,\n              depPkg,\n              depPkg.dependencies,\n            );\n          }\n        }),\n      );\n      return this;\n    },\n\n    checkIdenticalVersionsThanDevDependencyOfDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      jobs.push(\n        new Job(this.checkSatisfiesVersionsFromDependency.name, async () => {\n          const depPkg = getDependencyPackageJson(depName);\n          if (resolutions) {\n            checkIdenticalVersionsThanDependency(\n              pkg,\n              pkgPathName,\n              'resolutions',\n              resolutions,\n              depPkg,\n              depPkg.devDependencies,\n            );\n          }\n          if (dependencies) {\n            checkIdenticalVersionsThanDependency(\n              pkg,\n              pkgPathName,\n              'dependencies',\n              dependencies,\n              depPkg,\n              depPkg.devDependencies,\n            );\n          }\n          if (devDependencies) {\n            checkIdenticalVersionsThanDependency(\n              pkg,\n              pkgPathName,\n              'devDependencies',\n              devDependencies,\n              depPkg,\n              depPkg.devDependencies,\n            );\n          }\n        }),\n      );\n      return this;\n    },\n\n    checkSatisfiesVersions(dependencies) {\n      Object.entries(dependencies).forEach(\n        ([dependencyType, dependenciesRanges]) => {\n          checkSatisfiesVersions(\n            pkg,\n            pkgPathName,\n            dependencyType as DependencyTypes,\n            dependenciesRanges,\n          );\n        },\n      );\n      return this;\n    },\n\n    checkSatisfiesVersionsFromDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      jobs.push(\n        new Job(this.checkSatisfiesVersionsFromDependency.name, async () => {\n          const depPkg = getDependencyPackageJson(depName);\n          if (resolutions) {\n            checkSatisfiesVersionsFromDependency(\n              pkg,\n              pkgPathName,\n              'resolutions',\n              resolutions,\n              depPkg,\n              'dependencies',\n              { tryToAutoFix, shouldHaveExactVersions },\n            );\n          }\n          if (dependencies) {\n            checkSatisfiesVersionsFromDependency(\n              pkg,\n              pkgPathName,\n              'dependencies',\n              dependencies,\n              depPkg,\n              'dependencies',\n              { tryToAutoFix, shouldHaveExactVersions },\n            );\n          }\n          if (devDependencies) {\n            checkSatisfiesVersionsFromDependency(\n              pkg,\n              pkgPathName,\n              'devDependencies',\n              devDependencies,\n              depPkg,\n              'dependencies',\n              { tryToAutoFix, shouldHaveExactVersions },\n            );\n          }\n        }),\n      );\n      return this;\n    },\n\n    checkSatisfiesVersionsInDevDependenciesOfDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      jobs.push(\n        new Job(\n          this.checkSatisfiesVersionsInDevDependenciesOfDependency.name,\n          async () => {\n            const depPkg = getDependencyPackageJson(depName);\n            if (resolutions) {\n              checkSatisfiesVersionsFromDependency(\n                pkg,\n                pkgPathName,\n                'resolutions',\n                resolutions,\n                depPkg,\n                'devDependencies',\n                { tryToAutoFix, shouldHaveExactVersions },\n              );\n            }\n            if (dependencies) {\n              checkSatisfiesVersionsFromDependency(\n                pkg,\n                pkgPathName,\n                'dependencies',\n                dependencies,\n                depPkg,\n                'devDependencies',\n                { tryToAutoFix, shouldHaveExactVersions },\n              );\n            }\n            if (devDependencies) {\n              checkSatisfiesVersionsFromDependency(\n                pkg,\n                pkgPathName,\n                'devDependencies',\n                devDependencies,\n                depPkg,\n                'devDependencies',\n                { tryToAutoFix, shouldHaveExactVersions },\n              );\n            }\n          },\n        ),\n      );\n      return this;\n    },\n\n    checkIdenticalVersions({ resolutions, dependencies, devDependencies }) {\n      if (resolutions) {\n        checkIdenticalVersions(pkg, pkgPathName, 'resolutions', resolutions);\n      }\n      if (dependencies) {\n        checkIdenticalVersions(pkg, pkgPathName, 'dependencies', dependencies);\n      }\n      if (devDependencies) {\n        checkIdenticalVersions(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsBetweenDependencies(\n      depName1,\n      depName2,\n      { dependencies, devDependencies },\n    ) {\n      jobs.push(\n        new Job(\n          this.checkSatisfiesVersionsBetweenDependencies.name,\n          async () => {\n            const [depPkg1, depPkg2] = await Promise.all([\n              getDependencyPackageJson(depName1),\n              getDependencyPackageJson(depName2),\n            ]);\n\n            if (dependencies) {\n              checkSatisfiesVersionsFromDependency(\n                depPkg2,\n                pkgPathName,\n                'dependencies',\n                dependencies,\n                depPkg1,\n                'dependencies',\n                { tryToAutoFix, shouldHaveExactVersions },\n              );\n            }\n            if (devDependencies) {\n              checkSatisfiesVersionsFromDependency(\n                depPkg2,\n                pkgPathName,\n                'devDependencies',\n                devDependencies,\n                depPkg1,\n                'dependencies',\n                { tryToAutoFix, shouldHaveExactVersions },\n              );\n            }\n          },\n        ),\n      );\n      return this;\n    },\n\n    checkSatisfiesVersionsInDependency(depName, dependenciesRanges) {\n      jobs.push(\n        new Job(this.checkSatisfiesVersionsInDependency.name, async () => {\n          const depPkg = getDependencyPackageJson(depName);\n          checkSatisfiesVersionsInDependency(\n            pkgPathName,\n            depPkg,\n            dependenciesRanges,\n          );\n        }),\n      );\n      return this;\n    },\n\n    checkMinRangeDependenciesSatisfiesDevDependencies() {\n      jobs.push(\n        new Job(this.checkSatisfiesVersionsInDependency.name, async () => {\n          checkMinRangeSatisfies(\n            pkgPathName,\n            pkg,\n            'dependencies',\n            'devDependencies',\n            { tryToAutoFix },\n          );\n        }),\n      );\n      return this;\n    },\n\n    checkMinRangePeerDependenciesSatisfiesDependencies() {\n      jobs.push(\n        new Job(this.checkSatisfiesVersionsInDependency.name, async () => {\n          checkMinRangeSatisfies(\n            pkgPathName,\n            pkg,\n            'peerDependencies',\n            'dependencies',\n            { tryToAutoFix },\n          );\n        }),\n      );\n      return this;\n    },\n  };\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport { globSync } from 'glob';\nimport type { Except } from 'type-fest';\nimport type {\n  CreateCheckPackageOptions,\n  CheckPackageApi,\n  OnlyWarnsForInDependenciesCheckPackageRecommendedOption,\n  OnlyWarnsForInDependencyCheckPackageRecommendedOption,\n  OnlyWarnsForInPackageCheckPackageRecommendedOption,\n} from './check-package';\nimport { createCheckPackage } from './check-package';\nimport { checkDuplicateDependencies } from './checks/checkDuplicateDependencies';\nimport type { CheckResolutionMessage } from './checks/checkResolutionsHasExplanation';\nimport {\n  createReportError,\n  displayConclusion,\n  reportNotWarnedForMapping,\n} from './utils/createReportError';\nimport type { PackageJson } from './utils/packageTypes';\nimport type { OnlyWarnsForOptionalDependencyMapping } from './utils/warnForUtils';\nimport { createOnlyWarnsForMappingCheck } from './utils/warnForUtils';\n\ninterface OnlyWarnsForInMonorepoPackageCheckPackageRecommendedOption\n  extends OnlyWarnsForInPackageCheckPackageRecommendedOption {\n  duplicateDirectDependency: OnlyWarnsForInDependencyCheckPackageRecommendedOption['duplicateDirectDependency'];\n}\n\ntype OnlyWarnsForInMonorepoPackagesCheckPackageRecommendedOption = Record<\n  // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents, @typescript-eslint/sort-type-constituents\n  '*' | string,\n  OnlyWarnsForInMonorepoPackageCheckPackageRecommendedOption\n>;\n\ntype OnlyWarnsForInMonorepoPackagesDependenciesCheckPackageRecommendedOption =\n  Record<string, OnlyWarnsForInDependenciesCheckPackageRecommendedOption>;\n\nexport interface CheckPackageWithWorkspacesRecommendedOptions {\n  allowRangeVersionsInLibraries?: boolean;\n  monorepoDirectDuplicateDependenciesOnlyWarnsFor?: OnlyWarnsForOptionalDependencyMapping;\n  onlyWarnsForInRootPackage?: OnlyWarnsForInPackageCheckPackageRecommendedOption;\n  onlyWarnsForInMonorepoPackages?: OnlyWarnsForInMonorepoPackagesCheckPackageRecommendedOption;\n  onlyWarnsForInRootDependencies?: OnlyWarnsForInDependenciesCheckPackageRecommendedOption;\n  onlyWarnsForInMonorepoPackagesDependencies?: OnlyWarnsForInMonorepoPackagesDependenciesCheckPackageRecommendedOption;\n  checkResolutionMessage?: CheckResolutionMessage;\n}\n\nexport interface CheckPackageWithWorkspacesApi {\n  run: () => Promise<void>;\n\n  checkRecommended: (\n    options?: CheckPackageWithWorkspacesRecommendedOptions,\n  ) => CheckPackageWithWorkspacesApi;\n\n  forRoot: (\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n  forEach: (\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n  for: (\n    id: string,\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n}\n\ninterface CreateCheckPackageWithWorkspacesOptions\n  extends Except<CreateCheckPackageOptions, 'isLibrary'> {\n  isLibrary?: (pkg: PackageJson) => boolean;\n}\n\nexport function createCheckPackageWithWorkspaces(\n  createCheckPackageOptions: CreateCheckPackageWithWorkspacesOptions = {},\n): CheckPackageWithWorkspacesApi {\n  const checkPackage = createCheckPackage({\n    ...createCheckPackageOptions,\n    isLibrary: false,\n  });\n  const { pkg, pkgDirname } = checkPackage;\n\n  const pkgWorkspaces: string[] | undefined =\n    pkg.workspaces && !Array.isArray(pkg.workspaces)\n      ? pkg.workspaces.packages\n      : pkg.workspaces;\n\n  if (!pkgWorkspaces) {\n    throw new Error('Package is missing \"workspaces\"');\n  }\n\n  const workspacePackagesPaths: string[] = [];\n\n  if (pkgWorkspaces) {\n    pkgWorkspaces.forEach((pattern) => {\n      const match = globSync(pattern, { cwd: pkgDirname });\n      match.forEach((pathMatch) => {\n        if (!fs.existsSync(path.join(pathMatch, 'package.json'))) {\n          console.log(\n            `Ignored potential directory, no package.json found: ${pathMatch}`,\n          );\n          return;\n        }\n        const subPkgDirectoryPath = path.relative(process.cwd(), pathMatch);\n        workspacePackagesPaths.push(subPkgDirectoryPath);\n      });\n    });\n  }\n\n  const checksWorkspaces = new Map<string, CheckPackageApi>(\n    workspacePackagesPaths.map((subPkgDirectoryPath) => {\n      const checkPkg = createCheckPackage({\n        ...createCheckPackageOptions,\n        packageDirectoryPath: subPkgDirectoryPath,\n        internalWorkspacePkgDirectoryPath:\n          createCheckPackageOptions.packageDirectoryPath || '.',\n      });\n      return [checkPkg.pkg.name, checkPkg];\n    }),\n  );\n\n  return {\n    async run() {\n      for (const checksWorkspace of [\n        checkPackage,\n        ...checksWorkspaces.values(),\n      ]) {\n        await checksWorkspace.run({ skipDisplayConclusion: true });\n      }\n\n      displayConclusion();\n    },\n\n    checkRecommended({\n      allowRangeVersionsInLibraries = true,\n      onlyWarnsForInRootPackage,\n      onlyWarnsForInMonorepoPackages,\n      onlyWarnsForInRootDependencies,\n      onlyWarnsForInMonorepoPackagesDependencies = {},\n      monorepoDirectDuplicateDependenciesOnlyWarnsFor,\n      checkResolutionMessage,\n    } = {}) {\n      checkPackage.checkNoDependencies();\n      checkPackage.checkRecommended({\n        onlyWarnsForInPackage: onlyWarnsForInRootPackage,\n        onlyWarnsForInDependencies: onlyWarnsForInRootDependencies,\n        checkResolutionMessage,\n      });\n\n      const monorepoDirectDuplicateDependenciesOnlyWarnsForCheck =\n        createOnlyWarnsForMappingCheck(\n          'monorepoDirectDuplicateDependenciesOnlyWarnsFor',\n          monorepoDirectDuplicateDependenciesOnlyWarnsFor,\n        );\n\n      const previousCheckedWorkspaces = new Map<string, CheckPackageApi>();\n      checksWorkspaces.forEach((checkSubPackage, id) => {\n        checkSubPackage.checkRecommended({\n          allowRangeVersionsInDependencies: checkSubPackage.isPkgLibrary\n            ? allowRangeVersionsInLibraries\n            : false,\n          onlyWarnsForInPackage: onlyWarnsForInMonorepoPackages\n            ? {\n                ...onlyWarnsForInMonorepoPackages['*'],\n                ...onlyWarnsForInMonorepoPackages[checkSubPackage.pkg.name],\n              }\n            : undefined,\n          onlyWarnsForInDependencies: {\n            ...onlyWarnsForInMonorepoPackagesDependencies['*'],\n            ...onlyWarnsForInMonorepoPackagesDependencies[\n              checkSubPackage.pkg.name\n            ],\n          },\n          internalExactVersionsIgnore: [...checksWorkspaces.keys()],\n          checkResolutionMessage,\n        });\n\n        const reportMonorepoDDDError = createReportError(\n          'Monorepo Direct Duplicate Dependencies',\n          checkSubPackage.pkgPathName,\n        );\n        // Root\n        checkDuplicateDependencies(\n          reportMonorepoDDDError,\n          checkSubPackage.pkg,\n          checkSubPackage.isPkgLibrary,\n          'devDependencies',\n          ['dependencies', 'devDependencies'],\n          pkg,\n          monorepoDirectDuplicateDependenciesOnlyWarnsForCheck.createFor(\n            checkSubPackage.pkg.name,\n          ),\n        );\n        // previous packages\n        previousCheckedWorkspaces.forEach((previousCheckSubPackage) => {\n          checkDuplicateDependencies(\n            reportMonorepoDDDError,\n            checkSubPackage.pkg,\n            checkSubPackage.isPkgLibrary,\n            'devDependencies',\n            ['dependencies', 'devDependencies'],\n            previousCheckSubPackage.pkg,\n            monorepoDirectDuplicateDependenciesOnlyWarnsForCheck.createFor(\n              checkSubPackage.pkg.name,\n            ),\n          );\n          checkDuplicateDependencies(\n            reportMonorepoDDDError,\n            checkSubPackage.pkg,\n            checkSubPackage.isPkgLibrary,\n            'dependencies',\n            ['dependencies', 'devDependencies'],\n            previousCheckSubPackage.pkg,\n            monorepoDirectDuplicateDependenciesOnlyWarnsForCheck.createFor(\n              checkSubPackage.pkg.name,\n            ),\n          );\n          checkDuplicateDependencies(\n            reportMonorepoDDDError,\n            checkSubPackage.pkg,\n            checkSubPackage.isPkgLibrary,\n            'peerDependencies',\n            ['peerDependencies'],\n            previousCheckSubPackage.pkg,\n            monorepoDirectDuplicateDependenciesOnlyWarnsForCheck.createFor(\n              checkSubPackage.pkg.name,\n            ),\n          );\n        });\n\n        previousCheckedWorkspaces.set(id, checkSubPackage);\n      });\n      reportNotWarnedForMapping(\n        createReportError(\n          'Monorepo Direct Duplicate Dependencies',\n          checkPackage.pkgPathName,\n        ),\n        monorepoDirectDuplicateDependenciesOnlyWarnsForCheck,\n      );\n\n      return this;\n    },\n\n    forRoot(callback) {\n      callback(checkPackage);\n      return this;\n    },\n\n    forEach(callback) {\n      checksWorkspaces.forEach((checkSubPackage) => {\n        callback(checkSubPackage);\n      });\n      return this;\n    },\n\n    for(id, callback) {\n      const packageCheck = checksWorkspaces.get(id);\n      if (!packageCheck) {\n        throw new Error(\n          `Invalid package name: ${id}. Known package names: \"${[\n            ...checksWorkspaces.keys(),\n          ].join('\",\"')}\"`,\n        );\n      }\n      callback(packageCheck);\n      return this;\n    },\n  };\n}\n"],"names":["importResolve"],"mappings":"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"}