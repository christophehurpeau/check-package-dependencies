{"version":3,"file":"index-node12-dev.cjs.js","sources":["../src/utils/createReportError.ts","../src/checks/checkDirectDuplicateDependencies.ts","../src/checks/checkPeerDependencies.ts","../src/checks/checkDirectPeerDependencies.ts","../src/checks/checkExactVersions.ts","../src/utils/object.ts","../src/checks/checkIdenticalVersions.ts","../src/checks/checkIdenticalVersionsThanDependency.ts","../src/checks/checkNoDependencies.ts","../src/checks/checkResolutionsHasExplanation.ts","../src/checks/checkSatisfiesVersionsFromDependency.ts","../src/utils/createGetDependencyPackageJson.ts","../src/check-package.ts","../src/check-package-with-workspaces.ts"],"sourcesContent":["/* eslint-disable no-console */\n\nimport chalk from 'chalk';\n\nexport type ReportError = (\n  msgTitle: string,\n  msgInfo?: string,\n  onlyWarns?: boolean,\n) => void;\n\nlet titleDisplayed: string | null = null;\nlet pkgPathDisplayed: string | null = null;\n\nexport function logMessage(\n  msgTitle: string,\n  msgInfo?: string,\n  onlyWarns?: boolean,\n): void {\n  console.error(\n    `${\n      onlyWarns ? chalk.yellow(`⚠ ${msgTitle}`) : chalk.red(`❌ ${msgTitle}`)\n    }${msgInfo ? `: ${msgInfo}` : ''}`,\n  );\n}\n\nexport function createReportError(\n  title: string,\n  pkgPathName: string,\n): ReportError {\n  return function reportError(msgTitle, msgInfo, onlyWarns): void {\n    if (titleDisplayed !== title || pkgPathName !== pkgPathDisplayed) {\n      if (titleDisplayed) console.error();\n      console.error(chalk.cyan(`== ${title} in ${pkgPathName} ==`));\n      titleDisplayed = title;\n      pkgPathDisplayed = pkgPathName;\n    }\n    logMessage(msgTitle, msgInfo, onlyWarns);\n\n    if (!onlyWarns) {\n      // console.trace();\n      process.exitCode = 1;\n    }\n  };\n}\n","import semver from 'semver';\nimport type { ReportError } from '../utils/createReportError';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport function checkWarnedFor(\n  reportError: ReportError,\n  onlyWarnsFor: string[] = [],\n  warnedFor: Set<string>,\n): void {\n  onlyWarnsFor.forEach((depName) => {\n    if (!warnedFor.has(depName)) {\n      reportError(\n        `Invalid \"${depName}\" in \"onlyWarnsFor\" but no warning was raised`,\n      );\n    }\n  });\n}\n\nexport function checkDirectDuplicateDependencies(\n  pkg: PackageJson,\n  pkgPathName: string,\n  depType: DependencyTypes,\n  searchIn: DependencyTypes[],\n  depPkg: PackageJson,\n  onlyWarnsFor: string[] = [],\n  warnedForInternal?: Set<string>,\n): void {\n  const dependencies = depPkg[depType];\n  if (!dependencies) return;\n\n  const warnedFor = warnedForInternal || new Set<string>();\n\n  const reportError = createReportError(\n    'Direct Duplicate Dependencies',\n    pkgPathName,\n  );\n  const searchInExisting = searchIn.filter((type) => pkg[type]);\n\n  for (const [depKey, range] of Object.entries(dependencies)) {\n    const versionsIn = searchInExisting.filter((type) => pkg[type]![depKey]);\n\n    if (versionsIn.length > 1) {\n      reportError(\n        `${depKey} is present in both devDependencies and dependencies, please place it only in dependencies`,\n      );\n    } else {\n      const versions = versionsIn.map((type) => pkg[type]![depKey]);\n\n      versions.forEach((version, index) => {\n        if (version.startsWith('file:') || range.startsWith('file:')) return;\n        // https://yarnpkg.com/features/workspaces#workspace-ranges-workspace\n        if (\n          version.startsWith('workspace:') ||\n          range.startsWith('workspace:')\n        ) {\n          return;\n        }\n\n        if (semver.intersects(version, range)) {\n          return;\n        }\n\n        // Ignore reporting duplicate when there's a resolution for it\n        if (pkg.resolutions?.[depKey]) {\n          return;\n        }\n\n        const versionInType = versionsIn[index];\n        const shouldWarns = onlyWarnsFor.includes(depKey);\n        if (shouldWarns) warnedFor.add(depKey);\n\n        reportError(\n          `Invalid duplicate dependency \"${depKey}\"`,\n          `\"${versions[0]}\" (in ${versionInType}) should satisfies \"${range}\" from \"${depPkg.name}\" ${depType}.`,\n          shouldWarns,\n        );\n      });\n    }\n  }\n\n  if (!warnedForInternal) {\n    checkWarnedFor(reportError, onlyWarnsFor, warnedFor);\n  }\n}\n","import semver from 'semver';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport function checkPeerDependencies(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  allowedPeerIn: DependencyTypes[],\n  depPkg: PackageJson,\n  onlyWarnsFor: string[] = [],\n): void {\n  const { peerDependencies, peerDependenciesMeta } = depPkg;\n  if (!peerDependencies) return;\n  const reportError = createReportError('Peer Dependencies', pkgPathName);\n\n  const allowedPeerInExisting = allowedPeerIn.filter((type) => pkg[type]);\n\n  for (const [peerDepKey, range] of Object.entries(peerDependencies)) {\n    const versionsIn = allowedPeerInExisting.filter(\n      (type) => pkg[type]![peerDepKey],\n    );\n    if (versionsIn.length === 0) {\n      const peerDependenciesMetaPeerDep = peerDependenciesMeta?.[peerDepKey];\n      if (peerDependenciesMetaPeerDep?.optional) {\n        return;\n      }\n      reportError(\n        `Missing \"${peerDepKey}\" peer dependency from \"${depPkg.name}\" in ${type}`,\n        `it should satisfies \"${range}\" and be in ${allowedPeerIn.join(\n          ' or ',\n        )}`,\n        onlyWarnsFor.includes(peerDepKey),\n      );\n    } else {\n      const versions = versionsIn.map((type) => pkg[type]![peerDepKey]);\n\n      versions.forEach((version, index) => {\n        const minVersionOfVersion = semver.minVersion(version);\n        if (\n          !minVersionOfVersion ||\n          !semver.satisfies(minVersionOfVersion, range)\n        ) {\n          reportError(\n            `Invalid \"${peerDepKey}\" peer dependency`,\n            `\"${version}\" (in ${allowedPeerInExisting[index]}) should satisfies \"${range}\" from \"${depPkg.name}\" ${type}`,\n            onlyWarnsFor.includes(peerDepKey),\n          );\n        }\n      });\n    }\n  }\n}\n","import type {\n  DependencyTypes,\n  PackageJson,\n  RegularDependencyTypes,\n} from '../utils/packageTypes';\nimport { checkPeerDependencies } from './checkPeerDependencies';\n\nconst getAllowedPeerInFromType = (\n  depPkgType: RegularDependencyTypes,\n  isLibrary: boolean,\n): DependencyTypes[] => {\n  switch (depPkgType) {\n    case 'devDependencies':\n      return ['devDependencies', 'dependencies'];\n    case 'dependencies':\n    case 'optionalDependencies':\n      return isLibrary\n        ? ['dependencies', 'peerDependencies']\n        : ['dependencies'];\n  }\n};\n\nexport function checkDirectPeerDependencies(\n  isLibrary: boolean,\n  pkg: PackageJson,\n  pkgPathName: string,\n  depPkgType: RegularDependencyTypes,\n  depPkg: PackageJson,\n  onlyWarnsFor: string[] = [],\n): void {\n  if (depPkg.peerDependencies) {\n    checkPeerDependencies(\n      pkg,\n      pkgPathName,\n      depPkgType,\n      getAllowedPeerInFromType(depPkgType, isLibrary),\n      depPkg,\n      onlyWarnsFor,\n    );\n  }\n  // TODO optionalPeerDependency\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport function checkExactVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  onlyWarnsFor: string[] = [],\n): void {\n  const pkgDependencies = pkg[type];\n  if (!pkgDependencies) return;\n\n  const reportError = createReportError('Exact versions', pkgPathName);\n\n  for (const [depKey, version] of Object.entries(pkgDependencies)) {\n    if (version.startsWith('^') || version.startsWith('~')) {\n      reportError(\n        `Unexpected range dependency in \"${type}\" for \"${depKey}\"`,\n        `expecting \"${version}\" to be exact \"${version.slice(1)}\".`,\n        onlyWarnsFor.includes(depKey),\n      );\n    }\n  }\n}\n","export const getKeys = <T>(o: T): (keyof T)[] => Object.keys(o) as (keyof T)[];\n","import { createReportError } from '../utils/createReportError';\nimport { getKeys } from '../utils/object';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\n\nexport function checkIdenticalVersions(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  deps: Record<string, string[]>,\n  onlyWarnsFor: string[] = [],\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError('Identical Versions', pkgPathName);\n\n  getKeys(deps).forEach((depKey) => {\n    const version = pkgDependencies[depKey];\n    if (!version) {\n      reportError(`Unexpected missing ${type} for \"${depKey}\".`);\n      return;\n    }\n\n    deps[depKey].forEach((depKeyIdentical) => {\n      const value = pkgDependencies[depKeyIdentical];\n      if (!value) {\n        reportError(\n          `Missing \"${depKeyIdentical}\" in ${type}`,\n          `it should be \"${version}\".`,\n          onlyWarnsFor.includes(depKey),\n        );\n      }\n\n      if (value !== version) {\n        reportError(\n          `Invalid \"${depKeyIdentical}\" in ${type}`,\n          `expecting \"${value}\" be \"${version}\".`,\n          onlyWarnsFor.includes(depKey),\n        );\n      }\n    });\n  });\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport function checkIdenticalVersionsThanDependency(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  depKeys: string[],\n  depPkg: PackageJson,\n  dependencies: PackageJson[DependencyTypes] = {},\n  onlyWarnsFor: string[] = [],\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError(\n    `Same Versions than ${depPkg.name}`,\n    pkgPathName,\n  );\n\n  depKeys.forEach((depKey) => {\n    const version = dependencies[depKey];\n    if (!version) {\n      reportError(\n        `Unexpected missing dependency \"${depKey}\" in \"${depPkg.name}\".`,\n      );\n      return;\n    }\n\n    if (version.startsWith('^') || version.startsWith('~')) {\n      reportError(\n        `Unexpected range dependency in \"${depPkg.name}\" for \"${depKey}\"`,\n        'perhaps use checkSatisfiesVersionsFromDependency() instead.',\n      );\n      return;\n    }\n\n    const value = pkgDependencies[depKey];\n\n    if (!value) {\n      reportError(\n        `Missing \"${depKey}\" in ${type}`,\n        `expecting to be \"${version}\".`,\n        onlyWarnsFor.includes(depKey),\n      );\n    }\n\n    if (value !== version) {\n      reportError(\n        `Invalid \"${depKey}\" in ${type}`,\n        `expecting \"${value}\" to be \"${version}\".`,\n        onlyWarnsFor.includes(depKey),\n      );\n    }\n  });\n}\n","import { createReportError } from '../utils/createReportError';\nimport type { PackageJson, DependencyTypes } from '../utils/packageTypes';\n\nexport function checkNoDependencies(\n  pkg: PackageJson,\n  pkgPath: string,\n  type: DependencyTypes = 'dependencies',\n  moveToSuggestion: DependencyTypes = 'devDependencies',\n): void {\n  const pkgDependencies = pkg[type];\n  if (!pkgDependencies) return;\n\n  const reportError = createReportError('No dependencies', pkgPath);\n  reportError(\n    `Unexpected ${type}`,\n    `you should move them in ${moveToSuggestion}`,\n  );\n}\n","import type { GetDependencyPackageJson } from '../utils/createGetDependencyPackageJson';\nimport { createReportError } from '../utils/createReportError';\nimport type { PackageJson } from '../utils/packageTypes';\n\nexport type CheckResolutionMessage = (\n  depKey: string,\n  resolutionExplainedMessage: string,\n  checkMessageHelpers: {\n    getDependencyPackageJson: GetDependencyPackageJson;\n  },\n) => string | undefined;\n\nexport function checkResolutionsHasExplanation(\n  pkg: PackageJson,\n  pkgPathName: string,\n  checkMessage: CheckResolutionMessage,\n  getDependencyPackageJson: GetDependencyPackageJson,\n): void {\n  const pkgResolutions = pkg.resolutions || {};\n  const pkgResolutionsExplained = pkg.resolutionsExplained || {};\n  const reportError = createReportError(\n    'Resolutions has explanation',\n    pkgPathName,\n  );\n\n  Object.keys(pkgResolutions).forEach((depKey) => {\n    if (!pkgResolutionsExplained[depKey]) {\n      reportError(`Missing \"${depKey}\" in resolutionsExplained.`);\n    }\n  });\n\n  Object.keys(pkgResolutionsExplained).forEach((depKey) => {\n    if (!pkgResolutions[depKey]) {\n      reportError(\n        `Found \"${depKey}\" in resolutionsExplained but not in resolutions.`,\n      );\n    } else {\n      const error = checkMessage(depKey, pkgResolutionsExplained[depKey], {\n        getDependencyPackageJson,\n      });\n      if (error) {\n        reportError(\n          `Invalid message for \"${depKey}\" in resolutionsExplained`,\n          `${error}.`,\n        );\n      }\n    }\n  });\n}\n","import semver from 'semver';\nimport { createReportError } from '../utils/createReportError';\nimport type { DependencyTypes, PackageJson } from '../utils/packageTypes';\n\nexport function checkSatisfiesVersionsFromDependency(\n  pkg: PackageJson,\n  pkgPathName: string,\n  type: DependencyTypes,\n  depKeys: string[],\n  depPkg: PackageJson,\n  dependencies: PackageJson[DependencyTypes] = {},\n  onlyWarnsFor: string[] = [],\n): void {\n  const pkgDependencies = pkg[type] || {};\n  const reportError = createReportError(\n    `Satisfies Versions from ${depPkg.name}`,\n    pkgPathName,\n  );\n\n  depKeys.forEach((depKey) => {\n    const range = dependencies[depKey];\n    if (!range) {\n      reportError(\n        `Unexpected missing dependency \"${depKey}\" in \"${depPkg.name}\".`,\n      );\n      return;\n    }\n\n    const version = pkgDependencies[depKey];\n\n    if (!version) {\n      reportError(\n        `Missing \"${depKey}\" in ${type}`,\n        `should satisfies \"${range}\" from \"${depPkg.name}\" ${depKey}.`,\n        onlyWarnsFor.includes(depKey),\n      );\n    } else {\n      const minVersionOfVersion = semver.minVersion(version);\n      if (\n        !minVersionOfVersion ||\n        !semver.satisfies(minVersionOfVersion, range)\n      ) {\n        reportError(\n          `Invalid \"${depKey}\" in ${type}`,\n          `\"${version}\" (in \"${depKey}\") should satisfies \"${range}\" from \"${depPkg.name}\" ${depKey}.`,\n          onlyWarnsFor.includes(depKey),\n        );\n      }\n    }\n  });\n}\n","import { readFileSync } from 'fs';\nimport type { PackageJson } from './packageTypes';\n\nexport type GetDependencyPackageJson = (pkgDepName: string) => PackageJson;\n\nexport function readPkgJson(packagePath: string): PackageJson {\n  return JSON.parse(readFileSync(packagePath, 'utf-8')) as PackageJson;\n}\n\ntype NodeModulesPackagePathCache = Map<string, PackageJson>;\n\ninterface CreateGetDependencyPackageJsonOptions {\n  pkgDirname: string;\n  nodeModulesPackagePathCache?: NodeModulesPackagePathCache;\n}\n\nexport function createGetDependencyPackageJson({\n  pkgDirname,\n  nodeModulesPackagePathCache = new Map<string, PackageJson>(),\n}: CreateGetDependencyPackageJsonOptions): GetDependencyPackageJson {\n  return (pkgDepName) => {\n    const existing = nodeModulesPackagePathCache.get(pkgDepName);\n    if (existing) return existing;\n    let pkg: PackageJson;\n    if (pkgDepName.startsWith('.')) {\n      const packagePath = `${pkgDirname}/${pkgDepName}/package.json`;\n      pkg = readPkgJson(packagePath);\n    } else {\n      try {\n        // eslint-disable-next-line import/no-dynamic-require, @typescript-eslint/no-unsafe-assignment\n        pkg = require(require.resolve(`${pkgDepName}/package.json`, {\n          paths: [pkgDirname],\n        }));\n      } catch (err) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (err.code !== 'ERR_PACKAGE_PATH_NOT_EXPORTED') {\n          throw err;\n        }\n\n        const match = / in (.*\\/package.json)($|\\simported from)/.exec(\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          err.message,\n        );\n\n        if (match) {\n          const [, matchPackageJson] = match;\n          pkg = readPkgJson(matchPackageJson);\n        } else {\n          throw err;\n        }\n      }\n    }\n    nodeModulesPackagePathCache.set(pkgDepName, pkg);\n    return pkg;\n  };\n}\n","/* eslint-disable max-lines */\nimport path from 'path';\nimport {\n  checkDirectDuplicateDependencies,\n  checkWarnedFor,\n} from './checks/checkDirectDuplicateDependencies';\nimport { checkDirectPeerDependencies } from './checks/checkDirectPeerDependencies';\nimport { checkExactVersions } from './checks/checkExactVersions';\nimport { checkIdenticalVersions } from './checks/checkIdenticalVersions';\nimport { checkIdenticalVersionsThanDependency } from './checks/checkIdenticalVersionsThanDependency';\nimport { checkNoDependencies } from './checks/checkNoDependencies';\nimport type { CheckResolutionMessage } from './checks/checkResolutionsHasExplanation';\nimport { checkResolutionsHasExplanation } from './checks/checkResolutionsHasExplanation';\nimport { checkSatisfiesVersionsFromDependency } from './checks/checkSatisfiesVersionsFromDependency';\nimport type { GetDependencyPackageJson } from './utils/createGetDependencyPackageJson';\nimport {\n  createGetDependencyPackageJson,\n  readPkgJson,\n} from './utils/createGetDependencyPackageJson';\nimport { createReportError } from './utils/createReportError';\nimport { getKeys } from './utils/object';\nimport type {\n  RegularDependencyTypes,\n  DependencyTypes,\n  PackageJson,\n} from './utils/packageTypes';\n\nconst regularDependencyTypes: RegularDependencyTypes[] = [\n  'devDependencies',\n  'dependencies',\n  'optionalDependencies',\n];\n\nexport interface CheckDirectPeerDependenciesOptions {\n  isLibrary?: boolean;\n  onlyWarnsFor?: string[];\n}\n\nexport interface CheckDirectDuplicateDependenciesOptions {\n  onlyWarnsFor?: string[];\n  /** @internal */\n  internalWarnedForDuplicate?: Set<string>;\n}\n\nexport interface CheckRecommendedOptions {\n  isLibrary?: boolean;\n  peerDependenciesOnlyWarnsFor?: string[];\n  directDuplicateDependenciesOnlyWarnsFor?: string[];\n  exactVersionsOnlyWarnsFor?: string[];\n  checkResolutionMessage?: CheckResolutionMessage;\n  /** @internal */\n  internalWarnedForDuplicate?: Set<string>;\n}\n\nexport interface CheckExactVersionsOptions {\n  onlyWarnsFor?: string[];\n}\n\nexport interface CheckPackageApi {\n  /** @internal */\n  pkg: PackageJson;\n  /** @internal */\n  pkgDirname: string;\n  /** @internal */\n  pkgPathName: string;\n  /** @internal */\n  getDependencyPackageJson: GetDependencyPackageJson;\n\n  checkExactVersions: (options?: CheckExactVersionsOptions) => CheckPackageApi;\n  checkExactVersionsForLibrary: (\n    options?: CheckExactVersionsOptions,\n  ) => CheckPackageApi;\n  checkExactDevVersions: (\n    options?: CheckExactVersionsOptions,\n  ) => CheckPackageApi;\n  checkNoDependencies: (\n    type?: DependencyTypes,\n    moveToSuggestion?: DependencyTypes,\n  ) => CheckPackageApi;\n  checkDirectPeerDependencies: (\n    options?: CheckDirectPeerDependenciesOptions,\n  ) => CheckPackageApi;\n  checkDirectDuplicateDependencies: (\n    options?: CheckDirectDuplicateDependenciesOptions,\n  ) => CheckPackageApi;\n  checkResolutionsHasExplanation: (\n    checkMessage?: CheckResolutionMessage,\n  ) => CheckPackageApi;\n  checkRecommended: (options?: CheckRecommendedOptions) => CheckPackageApi;\n  checkIdenticalVersionsThanDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkIdenticalVersionsThanDevDependencyOfDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkSatisfiesVersionsFromDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkSatisfiesVersionsInDevDependenciesOfDependency: (\n    depName: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n  checkIdenticalVersions: (dependencies: {\n    resolutions?: Record<string, string[]>;\n    dependencies?: Record<string, string[]>;\n    devDependencies?: Record<string, string[]>;\n  }) => CheckPackageApi;\n  checkSatisfiesVersionsBetweenDependencies: (\n    depName1: string,\n    depName2: string,\n    dependencies: {\n      resolutions?: string[];\n      dependencies?: string[];\n      devDependencies?: string[];\n    },\n  ) => CheckPackageApi;\n}\n\nexport function createCheckPackage(pkgDirectoryPath = '.'): CheckPackageApi {\n  const pkgDirname = path.resolve(pkgDirectoryPath);\n  const pkgPath = `${pkgDirname}/package.json`;\n  const pkgPathName = `${pkgDirectoryPath}/package.json`;\n  const pkg = readPkgJson(pkgPath);\n\n  const getDependencyPackageJson = createGetDependencyPackageJson({\n    pkgDirname,\n  });\n\n  return {\n    pkg,\n    pkgDirname,\n    pkgPathName,\n    getDependencyPackageJson,\n    checkExactVersions({ onlyWarnsFor } = {}) {\n      checkExactVersions(pkg, pkgPathName, 'dependencies', onlyWarnsFor);\n      checkExactVersions(pkg, pkgPathName, 'devDependencies', onlyWarnsFor);\n      checkExactVersions(pkg, pkgPathName, 'resolutions', onlyWarnsFor);\n      return this;\n    },\n    checkExactVersionsForLibrary({ onlyWarnsFor } = {}) {\n      checkExactVersions(pkg, pkgPathName, 'devDependencies', onlyWarnsFor);\n      checkExactVersions(pkg, pkgPathName, 'resolutions', onlyWarnsFor);\n      return this;\n    },\n\n    checkExactDevVersions({ onlyWarnsFor } = {}) {\n      checkExactVersions(pkg, pkgPathName, 'devDependencies', onlyWarnsFor);\n      return this;\n    },\n\n    checkNoDependencies(\n      type = 'dependencies',\n      moveToSuggestion = 'devDependencies',\n    ) {\n      checkNoDependencies(pkg, pkgPathName, type, moveToSuggestion);\n      return this;\n    },\n\n    checkDirectPeerDependencies({ isLibrary = false, onlyWarnsFor } = {}) {\n      regularDependencyTypes.forEach((depType) => {\n        if (!pkg[depType]) return;\n        getKeys(pkg[depType]).forEach((depName) => {\n          const depPkg = getDependencyPackageJson(depName);\n          if (depPkg.peerDependencies) {\n            checkDirectPeerDependencies(\n              isLibrary,\n              pkg,\n              pkgPathName,\n              depType,\n              depPkg,\n              onlyWarnsFor,\n            );\n          }\n          // TODO optionalPeerDependency\n        });\n      });\n      return this;\n    },\n\n    checkDirectDuplicateDependencies({\n      onlyWarnsFor,\n      internalWarnedForDuplicate,\n    } = {}) {\n      const warnedForInternal = internalWarnedForDuplicate || new Set();\n      const checks: {\n        type: DependencyTypes;\n        searchIn: DependencyTypes[];\n      }[] = [\n        {\n          type: 'devDependencies',\n          searchIn: ['devDependencies', 'dependencies'],\n        },\n        { type: 'dependencies', searchIn: ['devDependencies', 'dependencies'] },\n      ];\n      checks.forEach(({ type, searchIn }) => {\n        if (!pkg[type]) return;\n        getKeys(pkg[type]).forEach((depName) => {\n          const depPkg = getDependencyPackageJson(depName);\n          checkDirectDuplicateDependencies(\n            pkg,\n            pkgPathName,\n            'dependencies',\n            searchIn,\n            depPkg,\n            onlyWarnsFor,\n            warnedForInternal,\n          );\n        });\n      });\n\n      if (!warnedForInternal) {\n        const reportError = createReportError(\n          'Direct Duplicate Dependencies',\n          pkgPathName,\n        );\n        checkWarnedFor(reportError, onlyWarnsFor, warnedForInternal);\n      }\n      return this;\n    },\n\n    checkResolutionsHasExplanation(\n      checkMessage: CheckResolutionMessage = (depKey, message) => undefined,\n    ) {\n      checkResolutionsHasExplanation(\n        pkg,\n        pkgPathName,\n        checkMessage,\n        getDependencyPackageJson,\n      );\n      return this;\n    },\n\n    checkRecommended({\n      isLibrary = false,\n      peerDependenciesOnlyWarnsFor,\n      directDuplicateDependenciesOnlyWarnsFor,\n      exactVersionsOnlyWarnsFor,\n      checkResolutionMessage,\n      internalWarnedForDuplicate,\n    } = {}) {\n      if (isLibrary) {\n        this.checkExactVersionsForLibrary({\n          onlyWarnsFor: exactVersionsOnlyWarnsFor,\n        });\n      } else {\n        this.checkExactVersions({ onlyWarnsFor: exactVersionsOnlyWarnsFor });\n      }\n\n      this.checkDirectPeerDependencies({\n        isLibrary,\n        onlyWarnsFor: peerDependenciesOnlyWarnsFor,\n      });\n\n      this.checkDirectDuplicateDependencies({\n        onlyWarnsFor: directDuplicateDependenciesOnlyWarnsFor,\n        internalWarnedForDuplicate,\n      });\n\n      this.checkResolutionsHasExplanation(checkResolutionMessage);\n      return this;\n    },\n\n    checkIdenticalVersionsThanDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (dependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      return this;\n    },\n\n    checkIdenticalVersionsThanDevDependencyOfDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (dependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (devDependencies) {\n        checkIdenticalVersionsThanDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsFromDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.dependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsInDevDependenciesOfDependency(\n      depName,\n      { resolutions, dependencies, devDependencies },\n    ) {\n      const depPkg = getDependencyPackageJson(depName);\n      if (resolutions) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'resolutions',\n          resolutions,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg,\n          depPkg.devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkIdenticalVersions({ resolutions, dependencies, devDependencies }) {\n      if (resolutions) {\n        checkIdenticalVersions(pkg, pkgPathName, 'resolutions', resolutions);\n      }\n      if (dependencies) {\n        checkIdenticalVersions(pkg, pkgPathName, 'dependencies', dependencies);\n      }\n      if (devDependencies) {\n        checkIdenticalVersions(\n          pkg,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n        );\n      }\n      return this;\n    },\n\n    checkSatisfiesVersionsBetweenDependencies(\n      depName1,\n      depName2,\n      { dependencies, devDependencies },\n    ) {\n      const depPkg1 = getDependencyPackageJson(depName1);\n      const depPkg2 = getDependencyPackageJson(depName2);\n      if (dependencies) {\n        checkSatisfiesVersionsFromDependency(\n          depPkg2,\n          pkgPathName,\n          'dependencies',\n          dependencies,\n          depPkg1,\n          depPkg1.dependencies,\n        );\n      }\n      if (devDependencies) {\n        checkSatisfiesVersionsFromDependency(\n          depPkg2,\n          pkgPathName,\n          'devDependencies',\n          devDependencies,\n          depPkg1,\n          depPkg1.dependencies,\n        );\n      }\n      return this;\n    },\n  };\n}\n","import fs from 'fs';\nimport path from 'path';\nimport glob from 'glob';\nimport type { CheckPackageApi } from './check-package';\nimport { createCheckPackage } from './check-package';\nimport {\n  checkDirectDuplicateDependencies,\n  checkWarnedFor,\n} from './checks/checkDirectDuplicateDependencies';\nimport type { CheckResolutionMessage } from './checks/checkResolutionsHasExplanation';\nimport { createReportError } from './utils/createReportError';\n\nexport interface CheckPackageWithWorkspacesRecommendedOptions {\n  isLibrary?: (pkgName: string) => boolean;\n  peerDependenciesOnlyWarnsFor?: string[];\n  directDuplicateDependenciesOnlyWarnsFor?: string[];\n  checkResolutionMessage?: CheckResolutionMessage;\n}\n\nexport interface CheckPackageWithWorkspacesApi {\n  checkRecommended: (\n    options?: CheckPackageWithWorkspacesRecommendedOptions,\n  ) => CheckPackageWithWorkspacesApi;\n\n  forRoot: (\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n  forEach: (\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n  for: (\n    id: string,\n    callback: (checkPackage: CheckPackageApi) => void,\n  ) => CheckPackageWithWorkspacesApi;\n}\n\nexport function createCheckPackageWithWorkspaces(\n  pkgDirectoryPath = '.',\n): CheckPackageWithWorkspacesApi {\n  const checkPackage = createCheckPackage(pkgDirectoryPath);\n  const { pkg, pkgDirname, pkgPathName } = checkPackage;\n\n  const pkgWorkspaces: undefined | string[] =\n    pkg.workspaces && !Array.isArray(pkg.workspaces)\n      ? pkg.workspaces.packages\n      : pkg.workspaces;\n\n  if (!pkgWorkspaces) {\n    throw new Error('Package is missing \"workspaces\"');\n  }\n\n  const workspacePackagesPaths: string[] = [];\n\n  if (pkgWorkspaces) {\n    pkgWorkspaces.forEach((pattern) => {\n      const match = glob.sync(`${pkgDirname}/${pattern}`);\n      match.forEach((pathMatch) => {\n        const stat = fs.statSync(pathMatch);\n        if (!stat.isDirectory()) return;\n        const pkgDirectoryPath = path.relative(process.cwd(), pathMatch);\n        workspacePackagesPaths.push(pkgDirectoryPath);\n      });\n    });\n  }\n\n  const checksWorkspaces = new Map<string, CheckPackageApi>(\n    workspacePackagesPaths.map((pkgDirectoryPath) => {\n      const checkPkg = createCheckPackage(pkgDirectoryPath);\n      return [checkPkg.pkg.name, checkPkg];\n    }),\n  );\n\n  return {\n    checkRecommended({\n      isLibrary = () => false,\n      peerDependenciesOnlyWarnsFor,\n      directDuplicateDependenciesOnlyWarnsFor,\n      checkResolutionMessage,\n    } = {}) {\n      const warnedForDuplicate = new Set<string>();\n      checkPackage.checkNoDependencies();\n      checkPackage.checkRecommended({\n        isLibrary: false,\n        peerDependenciesOnlyWarnsFor,\n        directDuplicateDependenciesOnlyWarnsFor,\n        checkResolutionMessage,\n        internalWarnedForDuplicate: warnedForDuplicate,\n      });\n\n      checksWorkspaces.forEach((checkPackage, id) => {\n        checkPackage.checkRecommended({\n          isLibrary: isLibrary(id),\n          peerDependenciesOnlyWarnsFor,\n          directDuplicateDependenciesOnlyWarnsFor,\n          exactVersionsOnlyWarnsFor: [...checksWorkspaces.keys()],\n          checkResolutionMessage,\n          internalWarnedForDuplicate: warnedForDuplicate,\n        });\n        checkDirectDuplicateDependencies(\n          checkPackage.pkg,\n          checkPackage.pkgPathName,\n          'devDependencies',\n          ['devDependencies', 'dependencies'],\n          pkg,\n          [],\n          warnedForDuplicate,\n        );\n      });\n\n      checkWarnedFor(\n        createReportError('Recommended Checks', pkgPathName),\n        directDuplicateDependenciesOnlyWarnsFor,\n        warnedForDuplicate,\n      );\n\n      return this;\n    },\n\n    forRoot(callback) {\n      callback(checkPackage);\n      return this;\n    },\n\n    forEach(callback) {\n      checksWorkspaces.forEach((checkPackage) => {\n        callback(checkPackage);\n      });\n      return this;\n    },\n\n    for(id, callback) {\n      const packageCheck = checksWorkspaces.get(id);\n      if (!packageCheck) {\n        throw new Error(\n          `Invalid package name: ${id}. Known package names: \"${[\n            ...checksWorkspaces.keys(),\n          ].join('\",\"')}\"`,\n        );\n      }\n      callback(packageCheck);\n      return this;\n    },\n  };\n}\n"],"names":["titleDisplayed","pkgPathDisplayed","logMessage","msgTitle","msgInfo","onlyWarns","console","error","chalk","yellow","red","createReportError","title","pkgPathName","reportError","cyan","process","exitCode","checkWarnedFor","onlyWarnsFor","warnedFor","forEach","depName","has","checkDirectDuplicateDependencies","pkg","depType","searchIn","depPkg","warnedForInternal","dependencies","Set","searchInExisting","filter","type","depKey","range","Object","entries","versionsIn","length","versions","map","version","index","startsWith","semver","intersects","resolutions","versionInType","shouldWarns","includes","add","name","checkPeerDependencies","allowedPeerIn","peerDependencies","peerDependenciesMeta","allowedPeerInExisting","peerDepKey","peerDependenciesMetaPeerDep","optional","join","minVersionOfVersion","minVersion","satisfies","getAllowedPeerInFromType","depPkgType","isLibrary","checkDirectPeerDependencies","checkExactVersions","pkgDependencies","slice","getKeys","o","keys","checkIdenticalVersions","deps","depKeyIdentical","value","checkIdenticalVersionsThanDependency","depKeys","checkNoDependencies","pkgPath","moveToSuggestion","checkResolutionsHasExplanation","checkMessage","getDependencyPackageJson","pkgResolutions","pkgResolutionsExplained","resolutionsExplained","checkSatisfiesVersionsFromDependency","readPkgJson","packagePath","JSON","parse","readFileSync","createGetDependencyPackageJson","pkgDirname","nodeModulesPackagePathCache","Map","pkgDepName","existing","get","require","resolve","paths","err","code","match","exec","message","matchPackageJson","set","regularDependencyTypes","createCheckPackage","pkgDirectoryPath","path","checkExactVersionsForLibrary","checkExactDevVersions","internalWarnedForDuplicate","undefined","checkRecommended","peerDependenciesOnlyWarnsFor","directDuplicateDependenciesOnlyWarnsFor","exactVersionsOnlyWarnsFor","checkResolutionMessage","devDependencies","checkIdenticalVersionsThanDevDependencyOfDependency","checkSatisfiesVersionsInDevDependenciesOfDependency","checkSatisfiesVersionsBetweenDependencies","depName1","depName2","depPkg1","depPkg2","createCheckPackageWithWorkspaces","checkPackage","pkgWorkspaces","workspaces","Array","isArray","packages","Error","workspacePackagesPaths","pattern","glob","sync","pathMatch","stat","fs","statSync","isDirectory","relative","cwd","push","checksWorkspaces","checkPkg","warnedForDuplicate","id","forRoot","callback","for","packageCheck"],"mappings":"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"}